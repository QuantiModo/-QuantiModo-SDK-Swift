//
// UserVariable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class UserVariable: JSONEncodable {
    /** ID of the parent variable if this variable has any parent */
    public var parentId: Int32?
    /** User ID */
    public var userId: Int32?
    /** clientId */
    public var clientId: String?
    /** ID of variable */
    public var variableId: Int32?
    /** ID of unit to use for this variable */
    public var defaultUnitId: Int32?
    /** The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis. */
    public var minimumAllowedValue: Float?
    /** The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis. */
    public var maximumAllowedValue: Float?
    /** When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven&#39;t taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing. */
    public var fillingValue: Float?
    /** The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables */
    public var joinWith: Int32?
    /** The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes. */
    public var onsetDelay: Int32?
    /** The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay. */
    public var durationOfAction: Int32?
    /** ID of variable category */
    public var variableCategoryId: Int32?
    /** updated */
    public var updated: Int32?
    /** Is variable public */
    public var _public: Int32?
    /** A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user */
    public var causeOnly: Bool?
    /** 0 -&gt; No filling, 1 -&gt; Use filling-value */
    public var fillingType: String?
    /** Number of measurements */
    public var numberOfMeasurements: Int32?
    /** Number of processed measurements */
    public var numberOfProcessedDailyMeasurements: Int32?
    /** Number of measurements at last analysis */
    public var measurementsAtLastAnalysis: Int32?
    /** ID of last Unit */
    public var lastUnitId: Int32?
    /** ID of last original Unit */
    public var lastOriginalUnitId: Int32?
    /** Last Value */
    public var lastValue: Float?
    /** Last original value which is stored */
    public var lastOriginalValue: Int32?
    /** Number of correlations for this variable */
    public var numberOfCorrelations: Int32?
    /** status */
    public var status: String?
    /** error_message */
    public var errorMessage: String?
    /** When this variable or its settings were last updated */
    public var lastSuccessfulUpdateTime: NSDate?
    /** Standard deviation */
    public var standardDeviation: Float?
    /** Variance */
    public var variance: Float?
    /** Minimum recorded value of this variable */
    public var minimumRecordedValue: Float?
    /** Maximum recorded daily value of this variable */
    public var maximumRecordedDailyValue: Float?
    /** Mean */
    public var mean: Float?
    /** Median */
    public var median: Float?
    /** Most common Unit ID */
    public var mostCommonUnitId: Int32?
    /** Most common value */
    public var mostCommonValue: Float?
    /** Number of unique daily values */
    public var numberOfUniqueDailyValues: Float?
    /** Number of changes */
    public var numberOfChanges: Int32?
    /** Skewness */
    public var skewness: Float?
    /** Kurtosis */
    public var kurtosis: Float?
    /** Latitude */
    public var latitude: Float?
    /** Longitude */
    public var longitude: Float?
    /** Location */
    public var location: String?
    /** Earliest measurement start_time to be used in analysis. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format */
    public var experimentStartTime: NSDate?
    /** Latest measurement start_time to be used in analysis. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format */
    public var experimentEndTime: NSDate?
    /** When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format */
    public var createdAt: NSDate?
    /** When the record in the database was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format */
    public var updatedAt: NSDate?
    /** Outcome variables (those with &#x60;outcome&#x60; &#x3D;&#x3D; 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables */
    public var outcome: Bool?
    /** Comma-separated list of source names to limit variables to those sources */
    public var sources: String?
    /** Earliest source time */
    public var earliestSourceTime: Int32?
    /** Latest source time */
    public var latestSourceTime: Int32?
    /** Earliest measurement time */
    public var earliestMeasurementTime: Int32?
    /** Latest measurement time */
    public var latestMeasurementTime: Int32?
    /** Earliest filling time */
    public var earliestFillingTime: Int32?
    /** Latest filling time */
    public var latestFillingTime: Int32?
    /**  */
    public var imageUrl: String?
    /**  */
    public var ionIcon: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["parentId"] = self.parentId?.encodeToJSON()
        nillableDictionary["userId"] = self.userId?.encodeToJSON()
        nillableDictionary["clientId"] = self.clientId
        nillableDictionary["variableId"] = self.variableId?.encodeToJSON()
        nillableDictionary["defaultUnitId"] = self.defaultUnitId?.encodeToJSON()
        nillableDictionary["minimumAllowedValue"] = self.minimumAllowedValue
        nillableDictionary["maximumAllowedValue"] = self.maximumAllowedValue
        nillableDictionary["fillingValue"] = self.fillingValue
        nillableDictionary["joinWith"] = self.joinWith?.encodeToJSON()
        nillableDictionary["onsetDelay"] = self.onsetDelay?.encodeToJSON()
        nillableDictionary["durationOfAction"] = self.durationOfAction?.encodeToJSON()
        nillableDictionary["variableCategoryId"] = self.variableCategoryId?.encodeToJSON()
        nillableDictionary["updated"] = self.updated?.encodeToJSON()
        nillableDictionary["public"] = self._public?.encodeToJSON()
        nillableDictionary["causeOnly"] = self.causeOnly
        nillableDictionary["fillingType"] = self.fillingType
        nillableDictionary["numberOfMeasurements"] = self.numberOfMeasurements?.encodeToJSON()
        nillableDictionary["numberOfProcessedDailyMeasurements"] = self.numberOfProcessedDailyMeasurements?.encodeToJSON()
        nillableDictionary["measurementsAtLastAnalysis"] = self.measurementsAtLastAnalysis?.encodeToJSON()
        nillableDictionary["lastUnitId"] = self.lastUnitId?.encodeToJSON()
        nillableDictionary["lastOriginalUnitId"] = self.lastOriginalUnitId?.encodeToJSON()
        nillableDictionary["lastValue"] = self.lastValue
        nillableDictionary["lastOriginalValue"] = self.lastOriginalValue?.encodeToJSON()
        nillableDictionary["numberOfCorrelations"] = self.numberOfCorrelations?.encodeToJSON()
        nillableDictionary["status"] = self.status
        nillableDictionary["errorMessage"] = self.errorMessage
        nillableDictionary["lastSuccessfulUpdateTime"] = self.lastSuccessfulUpdateTime?.encodeToJSON()
        nillableDictionary["standard_deviation"] = self.standardDeviation
        nillableDictionary["variance"] = self.variance
        nillableDictionary["minimumRecordedValue"] = self.minimumRecordedValue
        nillableDictionary["maximumRecordedDailyValue"] = self.maximumRecordedDailyValue
        nillableDictionary["mean"] = self.mean
        nillableDictionary["median"] = self.median
        nillableDictionary["mostCommonUnitId"] = self.mostCommonUnitId?.encodeToJSON()
        nillableDictionary["mostCommonValue"] = self.mostCommonValue
        nillableDictionary["numberOfUniqueDailyValues"] = self.numberOfUniqueDailyValues
        nillableDictionary["numberOfChanges"] = self.numberOfChanges?.encodeToJSON()
        nillableDictionary["skewness"] = self.skewness
        nillableDictionary["kurtosis"] = self.kurtosis
        nillableDictionary["latitude"] = self.latitude
        nillableDictionary["longitude"] = self.longitude
        nillableDictionary["location"] = self.location
        nillableDictionary["experimentStartTime"] = self.experimentStartTime?.encodeToJSON()
        nillableDictionary["experimentEndTime"] = self.experimentEndTime?.encodeToJSON()
        nillableDictionary["createdAt"] = self.createdAt?.encodeToJSON()
        nillableDictionary["updatedAt"] = self.updatedAt?.encodeToJSON()
        nillableDictionary["outcome"] = self.outcome
        nillableDictionary["sources"] = self.sources
        nillableDictionary["earliestSourceTime"] = self.earliestSourceTime?.encodeToJSON()
        nillableDictionary["latestSourceTime"] = self.latestSourceTime?.encodeToJSON()
        nillableDictionary["earliestMeasurementTime"] = self.earliestMeasurementTime?.encodeToJSON()
        nillableDictionary["latestMeasurementTime"] = self.latestMeasurementTime?.encodeToJSON()
        nillableDictionary["earliestFillingTime"] = self.earliestFillingTime?.encodeToJSON()
        nillableDictionary["latestFillingTime"] = self.latestFillingTime?.encodeToJSON()
        nillableDictionary["imageUrl"] = self.imageUrl
        nillableDictionary["ionIcon"] = self.ionIcon
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
