//
// Measurement.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class Measurement: JSONEncodable {
    /** Name of the variable for which we are creating the measurement records */
    public var variableName: String?
    /** Application or device used to record the measurement values */
    public var sourceName: String?
    /** Start Time for the measurement event in UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; */
    public var startTimeString: String?
    /** Seconds between the start of the event measured and 1970 (Unix timestamp) */
    public var startTimeEpoch: Int32?
    public var humanTime: HumanTime?
    /** Converted measurement value in requested unit */
    public var value: Double?
    /** Original value as originally submitted */
    public var originalValue: Int32?
    /** Original Unit of measurement as originally submitted */
    public var originalunitAbbreviatedName: String?
    /** Abbreviated name for the unit of measurement */
    public var unitAbbreviatedName: String?
    /** Note of measurement */
    public var note: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["variableName"] = self.variableName
        nillableDictionary["sourceName"] = self.sourceName
        nillableDictionary["startTimeString"] = self.startTimeString
        nillableDictionary["startTimeEpoch"] = self.startTimeEpoch?.encodeToJSON()
        nillableDictionary["humanTime"] = self.humanTime?.encodeToJSON()
        nillableDictionary["value"] = self.value
        nillableDictionary["originalValue"] = self.originalValue?.encodeToJSON()
        nillableDictionary["originalunitAbbreviatedName"] = self.originalunitAbbreviatedName
        nillableDictionary["unitAbbreviatedName"] = self.unitAbbreviatedName
        nillableDictionary["note"] = self.note
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
