//
// MeasurementSet.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class MeasurementSet: JSONEncodable {
    public enum CombinationOperation: String { 
        case Mean = "MEAN"
        case Sum = "SUM"
    }
    /** Way to aggregate measurements over time. Options are \&quot;MEAN\&quot; or \&quot;SUM\&quot;. SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED. */
    public var combinationOperation: CombinationOperation?
    /** Array of timestamps, values, and optional notes */
    public var measurementItems: [MeasurementItem]?
    /** Name of the application or device used to record the measurement values */
    public var sourceName: String?
    /** Unit of measurement */
    public var unitAbbreviatedName: String?
    /** Variable category name */
    public var variableCategoryName: String?
    /** ORIGINAL name of the variable for which we are creating the measurement records */
    public var variableName: String?
    /** UPC or other barcode scan result */
    public var upc: String?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["combinationOperation"] = self.combinationOperation?.rawValue
        nillableDictionary["measurementItems"] = self.measurementItems?.encodeToJSON()
        nillableDictionary["sourceName"] = self.sourceName
        nillableDictionary["unitAbbreviatedName"] = self.unitAbbreviatedName
        nillableDictionary["variableCategoryName"] = self.variableCategoryName
        nillableDictionary["variableName"] = self.variableName
        nillableDictionary["upc"] = self.upc
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
