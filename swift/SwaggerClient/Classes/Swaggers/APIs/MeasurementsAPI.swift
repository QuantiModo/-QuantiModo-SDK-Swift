//
// MeasurementsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MeasurementsAPI: APIBase {
    /**
     Get measurement sources
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementSourcesGet(completion: ((data: MeasurementSource?, error: ErrorType?) -> Void)) {
        v1MeasurementSourcesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get measurement sources
     - GET /v1/measurementSources
     - Returns a list of all the apps from which measurement data is obtained.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "name" : "aeiou"
}}]

     - returns: RequestBuilder<MeasurementSource> 
     */
    public class func v1MeasurementSourcesGetWithRequestBuilder() -> RequestBuilder<MeasurementSource> {
        let path = "/v1/measurementSources"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MeasurementSource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a data source
     
     - parameter body: (body) An array of names of data sources you want to add. 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementSourcesPost(body body: MeasurementSource, accessToken: String? = nil, userId: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        v1MeasurementSourcesPostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a data source
     - POST /v1/measurementSources
     - Add a life-tracking app or device to the QuantiModo list of data sources.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter body: (body) An array of names of data sources you want to add. 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func v1MeasurementSourcesPostWithRequestBuilder(body body: MeasurementSource, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<Void> {
        let path = "/v1/measurementSources"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get daily measurements for this user
     
     - parameter variableName: (query) Name of the variable you want measurements for 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter unitAbbreviatedName: (query) The unit your want the measurements in (optional)
     - parameter startTime: (query) The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format) (optional)
     - parameter endTime: (query) The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format) (optional)
     - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
     - parameter offset: (query) Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsDailyGet(variableName variableName: String, accessToken: String? = nil, userId: Int32? = nil, unitAbbreviatedName: String? = nil, startTime: String? = nil, endTime: String? = nil, groupingWidth: Int32? = nil, groupingTimezone: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: Int32? = nil, completion: ((data: Measurement?, error: ErrorType?) -> Void)) {
        v1MeasurementsDailyGetWithRequestBuilder(variableName: variableName, accessToken: accessToken, userId: userId, unitAbbreviatedName: unitAbbreviatedName, startTime: startTime, endTime: endTime, groupingWidth: groupingWidth, groupingTimezone: groupingTimezone, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get daily measurements for this user
     - GET /v1/measurements/daily
     - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:<ul><li><b>value</b> - Value of measurement</li><li><b>updatedAt</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul>
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "note" : "aeiou",
  "variableName" : "aeiou",
  "humanTime" : {
    "date" : "aeiou",
    "timezone" : "aeiou",
    "timezone_type" : ""
  },
  "originalValue" : "",
  "startTimeEpoch" : "",
  "originalunitAbbreviatedName" : "aeiou",
  "sourceName" : "aeiou",
  "startTimeString" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "unitAbbreviatedName" : "aeiou"
}}]
     
     - parameter variableName: (query) Name of the variable you want measurements for 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter unitAbbreviatedName: (query) The unit your want the measurements in (optional)
     - parameter startTime: (query) The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format) (optional)
     - parameter endTime: (query) The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format) (optional)
     - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
     - parameter offset: (query) Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order. (optional)

     - returns: RequestBuilder<Measurement> 
     */
    public class func v1MeasurementsDailyGetWithRequestBuilder(variableName variableName: String, accessToken: String? = nil, userId: Int32? = nil, unitAbbreviatedName: String? = nil, startTime: String? = nil, endTime: String? = nil, groupingWidth: Int32? = nil, groupingTimezone: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: Int32? = nil) -> RequestBuilder<Measurement> {
        let path = "/v1/measurements/daily"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON(),
            "variableName": variableName,
            "unitAbbreviatedName": unitAbbreviatedName,
            "startTime": startTime,
            "endTime": endTime,
            "groupingWidth": groupingWidth?.encodeToJSON(),
            "groupingTimezone": groupingTimezone,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Measurement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete a measurement
     
     - parameter body: (body) The startTime and variableId of the measurement to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsDeletePost(body body: MeasurementDelete, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1MeasurementsDeletePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete a measurement
     - POST /v1/measurements/delete
     - Delete a previously submitted measurement
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) The startTime and variableId of the measurement to be deleted. 

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1MeasurementsDeletePostWithRequestBuilder(body body: MeasurementDelete) -> RequestBuilder<CommonResponse> {
        let path = "/v1/measurements/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get measurements for this user
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter id: (query) Measurement id (optional)
     - parameter variableName: (query) Name of the variable you want measurements for (optional)
     - parameter variableCategoryName: (query) Name of the variable category you want measurements for (optional)
     - parameter sourceName: (query) ID of the source you want measurements for (supports exact name match only) (optional)
     - parameter value: (query) Value of measurement (optional)
     - parameter unitAbbreviatedName: (query) The unit you want the measurements returned in (optional)
     - parameter earliestMeasurementTime: (query) The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime) (optional)
     - parameter latestMeasurementTime: (query) The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime) (optional)
     - parameter createdAt: (query) The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local. (optional)
     - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
     - parameter offset: (query) Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsGet(accessToken accessToken: String? = nil, userId: Int32? = nil, id: Int32? = nil, variableName: String? = nil, variableCategoryName: String? = nil, sourceName: String? = nil, value: String? = nil, unitAbbreviatedName: String? = nil, earliestMeasurementTime: String? = nil, latestMeasurementTime: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, groupingWidth: Int32? = nil, groupingTimezone: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: Int32? = nil, completion: ((data: Measurement?, error: ErrorType?) -> Void)) {
        v1MeasurementsGetWithRequestBuilder(accessToken: accessToken, userId: userId, id: id, variableName: variableName, variableCategoryName: variableCategoryName, sourceName: sourceName, value: value, unitAbbreviatedName: unitAbbreviatedName, earliestMeasurementTime: earliestMeasurementTime, latestMeasurementTime: latestMeasurementTime, createdAt: createdAt, updatedAt: updatedAt, groupingWidth: groupingWidth, groupingTimezone: groupingTimezone, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get measurements for this user
     - GET /v1/measurements
     - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:<ul><li><b>value</b> - Value of measurement</li><li><b>updatedAt</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul>
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "note" : "aeiou",
  "variableName" : "aeiou",
  "humanTime" : {
    "date" : "aeiou",
    "timezone" : "aeiou",
    "timezone_type" : ""
  },
  "originalValue" : "",
  "startTimeEpoch" : "",
  "originalunitAbbreviatedName" : "aeiou",
  "sourceName" : "aeiou",
  "startTimeString" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "unitAbbreviatedName" : "aeiou"
}}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter id: (query) Measurement id (optional)
     - parameter variableName: (query) Name of the variable you want measurements for (optional)
     - parameter variableCategoryName: (query) Name of the variable category you want measurements for (optional)
     - parameter sourceName: (query) ID of the source you want measurements for (supports exact name match only) (optional)
     - parameter value: (query) Value of measurement (optional)
     - parameter unitAbbreviatedName: (query) The unit you want the measurements returned in (optional)
     - parameter earliestMeasurementTime: (query) The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime) (optional)
     - parameter latestMeasurementTime: (query) The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime) (optional)
     - parameter createdAt: (query) The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local. (optional)
     - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
     - parameter offset: (query) Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order. (optional)

     - returns: RequestBuilder<Measurement> 
     */
    public class func v1MeasurementsGetWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil, id: Int32? = nil, variableName: String? = nil, variableCategoryName: String? = nil, sourceName: String? = nil, value: String? = nil, unitAbbreviatedName: String? = nil, earliestMeasurementTime: String? = nil, latestMeasurementTime: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, groupingWidth: Int32? = nil, groupingTimezone: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: Int32? = nil) -> RequestBuilder<Measurement> {
        let path = "/v1/measurements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "variableName": variableName,
            "variableCategoryName": variableCategoryName,
            "sourceName": sourceName,
            "value": value,
            "unitAbbreviatedName": unitAbbreviatedName,
            "earliestMeasurementTime": earliestMeasurementTime,
            "latestMeasurementTime": latestMeasurementTime,
            "createdAt": createdAt,
            "updatedAt": updatedAt,
            "groupingWidth": groupingWidth?.encodeToJSON(),
            "groupingTimezone": groupingTimezone,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Measurement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post a new set or update existing measurements to the database
     
     - parameter body: (body) An array of measurements you want to insert. 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsPost(body body: MeasurementSet, accessToken: String? = nil, userId: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        v1MeasurementsPostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Post a new set or update existing measurements to the database
     - POST /v1/measurements
     - You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\"measurements\":[{\"startTime\":1439389320,\"value\":\"3\"}, {\"startTime\":1439389319,\"value\":\"2\"}],\"name\":\"Acne (out of 5)\",\"source\":\"QuantiModo\",\"category\":\"Symptoms\",\"combinationOperation\":\"MEAN\",\"unit\":\"/5\"}]
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter body: (body) An array of measurements you want to insert. 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func v1MeasurementsPostWithRequestBuilder(body body: MeasurementSet, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<Void> {
        let path = "/v1/measurements"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get measurements range for this user
     
     - parameter sources: (query) Enter source name to limit to specific source (varchar) (optional)
     - parameter user: (query) If not specified, uses currently logged in user (bigint) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsRangeGet(sources sources: String? = nil, user: Int32? = nil, completion: ((data: MeasurementRange?, error: ErrorType?) -> Void)) {
        v1MeasurementsRangeGetWithRequestBuilder(sources: sources, user: user).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get measurements range for this user
     - GET /v1/measurementsRange
     - Get Unix time-stamp (epoch time) of the user's first and last measurements taken.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "upperLimit" : "",
  "lowerLimit" : ""
}}]
     
     - parameter sources: (query) Enter source name to limit to specific source (varchar) (optional)
     - parameter user: (query) If not specified, uses currently logged in user (bigint) (optional)

     - returns: RequestBuilder<MeasurementRange> 
     */
    public class func v1MeasurementsRangeGetWithRequestBuilder(sources sources: String? = nil, user: Int32? = nil) -> RequestBuilder<MeasurementRange> {
        let path = "/v1/measurementsRange"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sources": sources,
            "user": user?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MeasurementRange>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update a measurement
     
     - parameter body: (body) The id as well as the new startTime, note, and/or value of the measurement to be updated 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1MeasurementsUpdatePost(body body: MeasurementUpdate, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1MeasurementsUpdatePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a measurement
     - POST /v1/measurements/update
     - Delete a previously submitted measurement
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) The id as well as the new startTime, note, and/or value of the measurement to be updated 

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1MeasurementsUpdatePostWithRequestBuilder(body body: MeasurementUpdate) -> RequestBuilder<CommonResponse> {
        let path = "/v1/measurements/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Measurements CSV
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2MeasurementsCsvGet(accessToken accessToken: String? = nil, userId: Int32? = nil, completion: ((data: NSURL?, error: ErrorType?) -> Void)) {
        v2MeasurementsCsvGetWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Measurements CSV
     - GET /v2/measurements/csv
     - Download a CSV containing all user measurements
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{output=none}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<NSURL> 
     */
    public class func v2MeasurementsCsvGetWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<NSURL> {
        let path = "/v2/measurements/csv"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<NSURL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post Request for Measurements CSV
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2MeasurementsRequestCsvPost(accessToken accessToken: String? = nil, userId: Int32? = nil, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        v2MeasurementsRequestCsvPostWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Post Request for Measurements CSV
     - POST /v2/measurements/request_csv
     - Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Int32> 
     */
    public class func v2MeasurementsRequestCsvPostWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<Int32> {
        let path = "/v2/measurements/request_csv"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post Request for Measurements PDF
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2MeasurementsRequestPdfPost(accessToken accessToken: String? = nil, userId: Int32? = nil, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        v2MeasurementsRequestPdfPostWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Post Request for Measurements PDF
     - POST /v2/measurements/request_pdf
     - Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Int32> 
     */
    public class func v2MeasurementsRequestPdfPostWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<Int32> {
        let path = "/v2/measurements/request_pdf"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post Request for Measurements XLS
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2MeasurementsRequestXlsPost(accessToken accessToken: String? = nil, userId: Int32? = nil, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        v2MeasurementsRequestXlsPostWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Post Request for Measurements XLS
     - POST /v2/measurements/request_xls
     - Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Int32> 
     */
    public class func v2MeasurementsRequestXlsPostWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<Int32> {
        let path = "/v2/measurements/request_xls"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
