//
// RemindersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class RemindersAPI: APIBase {
    /**
     Get specific pending tracking reminders
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit tracking reminder notifications to a specific variable category (optional)
     - parameter createdAt: (query) When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingReminderNotificationsGet(accessToken accessToken: String? = nil, userId: Int32? = nil, variableCategoryName: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2002?, error: ErrorType?) -> Void)) {
        v1TrackingReminderNotificationsGetWithRequestBuilder(accessToken: accessToken, userId: userId, variableCategoryName: variableCategoryName, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get specific pending tracking reminders
     - GET /v1/trackingReminderNotifications
     - Specfic pending reminder instances that still need to be tracked.  
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "clientId" : "aeiou",
    "variableName" : "aeiou",
    "variableCategoryName" : "aeiou",
    "trackingReminderId" : 123,
    "defaultValue" : 1.3579000000000001069366817318950779736042022705078125,
    "notificationBar" : true,
    "userId" : 123,
    "variableId" : 123,
    "pendingReminderTime" : "2000-01-23T04:56:07.000+00:00",
    "reminderSound" : "aeiou",
    "popUp" : true,
    "sms" : true,
    "combinationOperation" : "aeiou",
    "id" : 123,
    "email" : true,
    "unitAbbreviatedName" : "aeiou",
    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true
}}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit tracking reminder notifications to a specific variable category (optional)
     - parameter createdAt: (query) When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    public class func v1TrackingReminderNotificationsGetWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil, variableCategoryName: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/v1/trackingReminderNotifications"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON(),
            "variableCategoryName": variableCategoryName,
            "createdAt": createdAt,
            "updatedAt": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Skip a pending tracking reminder
     
     - parameter body: (body) Id of the pending reminder to be skipped or deleted 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingReminderNotificationsSkipPost(body body: TrackingReminderNotificationSkip, accessToken: String? = nil, userId: Int32? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1TrackingReminderNotificationsSkipPostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Skip a pending tracking reminder
     - POST /v1/trackingReminderNotifications/skip
     - Deletes the pending tracking reminder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) Id of the pending reminder to be skipped or deleted 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1TrackingReminderNotificationsSkipPostWithRequestBuilder(body body: TrackingReminderNotificationSkip, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v1/trackingReminderNotifications/skip"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Snooze a pending tracking reminder
     
     - parameter body: (body) Id of the pending reminder to be snoozed 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingReminderNotificationsSnoozePost(body body: TrackingReminderNotificationSnooze, accessToken: String? = nil, userId: Int32? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1TrackingReminderNotificationsSnoozePostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Snooze a pending tracking reminder
     - POST /v1/trackingReminderNotifications/snooze
     - Changes the reminder time to now plus one hour
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) Id of the pending reminder to be snoozed 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1TrackingReminderNotificationsSnoozePostWithRequestBuilder(body body: TrackingReminderNotificationSnooze, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v1/trackingReminderNotifications/snooze"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Track a pending tracking reminder
     
     - parameter body: (body) Id of the pending reminder to be tracked 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingReminderNotificationsTrackPost(body body: TrackingReminderNotificationTrack, accessToken: String? = nil, userId: Int32? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1TrackingReminderNotificationsTrackPostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Track a pending tracking reminder
     - POST /v1/trackingReminderNotifications/track
     - Adds the default measurement for the pending tracking reminder with the reminder time as the measurment start time
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) Id of the pending reminder to be tracked 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1TrackingReminderNotificationsTrackPostWithRequestBuilder(body body: TrackingReminderNotificationTrack, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v1/trackingReminderNotifications/track"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete tracking reminder
     
     - parameter body: (body) Id of reminder to be deleted 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingRemindersDeletePost(body body: TrackingReminderDelete, accessToken: String? = nil, userId: Int32? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1TrackingRemindersDeletePostWithRequestBuilder(body: body, accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete tracking reminder
     - POST /v1/trackingReminders/delete
     - Delete previously created tracking reminder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou",
  "status" : ""
}}]
     
     - parameter body: (body) Id of reminder to be deleted 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1TrackingRemindersDeletePostWithRequestBuilder(body body: TrackingReminderDelete, accessToken: String? = nil, userId: Int32? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v1/trackingReminders/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get repeating tracking reminder settings
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit tracking reminders to a specific variable category (optional)
     - parameter createdAt: (query) When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingRemindersGet(accessToken accessToken: String? = nil, userId: Int32? = nil, variableCategoryName: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        v1TrackingRemindersGetWithRequestBuilder(accessToken: accessToken, userId: userId, variableCategoryName: variableCategoryName, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get repeating tracking reminder settings
     - GET /v1/trackingReminders
     - Users can be reminded to track certain variables at a specified frequency with a default value.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "reminderStartTime" : "aeiou",
    "startTrackingDate" : "aeiou",
    "clientId" : "aeiou",
    "variableName" : "aeiou",
    "variableCategoryName" : "aeiou",
    "defaultValue" : 1.3579000000000001069366817318950779736042022705078125,
    "notificationBar" : true,
    "userId" : 123,
    "variableId" : 123,
    "latestTrackingReminderNotificationReminderTime" : "2000-01-23T04:56:07.000+00:00",
    "stopTrackingDate" : "aeiou",
    "reminderFrequency" : 123,
    "reminderSound" : "aeiou",
    "popUp" : true,
    "reminderEndTime" : "aeiou",
    "sms" : true,
    "combinationOperation" : "aeiou",
    "lastTracked" : "2000-01-23T04:56:07.000+00:00",
    "id" : 123,
    "email" : true,
    "unitAbbreviatedName" : "aeiou",
    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
  } ],
  "success" : true
}}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit tracking reminders to a specific variable category (optional)
     - parameter createdAt: (query) When the record was first created. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot;  datetime format. Time zone should be UTC and not local. (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func v1TrackingRemindersGetWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil, variableCategoryName: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/v1/trackingReminders"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "userId": userId?.encodeToJSON(),
            "variableCategoryName": variableCategoryName,
            "createdAt": createdAt,
            "updatedAt": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Store a Tracking Reminder
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter body: (body) TrackingReminder that should be stored (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1TrackingRemindersPost(accessToken accessToken: String? = nil, userId: Int32? = nil, body: TrackingReminder? = nil, completion: ((data: InlineResponse2001?, error: ErrorType?) -> Void)) {
        v1TrackingRemindersPostWithRequestBuilder(accessToken: accessToken, userId: userId, body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Store a Tracking Reminder
     - POST /v1/trackingReminders
     - This is to enable users to create reminders to track a variable with a default value at a specified frequency
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "data" : {
    "reminderStartTime" : "aeiou",
    "startTrackingDate" : "aeiou",
    "clientId" : "aeiou",
    "variableName" : "aeiou",
    "variableCategoryName" : "aeiou",
    "defaultValue" : 1.3579000000000001069366817318950779736042022705078125,
    "notificationBar" : true,
    "userId" : 123,
    "variableId" : 123,
    "latestTrackingReminderNotificationReminderTime" : "2000-01-23T04:56:07.000+00:00",
    "stopTrackingDate" : "aeiou",
    "reminderFrequency" : 123,
    "reminderSound" : "aeiou",
    "popUp" : true,
    "reminderEndTime" : "aeiou",
    "sms" : true,
    "combinationOperation" : "aeiou",
    "lastTracked" : "2000-01-23T04:56:07.000+00:00",
    "id" : 123,
    "email" : true,
    "unitAbbreviatedName" : "aeiou",
    "updatedAt" : "2000-01-23T04:56:07.000+00:00"
  },
  "success" : true
}}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter body: (body) TrackingReminder that should be stored (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    public class func v1TrackingRemindersPostWithRequestBuilder(accessToken accessToken: String? = nil, userId: Int32? = nil, body: TrackingReminder? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/v1/trackingReminders"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
