//
// VariablesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class VariablesAPI: APIBase {
    /**
     Delete user tag or ingredient
     
     - parameter taggedVariableId: (query) Id of the tagged variable (i.e. Lollipop) you would like to get variables it can be tagged with (i.e. Sugar).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter tagVariableId: (query) Id of the tag variable (i.e. Sugar) you would like to get variables it can be tagged to (i.e. Lollipop).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUserTag(taggedVariableId taggedVariableId: Int32? = nil, tagVariableId: Int32? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        deleteUserTagWithRequestBuilder(taggedVariableId: taggedVariableId, tagVariableId: tagVariableId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete user tag or ingredient
     - DELETE /v3/userTags/delete
     - Delete previously created user tags or ingredients.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "description" : "description"
}}]
     
     - parameter taggedVariableId: (query) Id of the tagged variable (i.e. Lollipop) you would like to get variables it can be tagged with (i.e. Sugar).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter tagVariableId: (query) Id of the tag variable (i.e. Sugar) you would like to get variables it can be tagged to (i.e. Lollipop).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func deleteUserTagWithRequestBuilder(taggedVariableId taggedVariableId: Int32? = nil, tagVariableId: Int32? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v3/userTags/delete"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "taggedVariableId": taggedVariableId?.encodeToJSON(),
            "tagVariableId": tagVariableId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete All Measurements For Variable
     
     - parameter variableId: (body) Id of the variable whose measurements should be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteUserVariable(variableId variableId: UserVariableDelete, completion: ((error: ErrorType?) -> Void)) {
        deleteUserVariableWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete All Measurements For Variable
     - DELETE /v3/userVariables/delete
     - Users can delete all of their measurements for a variable
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter variableId: (body) Id of the variable whose measurements should be deleted 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteUserVariableWithRequestBuilder(variableId variableId: UserVariableDelete) -> RequestBuilder<Void> {
        let path = "/v3/userVariables/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = variableId.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Variable categories
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVariableCategories(completion: ((data: [VariableCategory]?, error: ErrorType?) -> Void)) {
        getVariableCategoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Variable categories
     - GET /v3/variableCategories
     - The variable categories include Activity, Causes of Illness, Cognitive Performance, Conditions, Environment, Foods, Location, Miscellaneous, Mood, Nutrition, Physical Activity, Physique, Sleep, Social Interactions, Symptoms, Treatments, Vital Signs, and Work.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example=[ {
  "causeOnly" : true,
  "minimumAllowedValue" : "minimumAllowedValue",
  "variableCategoryName" : "variableCategoryName",
  "svgUrl" : "svgUrl",
  "moreInfo" : "moreInfo",
  "maximumAllowedValue" : "maximumAllowedValue",
  "public" : true,
  "appType" : "appType",
  "fillingValue" : 8,
  "imageUrl" : "imageUrl",
  "combinationOperation" : "combinationOperation",
  "createdTime" : "createdTime",
  "unitId" : 5,
  "pngUrl" : "pngUrl",
  "id" : 7,
  "variableCategoryNameSingular" : "variableCategoryNameSingular",
  "unitAbbreviatedName" : "unitAbbreviatedName",
  "outcome" : true,
  "updatedTime" : "updatedTime",
  "helpText" : "helpText",
  "durationOfAction" : 5,
  "ionIcon" : "ionIcon",
  "manualTracking" : true,
  "measurementSynonymSingularLowercase" : "measurementSynonymSingularLowercase",
  "pngPath" : "pngPath",
  "svgPath" : "svgPath",
  "name" : "name",
  "onsetDelay" : 3,
  "updated" : 3
}, {
  "causeOnly" : true,
  "minimumAllowedValue" : "minimumAllowedValue",
  "variableCategoryName" : "variableCategoryName",
  "svgUrl" : "svgUrl",
  "moreInfo" : "moreInfo",
  "maximumAllowedValue" : "maximumAllowedValue",
  "public" : true,
  "appType" : "appType",
  "fillingValue" : 8,
  "imageUrl" : "imageUrl",
  "combinationOperation" : "combinationOperation",
  "createdTime" : "createdTime",
  "unitId" : 5,
  "pngUrl" : "pngUrl",
  "id" : 7,
  "variableCategoryNameSingular" : "variableCategoryNameSingular",
  "unitAbbreviatedName" : "unitAbbreviatedName",
  "outcome" : true,
  "updatedTime" : "updatedTime",
  "helpText" : "helpText",
  "durationOfAction" : 5,
  "ionIcon" : "ionIcon",
  "manualTracking" : true,
  "measurementSynonymSingularLowercase" : "measurementSynonymSingularLowercase",
  "pngPath" : "pngPath",
  "svgPath" : "svgPath",
  "name" : "name",
  "onsetDelay" : 3,
  "updated" : 3
} ]}]

     - returns: RequestBuilder<[VariableCategory]> 
     */
    public class func getVariableCategoriesWithRequestBuilder() -> RequestBuilder<[VariableCategory]> {
        let path = "/v3/variableCategories"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[VariableCategory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter variableCategoryName
     */
    public enum VariableCategoryName_getVariables: String { 
        case Activity = "Activity"
        case Books = "Books"
        case CausesOfIllness = "Causes of Illness"
        case CognitivePerformance = "Cognitive Performance"
        case Conditions = "Conditions"
        case Emotions = "Emotions"
        case Environment = "Environment"
        case Foods = "Foods"
        case Location = "Location"
        case Miscellaneous = "Miscellaneous"
        case MoviesAndTv = "Movies and TV"
        case Music = "Music"
        case Nutrients = "Nutrients"
        case Payments = "Payments"
        case PhysicalActivity = "Physical Activity"
        case Physique = "Physique"
        case Sleep = "Sleep"
        case SocialInteractions = "Social Interactions"
        case Software = "Software"
        case Symptoms = "Symptoms"
        case Treatments = "Treatments"
        case VitalSigns = "Vital Signs"
        case Work = "Work"
    }

    /**
     * enum for parameter platform
     */
    public enum Platform_getVariables: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     Get variables along with related user-specific analysis settings and statistics
     
     - parameter includeCharts: (query) Highcharts configs that can be used if you have highcharts.js included on the page.  This only works if the id or name query parameter is also provided. (optional)
     - parameter numberOfRawMeasurements: (query) Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity. (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit results to a specific variable category (optional)
     - parameter name: (query) Name of the variable. To get results matching a substring, add % as a wildcard as the first and/or last character of a query string parameter. In order to get variables that contain &#x60;Mood&#x60;, the following query should be used: ?variableName&#x3D;%Mood% (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local. (optional)
     - parameter sourceName: (query) ID of the source you want measurements for (supports exact name match only) (optional)
     - parameter earliestMeasurementTime: (query) Excluded records with measurement times earlier than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. (optional)
     - parameter latestMeasurementTime: (query) Excluded records with measurement times later than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. (optional)
     - parameter id: (query) Common variable id (optional)
     - parameter lastSourceName: (query) Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional, default to 100)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order. (optional)
     - parameter includePublic: (query) Include variables the user has no measurements for (optional)
     - parameter manualTracking: (query) Only include variables tracked manually by the user (optional)
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter upc: (query) UPC or other barcode scan result (optional)
     - parameter effectOrCause: (query) Provided variable is the effect or cause (optional)
     - parameter publicEffectOrCause: (query) Ex:  (optional)
     - parameter exactMatch: (query) Require exact match (optional)
     - parameter variableCategoryId: (query) Ex: 13 (optional)
     - parameter includePrivate: (query) Include user-specific variables in results (optional)
     - parameter searchPhrase: (query) Ex: %Body Fat% (optional)
     - parameter synonyms: (query) Ex: %McDonalds hotcake% (optional)
     - parameter taggedVariableId: (query) Id of the tagged variable (i.e. Lollipop) you would like to get variables it can be tagged with (i.e. Sugar).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter tagVariableId: (query) Id of the tag variable (i.e. Sugar) you would like to get variables it can be tagged to (i.e. Lollipop).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter joinVariableId: (query) Id of the variable you would like to get variables that can be joined to.  This is used to merge duplicate variables.   If joinVariableId is specified, this returns only variables eligible to be joined to the variable specified by the joinVariableId. (optional)
     - parameter parentUserTagVariableId: (query) Id of the parent category variable (i.e. Fruit) you would like to get eligible child sub-type variables (i.e. Apple) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple.  When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. (optional)
     - parameter childUserTagVariableId: (query) Id of the child sub-type variable (i.e. Apple) you would like to get eligible parent variables (i.e. Fruit) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple. When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. (optional)
     - parameter ingredientUserTagVariableId: (query) Id of the ingredient variable (i.e. Fructose)  you would like to get eligible ingredientOf variables (i.e. Apple) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. (optional)
     - parameter ingredientOfUserTagVariableId: (query) Id of the ingredientOf variable (i.e. Apple) you would like to get eligible ingredient variables (i.e. Fructose) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. (optional)
     - parameter commonOnly: (query) Return only public and aggregated common variable data instead of user-specific variables (optional)
     - parameter userOnly: (query) Return only user-specific variables and data, excluding common aggregated variable data (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter includeTags: (query) Return parent, child, duplicate, and ingredient variables (optional)
     - parameter recalculate: (query) Recalculate instead of using cached analysis (optional)
     - parameter variableId: (query) Ex: 13 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVariables(includeCharts includeCharts: Bool? = nil, numberOfRawMeasurements: String? = nil, userId: Double? = nil, variableCategoryName: VariableCategoryName_getVariables? = nil, name: String? = nil, updatedAt: String? = nil, sourceName: String? = nil, earliestMeasurementTime: String? = nil, latestMeasurementTime: String? = nil, id: Int32? = nil, lastSourceName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, includePublic: Bool? = nil, manualTracking: Bool? = nil, clientId: String? = nil, upc: String? = nil, effectOrCause: String? = nil, publicEffectOrCause: String? = nil, exactMatch: Bool? = nil, variableCategoryId: Int32? = nil, includePrivate: Bool? = nil, searchPhrase: String? = nil, synonyms: String? = nil, taggedVariableId: Int32? = nil, tagVariableId: Int32? = nil, joinVariableId: Int32? = nil, parentUserTagVariableId: Int32? = nil, childUserTagVariableId: Int32? = nil, ingredientUserTagVariableId: Int32? = nil, ingredientOfUserTagVariableId: Int32? = nil, commonOnly: Bool? = nil, userOnly: Bool? = nil, platform: Platform_getVariables? = nil, includeTags: Bool? = nil, recalculate: Bool? = nil, variableId: Int32? = nil, completion: ((data: [Variable]?, error: ErrorType?) -> Void)) {
        getVariablesWithRequestBuilder(includeCharts: includeCharts, numberOfRawMeasurements: numberOfRawMeasurements, userId: userId, variableCategoryName: variableCategoryName, name: name, updatedAt: updatedAt, sourceName: sourceName, earliestMeasurementTime: earliestMeasurementTime, latestMeasurementTime: latestMeasurementTime, id: id, lastSourceName: lastSourceName, limit: limit, offset: offset, sort: sort, includePublic: includePublic, manualTracking: manualTracking, clientId: clientId, upc: upc, effectOrCause: effectOrCause, publicEffectOrCause: publicEffectOrCause, exactMatch: exactMatch, variableCategoryId: variableCategoryId, includePrivate: includePrivate, searchPhrase: searchPhrase, synonyms: synonyms, taggedVariableId: taggedVariableId, tagVariableId: tagVariableId, joinVariableId: joinVariableId, parentUserTagVariableId: parentUserTagVariableId, childUserTagVariableId: childUserTagVariableId, ingredientUserTagVariableId: ingredientUserTagVariableId, ingredientOfUserTagVariableId: ingredientOfUserTagVariableId, commonOnly: commonOnly, userOnly: userOnly, platform: platform, includeTags: includeTags, recalculate: recalculate, variableId: variableId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get variables along with related user-specific analysis settings and statistics
     - GET /v3/variables
     - Get variables. If the user has specified variable settings, these are provided instead of the common variable defaults.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example=[ {
  "lastValue" : 2.8841622,
  "experimentEndTimeString" : "experimentEndTimeString",
  "durationOfActionInHours" : 6,
  "latestMeasurementTime" : 6,
  "lastSource" : 9,
  "chartsLinkStatic" : "chartsLinkStatic",
  "lastOriginalValue" : 3,
  "numberOfCorrelations" : 6,
  "numberOfTrackingReminders" : 4,
  "variableCategory" : {
    "causeOnly" : true,
    "minimumAllowedValue" : "minimumAllowedValue",
    "variableCategoryName" : "variableCategoryName",
    "svgUrl" : "svgUrl",
    "moreInfo" : "moreInfo",
    "maximumAllowedValue" : "maximumAllowedValue",
    "public" : true,
    "appType" : "appType",
    "fillingValue" : 8,
    "imageUrl" : "imageUrl",
    "combinationOperation" : "combinationOperation",
    "createdTime" : "createdTime",
    "unitId" : 5,
    "pngUrl" : "pngUrl",
    "id" : 7,
    "variableCategoryNameSingular" : "variableCategoryNameSingular",
    "unitAbbreviatedName" : "unitAbbreviatedName",
    "outcome" : true,
    "updatedTime" : "updatedTime",
    "helpText" : "helpText",
    "durationOfAction" : 5,
    "ionIcon" : "ionIcon",
    "manualTracking" : true,
    "measurementSynonymSingularLowercase" : "measurementSynonymSingularLowercase",
    "pngPath" : "pngPath",
    "svgPath" : "svgPath",
    "name" : "name",
    "onsetDelay" : 3,
    "updated" : 3
  },
  "minimumRecordedValue" : 7.7403517,
  "ingredientOfUserTagVariables" : [ null, null ],
  "price" : 8.251625748923757,
  "combinationOperation" : "combinationOperation",
  "skewness" : 1.7325933,
  "id" : 6,
  "unitCategoryId" : 1,
  "userVariableFillingValue" : 9.183123594773994,
  "earliestSourceTime" : 4,
  "userVariableUnitName" : "userVariableUnitName",
  "updatedTime" : "updatedTime",
  "wikipediaTitle" : "wikipediaTitle",
  "availableUnits" : [ {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  }, {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  } ],
  "latestUserMeasurementTime" : 6,
  "chartsLinkFacebook" : "chartsLinkFacebook",
  "userVariableVariableCategoryId" : 0,
  "childCommonTagVariables" : [ null, null ],
  "childUserTagVariables" : [ null, null ],
  "upc" : "upc",
  "parentCommonTagVariables" : [ null, null ],
  "numberOfUserVariables" : 0,
  "userTaggedVariables" : [ null, null ],
  "variableId" : 0,
  "lastSuccessfulUpdateTime" : "lastSuccessfulUpdateTime",
  "unitCategoryName" : "unitCategoryName",
  "maximumRecordedDailyValue" : 0.8851375,
  "subtitle" : "subtitle",
  "lastUnit" : "lastUnit",
  "userVariableVariableCategoryName" : "userVariableVariableCategoryName",
  "onsetDelay" : 7,
  "chartsLinkDynamic" : "chartsLinkDynamic",
  "status" : "status",
  "causeOnly" : true,
  "numberOfAggregateCorrelationsAsEffect" : 4,
  "numberOfProcessedDailyMeasurements" : 4,
  "displayName" : "displayName",
  "latitude" : 3.3531933,
  "fillingType" : "fillingType",
  "joinedCommonTagVariables" : [ null, null ],
  "kurtosis" : 9.018348,
  "numberOfUserCorrelationsAsCause" : 0,
  "earliestMeasurementTime" : 1,
  "variableFillingValue" : 7.835035282970782,
  "variableCategoryId" : 5,
  "measurementsAtLastAnalysis" : 0,
  "fillingValue" : 9.36931,
  "latestFillingTime" : 6,
  "unitId" : 1,
  "lastUnitId" : 1,
  "experimentStartTimeSeconds" : 9,
  "experimentEndTimeSeconds" : 5,
  "unitAbbreviatedName" : "unitAbbreviatedName",
  "outcome" : true,
  "numberOfUniqueValues" : 9,
  "clientId" : "clientId",
  "ingredientUserTagVariables" : [ null, null ],
  "joinWith" : 8,
  "errorMessage" : "errorMessage",
  "userVariableMostCommonConnectorId" : 8,
  "commonVariableMostCommonConnectorId" : 7,
  "numberOfAggregateCorrelationsAsCause" : 3,
  "iconIcon" : "iconIcon",
  "userId" : 9,
  "chartsLinkEmail" : "chartsLinkEmail",
  "mostCommonOriginalUnitId" : 3,
  "userTagVariables" : [ null, null ],
  "secondToLastValue" : 2.9409642974827896,
  "chartsLinkGoogle" : "chartsLinkGoogle",
  "ingredientCommonTagVariables" : [ null, null ],
  "parentUserTagVariables" : [ null, null ],
  "userVariableUnitId" : 3,
  "variableCategoryImageUrl" : "variableCategoryImageUrl",
  "numberOfUniqueDailyValues" : 7.2605214,
  "productUrl" : "productUrl",
  "actionArray" : [ {
    "modifiedValue" : 0,
    "action" : "action",
    "callback" : "callback",
    "shortTitle" : "shortTitle",
    "title" : "title",
    "longTitle" : "longTitle"
  }, {
    "modifiedValue" : 0,
    "action" : "action",
    "callback" : "callback",
    "shortTitle" : "shortTitle",
    "title" : "title",
    "longTitle" : "longTitle"
  } ],
  "charts" : {
    "hourlyColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "lineChartWithSmoothing" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "monthlyColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "distributionColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "lineChartWithoutSmoothing" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "weekdayColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    }
  },
  "mostCommonUnitId" : 7,
  "svgUrl" : "svgUrl",
  "userVariableUpdatedAt" : "userVariableUpdatedAt",
  "experimentStartTimeString" : "experimentStartTimeString",
  "createdAt" : "createdAt",
  "informationalUrl" : "informationalUrl",
  "inputType" : "inputType",
  "earliestFillingTime" : 7,
  "commonTagVariables" : [ null, null ],
  "longitude" : 3.0937452,
  "updatedAt" : "updatedAt",
  "commonVariableUpdatedAt" : "commonVariableUpdatedAt",
  "unitName" : "unitName",
  "onsetDelayInHours" : 5.507386964179881,
  "durationOfAction" : 1,
  "numberOfUserCorrelationsAsEffect" : 9,
  "joinedVariables" : [ null, null ],
  "ionIcon" : "ionIcon",
  "valence" : "valence",
  "manualTracking" : true,
  "shareUserMeasurements" : true,
  "chartsLinkTwitter" : "chartsLinkTwitter",
  "ingredientOfCommonTagVariables" : [ null, null ],
  "pngPath" : "pngPath",
  "latestSourceTime" : 5,
  "rawMeasurementsAtLastAnalysis" : 3,
  "unit" : {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  },
  "median" : 4.652396,
  "name" : "name",
  "updated" : 8,
  "dataSource" : {
    "longDescription" : "longDescription",
    "image" : "image",
    "linkedDisplayNameHtml" : "linkedDisplayNameHtml",
    "imageHtml" : "imageHtml",
    "displayName" : "displayName",
    "connectorClientId" : "connectorClientId",
    "shortDescription" : "shortDescription",
    "enabled" : 2,
    "defaultVariableCategoryName" : "defaultVariableCategoryName",
    "getItUrl" : "getItUrl",
    "name" : "name",
    "id" : 4,
    "affiliate" : true
  },
  "commonAlias" : "commonAlias",
  "joinedUserTagVariables" : [ null, null ],
  "experimentEndTime" : "experimentEndTime",
  "minimumAllowedValue" : 8.969579,
  "sources" : "sources",
  "variableCategoryName" : "variableCategoryName",
  "mostCommonConnectorId" : 3,
  "description" : "description",
  "experimentStartTime" : "experimentStartTime",
  "userVariableValence" : "userVariableValence",
  "maximumAllowedValue" : 7.143538,
  "public" : 4,
  "userVariableWikipediaTitle" : "userVariableWikipediaTitle",
  "imageUrl" : "imageUrl",
  "alias" : "alias",
  "mostCommonValue" : 5.5332584,
  "pngUrl" : "pngUrl",
  "userVariableUnitCategoryId" : 1,
  "numberOfChanges" : 0,
  "maximumRecordedValue" : 7.058770351582356,
  "userVariableUnitAbbreviatedName" : "userVariableUnitAbbreviatedName",
  "variableName" : "variableName",
  "lastProcessedDailyValue" : 6.965117697638846,
  "thirdToLastValue" : 4.573936264232251,
  "outcomeOfInterest" : 4,
  "mostCommonUnit" : "mostCommonUnit",
  "lastOriginalUnitId" : 6,
  "thirdMostCommonValue" : 6.623518433804886,
  "userVariableUnitCategoryName" : "userVariableUnitCategoryName",
  "predictorOfInterest" : 6,
  "variance" : 3.1497903714250555,
  "mean" : 6.519181,
  "numberOfRawMeasurements" : 1,
  "secondMostCommonValue" : 0.43431398824148815,
  "location" : "location",
  "commonTaggedVariables" : [ null, null ],
  "standardDeviation" : 8.28965939814297
}, {
  "lastValue" : 2.8841622,
  "experimentEndTimeString" : "experimentEndTimeString",
  "durationOfActionInHours" : 6,
  "latestMeasurementTime" : 6,
  "lastSource" : 9,
  "chartsLinkStatic" : "chartsLinkStatic",
  "lastOriginalValue" : 3,
  "numberOfCorrelations" : 6,
  "numberOfTrackingReminders" : 4,
  "variableCategory" : {
    "causeOnly" : true,
    "minimumAllowedValue" : "minimumAllowedValue",
    "variableCategoryName" : "variableCategoryName",
    "svgUrl" : "svgUrl",
    "moreInfo" : "moreInfo",
    "maximumAllowedValue" : "maximumAllowedValue",
    "public" : true,
    "appType" : "appType",
    "fillingValue" : 8,
    "imageUrl" : "imageUrl",
    "combinationOperation" : "combinationOperation",
    "createdTime" : "createdTime",
    "unitId" : 5,
    "pngUrl" : "pngUrl",
    "id" : 7,
    "variableCategoryNameSingular" : "variableCategoryNameSingular",
    "unitAbbreviatedName" : "unitAbbreviatedName",
    "outcome" : true,
    "updatedTime" : "updatedTime",
    "helpText" : "helpText",
    "durationOfAction" : 5,
    "ionIcon" : "ionIcon",
    "manualTracking" : true,
    "measurementSynonymSingularLowercase" : "measurementSynonymSingularLowercase",
    "pngPath" : "pngPath",
    "svgPath" : "svgPath",
    "name" : "name",
    "onsetDelay" : 3,
    "updated" : 3
  },
  "minimumRecordedValue" : 7.7403517,
  "ingredientOfUserTagVariables" : [ null, null ],
  "price" : 8.251625748923757,
  "combinationOperation" : "combinationOperation",
  "skewness" : 1.7325933,
  "id" : 6,
  "unitCategoryId" : 1,
  "userVariableFillingValue" : 9.183123594773994,
  "earliestSourceTime" : 4,
  "userVariableUnitName" : "userVariableUnitName",
  "updatedTime" : "updatedTime",
  "wikipediaTitle" : "wikipediaTitle",
  "availableUnits" : [ {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  }, {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  } ],
  "latestUserMeasurementTime" : 6,
  "chartsLinkFacebook" : "chartsLinkFacebook",
  "userVariableVariableCategoryId" : 0,
  "childCommonTagVariables" : [ null, null ],
  "childUserTagVariables" : [ null, null ],
  "upc" : "upc",
  "parentCommonTagVariables" : [ null, null ],
  "numberOfUserVariables" : 0,
  "userTaggedVariables" : [ null, null ],
  "variableId" : 0,
  "lastSuccessfulUpdateTime" : "lastSuccessfulUpdateTime",
  "unitCategoryName" : "unitCategoryName",
  "maximumRecordedDailyValue" : 0.8851375,
  "subtitle" : "subtitle",
  "lastUnit" : "lastUnit",
  "userVariableVariableCategoryName" : "userVariableVariableCategoryName",
  "onsetDelay" : 7,
  "chartsLinkDynamic" : "chartsLinkDynamic",
  "status" : "status",
  "causeOnly" : true,
  "numberOfAggregateCorrelationsAsEffect" : 4,
  "numberOfProcessedDailyMeasurements" : 4,
  "displayName" : "displayName",
  "latitude" : 3.3531933,
  "fillingType" : "fillingType",
  "joinedCommonTagVariables" : [ null, null ],
  "kurtosis" : 9.018348,
  "numberOfUserCorrelationsAsCause" : 0,
  "earliestMeasurementTime" : 1,
  "variableFillingValue" : 7.835035282970782,
  "variableCategoryId" : 5,
  "measurementsAtLastAnalysis" : 0,
  "fillingValue" : 9.36931,
  "latestFillingTime" : 6,
  "unitId" : 1,
  "lastUnitId" : 1,
  "experimentStartTimeSeconds" : 9,
  "experimentEndTimeSeconds" : 5,
  "unitAbbreviatedName" : "unitAbbreviatedName",
  "outcome" : true,
  "numberOfUniqueValues" : 9,
  "clientId" : "clientId",
  "ingredientUserTagVariables" : [ null, null ],
  "joinWith" : 8,
  "errorMessage" : "errorMessage",
  "userVariableMostCommonConnectorId" : 8,
  "commonVariableMostCommonConnectorId" : 7,
  "numberOfAggregateCorrelationsAsCause" : 3,
  "iconIcon" : "iconIcon",
  "userId" : 9,
  "chartsLinkEmail" : "chartsLinkEmail",
  "mostCommonOriginalUnitId" : 3,
  "userTagVariables" : [ null, null ],
  "secondToLastValue" : 2.9409642974827896,
  "chartsLinkGoogle" : "chartsLinkGoogle",
  "ingredientCommonTagVariables" : [ null, null ],
  "parentUserTagVariables" : [ null, null ],
  "userVariableUnitId" : 3,
  "variableCategoryImageUrl" : "variableCategoryImageUrl",
  "numberOfUniqueDailyValues" : 7.2605214,
  "productUrl" : "productUrl",
  "actionArray" : [ {
    "modifiedValue" : 0,
    "action" : "action",
    "callback" : "callback",
    "shortTitle" : "shortTitle",
    "title" : "title",
    "longTitle" : "longTitle"
  }, {
    "modifiedValue" : 0,
    "action" : "action",
    "callback" : "callback",
    "shortTitle" : "shortTitle",
    "title" : "title",
    "longTitle" : "longTitle"
  } ],
  "charts" : {
    "hourlyColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "lineChartWithSmoothing" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "monthlyColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "distributionColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "lineChartWithoutSmoothing" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    },
    "weekdayColumnChart" : {
      "chartId" : "chartId",
      "chartTitle" : "chartTitle",
      "svg" : "svg",
      "svgUrl" : "svgUrl",
      "explanation" : "explanation",
      "highchartConfig" : "{}"
    }
  },
  "mostCommonUnitId" : 7,
  "svgUrl" : "svgUrl",
  "userVariableUpdatedAt" : "userVariableUpdatedAt",
  "experimentStartTimeString" : "experimentStartTimeString",
  "createdAt" : "createdAt",
  "informationalUrl" : "informationalUrl",
  "inputType" : "inputType",
  "earliestFillingTime" : 7,
  "commonTagVariables" : [ null, null ],
  "longitude" : 3.0937452,
  "updatedAt" : "updatedAt",
  "commonVariableUpdatedAt" : "commonVariableUpdatedAt",
  "unitName" : "unitName",
  "onsetDelayInHours" : 5.507386964179881,
  "durationOfAction" : 1,
  "numberOfUserCorrelationsAsEffect" : 9,
  "joinedVariables" : [ null, null ],
  "ionIcon" : "ionIcon",
  "valence" : "valence",
  "manualTracking" : true,
  "shareUserMeasurements" : true,
  "chartsLinkTwitter" : "chartsLinkTwitter",
  "ingredientOfCommonTagVariables" : [ null, null ],
  "pngPath" : "pngPath",
  "latestSourceTime" : 5,
  "rawMeasurementsAtLastAnalysis" : 3,
  "unit" : {
    "minimumAllowedValue" : 3.616076749251911,
    "advanced" : 6,
    "manualTracking" : 2,
    "categoryName" : "categoryName",
    "maximumAllowedValue" : 7.061401241503109,
    "minimumValue" : 2,
    "unitCategory" : {
      "name" : "name",
      "id" : 4,
      "standardUnitAbbreviatedName" : "standardUnitAbbreviatedName"
    },
    "name" : "name",
    "id" : 5,
    "category" : "Distance",
    "abbreviatedName" : "abbreviatedName",
    "conversionSteps" : [ {
      "operation" : "ADD",
      "value" : 5.962133916683182
    }, {
      "operation" : "ADD",
      "value" : 5.962133916683182
    } ],
    "maximumValue" : 9,
    "categoryId" : 1
  },
  "median" : 4.652396,
  "name" : "name",
  "updated" : 8,
  "dataSource" : {
    "longDescription" : "longDescription",
    "image" : "image",
    "linkedDisplayNameHtml" : "linkedDisplayNameHtml",
    "imageHtml" : "imageHtml",
    "displayName" : "displayName",
    "connectorClientId" : "connectorClientId",
    "shortDescription" : "shortDescription",
    "enabled" : 2,
    "defaultVariableCategoryName" : "defaultVariableCategoryName",
    "getItUrl" : "getItUrl",
    "name" : "name",
    "id" : 4,
    "affiliate" : true
  },
  "commonAlias" : "commonAlias",
  "joinedUserTagVariables" : [ null, null ],
  "experimentEndTime" : "experimentEndTime",
  "minimumAllowedValue" : 8.969579,
  "sources" : "sources",
  "variableCategoryName" : "variableCategoryName",
  "mostCommonConnectorId" : 3,
  "description" : "description",
  "experimentStartTime" : "experimentStartTime",
  "userVariableValence" : "userVariableValence",
  "maximumAllowedValue" : 7.143538,
  "public" : 4,
  "userVariableWikipediaTitle" : "userVariableWikipediaTitle",
  "imageUrl" : "imageUrl",
  "alias" : "alias",
  "mostCommonValue" : 5.5332584,
  "pngUrl" : "pngUrl",
  "userVariableUnitCategoryId" : 1,
  "numberOfChanges" : 0,
  "maximumRecordedValue" : 7.058770351582356,
  "userVariableUnitAbbreviatedName" : "userVariableUnitAbbreviatedName",
  "variableName" : "variableName",
  "lastProcessedDailyValue" : 6.965117697638846,
  "thirdToLastValue" : 4.573936264232251,
  "outcomeOfInterest" : 4,
  "mostCommonUnit" : "mostCommonUnit",
  "lastOriginalUnitId" : 6,
  "thirdMostCommonValue" : 6.623518433804886,
  "userVariableUnitCategoryName" : "userVariableUnitCategoryName",
  "predictorOfInterest" : 6,
  "variance" : 3.1497903714250555,
  "mean" : 6.519181,
  "numberOfRawMeasurements" : 1,
  "secondMostCommonValue" : 0.43431398824148815,
  "location" : "location",
  "commonTaggedVariables" : [ null, null ],
  "standardDeviation" : 8.28965939814297
} ]}]
     
     - parameter includeCharts: (query) Highcharts configs that can be used if you have highcharts.js included on the page.  This only works if the id or name query parameter is also provided. (optional)
     - parameter numberOfRawMeasurements: (query) Filter variables by the total number of measurements that they have. This could be used of you want to filter or sort by popularity. (optional)
     - parameter userId: (query) User&#39;s id (optional)
     - parameter variableCategoryName: (query) Limit results to a specific variable category (optional)
     - parameter name: (query) Name of the variable. To get results matching a substring, add % as a wildcard as the first and/or last character of a query string parameter. In order to get variables that contain &#x60;Mood&#x60;, the following query should be used: ?variableName&#x3D;%Mood% (optional)
     - parameter updatedAt: (query) When the record was last updated. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss datetime format. Time zone should be UTC and not local. (optional)
     - parameter sourceName: (query) ID of the source you want measurements for (supports exact name match only) (optional)
     - parameter earliestMeasurementTime: (query) Excluded records with measurement times earlier than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. (optional)
     - parameter latestMeasurementTime: (query) Excluded records with measurement times later than this value. Use UTC ISO 8601 YYYY-MM-DDThh:mm:ss  datetime format. Time zone should be UTC and not local. (optional)
     - parameter id: (query) Common variable id (optional)
     - parameter lastSourceName: (query) Limit variables to those which measurements were last submitted by a specific source. So if you have a client application and you only want variables that were last updated by your app, you can include the name of your app here (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if youhave 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional, default to 100)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause.If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by one of the listed field names. If the field name is prefixed with &#x60;-&#x60;, it will sort in descending order. (optional)
     - parameter includePublic: (query) Include variables the user has no measurements for (optional)
     - parameter manualTracking: (query) Only include variables tracked manually by the user (optional)
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter upc: (query) UPC or other barcode scan result (optional)
     - parameter effectOrCause: (query) Provided variable is the effect or cause (optional)
     - parameter publicEffectOrCause: (query) Ex:  (optional)
     - parameter exactMatch: (query) Require exact match (optional)
     - parameter variableCategoryId: (query) Ex: 13 (optional)
     - parameter includePrivate: (query) Include user-specific variables in results (optional)
     - parameter searchPhrase: (query) Ex: %Body Fat% (optional)
     - parameter synonyms: (query) Ex: %McDonalds hotcake% (optional)
     - parameter taggedVariableId: (query) Id of the tagged variable (i.e. Lollipop) you would like to get variables it can be tagged with (i.e. Sugar).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter tagVariableId: (query) Id of the tag variable (i.e. Sugar) you would like to get variables it can be tagged to (i.e. Lollipop).  Converted measurements of the tagged variable are included in analysis of the tag variable (i.e. ingredient). (optional)
     - parameter joinVariableId: (query) Id of the variable you would like to get variables that can be joined to.  This is used to merge duplicate variables.   If joinVariableId is specified, this returns only variables eligible to be joined to the variable specified by the joinVariableId. (optional)
     - parameter parentUserTagVariableId: (query) Id of the parent category variable (i.e. Fruit) you would like to get eligible child sub-type variables (i.e. Apple) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple.  When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. (optional)
     - parameter childUserTagVariableId: (query) Id of the child sub-type variable (i.e. Apple) you would like to get eligible parent variables (i.e. Fruit) for.  Child variable measurements will be included in analysis of the parent variable.  For instance, a child sub-type of the parent category Fruit could be Apple. When Apple is tagged with the parent category Fruit, Apple measurements will be included when Fruit is analyzed. (optional)
     - parameter ingredientUserTagVariableId: (query) Id of the ingredient variable (i.e. Fructose)  you would like to get eligible ingredientOf variables (i.e. Apple) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. (optional)
     - parameter ingredientOfUserTagVariableId: (query) Id of the ingredientOf variable (i.e. Apple) you would like to get eligible ingredient variables (i.e. Fructose) for.  IngredientOf variable measurements will be included in analysis of the ingredient variable.  For instance, a ingredientOf of variable Fruit could be Apple. (optional)
     - parameter commonOnly: (query) Return only public and aggregated common variable data instead of user-specific variables (optional)
     - parameter userOnly: (query) Return only user-specific variables and data, excluding common aggregated variable data (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter includeTags: (query) Return parent, child, duplicate, and ingredient variables (optional)
     - parameter recalculate: (query) Recalculate instead of using cached analysis (optional)
     - parameter variableId: (query) Ex: 13 (optional)

     - returns: RequestBuilder<[Variable]> 
     */
    public class func getVariablesWithRequestBuilder(includeCharts includeCharts: Bool? = nil, numberOfRawMeasurements: String? = nil, userId: Double? = nil, variableCategoryName: VariableCategoryName_getVariables? = nil, name: String? = nil, updatedAt: String? = nil, sourceName: String? = nil, earliestMeasurementTime: String? = nil, latestMeasurementTime: String? = nil, id: Int32? = nil, lastSourceName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, includePublic: Bool? = nil, manualTracking: Bool? = nil, clientId: String? = nil, upc: String? = nil, effectOrCause: String? = nil, publicEffectOrCause: String? = nil, exactMatch: Bool? = nil, variableCategoryId: Int32? = nil, includePrivate: Bool? = nil, searchPhrase: String? = nil, synonyms: String? = nil, taggedVariableId: Int32? = nil, tagVariableId: Int32? = nil, joinVariableId: Int32? = nil, parentUserTagVariableId: Int32? = nil, childUserTagVariableId: Int32? = nil, ingredientUserTagVariableId: Int32? = nil, ingredientOfUserTagVariableId: Int32? = nil, commonOnly: Bool? = nil, userOnly: Bool? = nil, platform: Platform_getVariables? = nil, includeTags: Bool? = nil, recalculate: Bool? = nil, variableId: Int32? = nil) -> RequestBuilder<[Variable]> {
        let path = "/v3/variables"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "includeCharts": includeCharts,
            "numberOfRawMeasurements": numberOfRawMeasurements,
            "userId": userId,
            "variableCategoryName": variableCategoryName?.rawValue,
            "name": name,
            "updatedAt": updatedAt,
            "sourceName": sourceName,
            "earliestMeasurementTime": earliestMeasurementTime,
            "latestMeasurementTime": latestMeasurementTime,
            "id": id?.encodeToJSON(),
            "lastSourceName": lastSourceName,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort,
            "includePublic": includePublic,
            "manualTracking": manualTracking,
            "clientId": clientId,
            "upc": upc,
            "effectOrCause": effectOrCause,
            "publicEffectOrCause": publicEffectOrCause,
            "exactMatch": exactMatch,
            "variableCategoryId": variableCategoryId?.encodeToJSON(),
            "includePrivate": includePrivate,
            "searchPhrase": searchPhrase,
            "synonyms": synonyms,
            "taggedVariableId": taggedVariableId?.encodeToJSON(),
            "tagVariableId": tagVariableId?.encodeToJSON(),
            "joinVariableId": joinVariableId?.encodeToJSON(),
            "parentUserTagVariableId": parentUserTagVariableId?.encodeToJSON(),
            "childUserTagVariableId": childUserTagVariableId?.encodeToJSON(),
            "ingredientUserTagVariableId": ingredientUserTagVariableId?.encodeToJSON(),
            "ingredientOfUserTagVariableId": ingredientOfUserTagVariableId?.encodeToJSON(),
            "commonOnly": commonOnly,
            "userOnly": userOnly,
            "platform": platform?.rawValue,
            "includeTags": includeTags,
            "recalculate": recalculate,
            "variableId": variableId?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Variable]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post or update user tags or ingredients
     
     - parameter body: (body) Contains the new user tag data 
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUserTags(body body: UserTag, userId: Double? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        postUserTagsWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Post or update user tags or ingredients
     - POST /v3/userTags
     - This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "description" : "description"
}}]
     
     - parameter body: (body) Contains the new user tag data 
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func postUserTagsWithRequestBuilder(body body: UserTag, userId: Double? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v3/userTags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter variableCategoryName
     */
    public enum VariableCategoryName_postUserVariables: String { 
        case Activity = "Activity"
        case Books = "Books"
        case CausesOfIllness = "Causes of Illness"
        case CognitivePerformance = "Cognitive Performance"
        case Conditions = "Conditions"
        case Emotions = "Emotions"
        case Environment = "Environment"
        case Foods = "Foods"
        case Location = "Location"
        case Miscellaneous = "Miscellaneous"
        case MoviesAndTv = "Movies and TV"
        case Music = "Music"
        case Nutrients = "Nutrients"
        case Payments = "Payments"
        case PhysicalActivity = "Physical Activity"
        case Physique = "Physique"
        case Sleep = "Sleep"
        case SocialInteractions = "Social Interactions"
        case Software = "Software"
        case Symptoms = "Symptoms"
        case Treatments = "Treatments"
        case VitalSigns = "Vital Signs"
        case Work = "Work"
    }

    /**
     * enum for parameter platform
     */
    public enum Platform_postUserVariables: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     Update User Settings for a Variable
     
     - parameter userVariables: (body) Variable user settings data 
     - parameter includePrivate: (query) Include user-specific variables in results (optional)
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter includePublic: (query) Include variables the user has no measurements for (optional)
     - parameter searchPhrase: (query) Ex: %Body Fat% (optional)
     - parameter exactMatch: (query) Require exact match (optional)
     - parameter manualTracking: (query) Only include variables tracked manually by the user (optional)
     - parameter variableCategoryName: (query) Limit results to a specific variable category (optional)
     - parameter variableCategoryId: (query) Ex: 13 (optional)
     - parameter synonyms: (query) Ex: %McDonalds hotcake% (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUserVariables(userVariables userVariables: [Variable], includePrivate: Bool? = nil, clientId: String? = nil, includePublic: Bool? = nil, searchPhrase: String? = nil, exactMatch: Bool? = nil, manualTracking: Bool? = nil, variableCategoryName: VariableCategoryName_postUserVariables? = nil, variableCategoryId: Int32? = nil, synonyms: String? = nil, platform: Platform_postUserVariables? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        postUserVariablesWithRequestBuilder(userVariables: userVariables, includePrivate: includePrivate, clientId: clientId, includePublic: includePublic, searchPhrase: searchPhrase, exactMatch: exactMatch, manualTracking: manualTracking, variableCategoryName: variableCategoryName, variableCategoryId: variableCategoryId, synonyms: synonyms, platform: platform).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update User Settings for a Variable
     - POST /v3/variables
     - Users can change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "description" : "description"
}}]
     
     - parameter userVariables: (body) Variable user settings data 
     - parameter includePrivate: (query) Include user-specific variables in results (optional)
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter includePublic: (query) Include variables the user has no measurements for (optional)
     - parameter searchPhrase: (query) Ex: %Body Fat% (optional)
     - parameter exactMatch: (query) Require exact match (optional)
     - parameter manualTracking: (query) Only include variables tracked manually by the user (optional)
     - parameter variableCategoryName: (query) Limit results to a specific variable category (optional)
     - parameter variableCategoryId: (query) Ex: 13 (optional)
     - parameter synonyms: (query) Ex: %McDonalds hotcake% (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func postUserVariablesWithRequestBuilder(userVariables userVariables: [Variable], includePrivate: Bool? = nil, clientId: String? = nil, includePublic: Bool? = nil, searchPhrase: String? = nil, exactMatch: Bool? = nil, manualTracking: Bool? = nil, variableCategoryName: VariableCategoryName_postUserVariables? = nil, variableCategoryId: Int32? = nil, synonyms: String? = nil, platform: Platform_postUserVariables? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v3/variables"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userVariables.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Reset user settings for a variable to defaults
     
     - parameter variableId: (body) Id of the variable whose measurements should be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func resetUserVariableSettings(variableId variableId: UserVariableDelete, completion: ((error: ErrorType?) -> Void)) {
        resetUserVariableSettingsWithRequestBuilder(variableId: variableId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Reset user settings for a variable to defaults
     - POST /v3/userVariables/reset
     - Reset user settings for a variable to defaults
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter variableId: (body) Id of the variable whose measurements should be deleted 

     - returns: RequestBuilder<Void> 
     */
    public class func resetUserVariableSettingsWithRequestBuilder(variableId variableId: UserVariableDelete) -> RequestBuilder<Void> {
        let path = "/v3/userVariables/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = variableId.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
