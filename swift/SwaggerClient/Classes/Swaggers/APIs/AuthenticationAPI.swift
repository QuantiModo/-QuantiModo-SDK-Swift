//
// AuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AuthenticationAPI: APIBase {
    /**
     * enum for parameter platform
     */
    public enum Platform_getAccessToken: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     Get a user access token
     
     - parameter grantType: (query) Grant Type can be &#39;authorization_code&#39; or &#39;refresh_token&#39; 
     - parameter code: (query) Authorization code you received with the previous request. 
     - parameter responseType: (query) If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. 
     - parameter scope: (query) Scopes include basic, readmeasurements, and writemeasurements. The &#x60;basic&#x60; scope allows you to read user info (displayName, email, etc). The &#x60;readmeasurements&#x60; scope allows one to read a user&#39;s data. The &#x60;writemeasurements&#x60; scope allows you to write user data. Separate multiple scopes by a space. 
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter clientSecret: (query) This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps). (optional)
     - parameter redirectUri: (query) The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (optional)
     - parameter state: (query) An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAccessToken(grantType grantType: String, code: String, responseType: String, scope: String, clientId: String? = nil, clientSecret: String? = nil, redirectUri: String? = nil, state: String? = nil, platform: Platform_getAccessToken? = nil, completion: ((error: ErrorType?) -> Void)) {
        getAccessTokenWithRequestBuilder(grantType: grantType, code: code, responseType: responseType, scope: scope, clientId: clientId, clientSecret: clientSecret, redirectUri: redirectUri, state: state, platform: platform).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get a user access token
     - GET /v3/oauth2/token
     - Client provides authorization token obtained from /api/v3/oauth2/authorize to this endpoint and receives an access token. Access token can then be used to query API endpoints. ### Request Access Token After user approves your access to the given scope form the https:/app.quantimo.do/v2/oauth2/authorize endpoint, you'll receive an authorization code to request an access token. This time make a `POST` request to `/api/v2/oauth/access_token` with parameters including: * `grant_type` Can be `authorization_code` or `refresh_token` since we are getting the `access_token` for the first time we don't have a `refresh_token` so this must be `authorization_code`. * `code` Authorization code you received with the previous request. * `redirect_uri` Your application's redirect url. ### Refreshing Access Token Access tokens expire at some point, to continue using our api you need to refresh them with `refresh_token` you received along with the `access_token`. To do this make a `POST` request to `/api/v2/oauth/access_token` with correct parameters, which are: * `grant_type` This time grant type must be `refresh_token` since we have it. * `clientId` Your application's client id. * `client_secret` Your application's client secret. * `refresh_token` The refresh token you received with the `access_token`. Every request you make to this endpoint will give you a new refresh token and make the old one expired. So you can keep getting new access tokens with new refresh tokens. ### Using Access Token Currently we support 2 ways for this, you can't use both at the same time. * Adding access token to the request header as `Authorization: Bearer {access_token}` * Adding to the url as a query parameter `?access_token={access_token}` You can read more about OAuth2 from [here](http://oauth.net/2/)
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter grantType: (query) Grant Type can be &#39;authorization_code&#39; or &#39;refresh_token&#39; 
     - parameter code: (query) Authorization code you received with the previous request. 
     - parameter responseType: (query) If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. 
     - parameter scope: (query) Scopes include basic, readmeasurements, and writemeasurements. The &#x60;basic&#x60; scope allows you to read user info (displayName, email, etc). The &#x60;readmeasurements&#x60; scope allows one to read a user&#39;s data. The &#x60;writemeasurements&#x60; scope allows you to write user data. Separate multiple scopes by a space. 
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter clientSecret: (query) This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps). (optional)
     - parameter redirectUri: (query) The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (optional)
     - parameter state: (query) An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getAccessTokenWithRequestBuilder(grantType grantType: String, code: String, responseType: String, scope: String, clientId: String? = nil, clientSecret: String? = nil, redirectUri: String? = nil, state: String? = nil, platform: Platform_getAccessToken? = nil) -> RequestBuilder<Void> {
        let path = "/v3/oauth2/token"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientId": clientId,
            "client_secret": clientSecret,
            "grant_type": grantType,
            "code": code,
            "response_type": responseType,
            "scope": scope,
            "redirect_uri": redirectUri,
            "state": state,
            "platform": platform?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter platform
     */
    public enum Platform_getOauthAuthorizationCode: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     Request Authorization Code
     
     - parameter responseType: (query) If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. 
     - parameter scope: (query) Scopes include basic, readmeasurements, and writemeasurements. The &#x60;basic&#x60; scope allows you to read user info (displayName, email, etc). The &#x60;readmeasurements&#x60; scope allows one to read a user&#39;s data. The &#x60;writemeasurements&#x60; scope allows you to write user data. Separate multiple scopes by a space. 
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter clientSecret: (query) This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps). (optional)
     - parameter redirectUri: (query) The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (optional)
     - parameter state: (query) An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getOauthAuthorizationCode(responseType responseType: String, scope: String, clientId: String? = nil, clientSecret: String? = nil, redirectUri: String? = nil, state: String? = nil, platform: Platform_getOauthAuthorizationCode? = nil, completion: ((error: ErrorType?) -> Void)) {
        getOauthAuthorizationCodeWithRequestBuilder(responseType: responseType, scope: scope, clientId: clientId, clientSecret: clientSecret, redirectUri: redirectUri, state: state, platform: platform).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Request Authorization Code
     - GET /v3/oauth2/authorize
     - You can implement OAuth2 authentication to your application using our **OAuth2** endpoints.  You need to redirect users to `/api/v3/oauth2/authorize` endpoint to get an authorization code and include the parameters below.   This page will ask the user if they want to allow a client's application to submit or obtain data from their QM account. It will redirect the user to the url provided by the client application with the code as a query parameter or error in case of an error. See the /api/v2/oauth/access_token endpoint for the next steps.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter responseType: (query) If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. 
     - parameter scope: (query) Scopes include basic, readmeasurements, and writemeasurements. The &#x60;basic&#x60; scope allows you to read user info (displayName, email, etc). The &#x60;readmeasurements&#x60; scope allows one to read a user&#39;s data. The &#x60;writemeasurements&#x60; scope allows you to write user data. Separate multiple scopes by a space. 
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter clientSecret: (query) This is the secret for your obtained clientId. We use this to ensure that only your application uses the clientId.  Obtain this by creating a free application at [https://app.quantimo.do/api/v2/apps](https://app.quantimo.do/api/v2/apps). (optional)
     - parameter redirectUri: (query) The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (optional)
     - parameter state: (query) An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getOauthAuthorizationCodeWithRequestBuilder(responseType responseType: String, scope: String, clientId: String? = nil, clientSecret: String? = nil, redirectUri: String? = nil, state: String? = nil, platform: Platform_getOauthAuthorizationCode? = nil) -> RequestBuilder<Void> {
        let path = "/v3/oauth2/authorize"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientId": clientId,
            "client_secret": clientSecret,
            "response_type": responseType,
            "scope": scope,
            "redirect_uri": redirectUri,
            "state": state,
            "platform": platform?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post GoogleIdToken
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postGoogleIdToken(completion: ((error: ErrorType?) -> Void)) {
        postGoogleIdTokenWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Post GoogleIdToken
     - POST /v3/googleIdToken
     - Post GoogleIdToken

     - returns: RequestBuilder<Void> 
     */
    public class func postGoogleIdTokenWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v3/googleIdToken"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
