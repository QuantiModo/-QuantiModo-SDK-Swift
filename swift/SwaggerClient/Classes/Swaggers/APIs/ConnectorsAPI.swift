//
// ConnectorsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ConnectorsAPI: APIBase {
    /**
     * enum for parameter connectorName
     */
    public enum ConnectorName_connectConnector: String { 
        case Facebook = "facebook"
        case Fitbit = "fitbit"
        case Github = "github"
        case Googlecalendar = "googlecalendar"
        case Googlefit = "googlefit"
        case Medhelper = "medhelper"
        case Mint = "mint"
        case Moodpanda = "moodpanda"
        case Moodscope = "moodscope"
        case Myfitnesspal = "myfitnesspal"
        case Mynetdiary = "mynetdiary"
        case Netatmo = "netatmo"
        case Rescuetime = "rescuetime"
        case Runkeeper = "runkeeper"
        case Slack = "slack"
        case Sleepcloud = "sleepcloud"
        case Slice = "slice"
        case Up = "up"
        case Whatpulse = "whatpulse"
        case Withings = "withings"
        case Worldweatheronline = "worldweatheronline"
        case Foursquare = "foursquare"
        case Strava = "strava"
        case Gmail = "gmail"
    }

    /**
     Obtain a token from 3rd party data source
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func connectConnector(connectorName connectorName: ConnectorName_connectConnector, userId: Double? = nil, completion: ((error: ErrorType?) -> Void)) {
        connectConnectorWithRequestBuilder(connectorName: connectorName, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Obtain a token from 3rd party data source
     - GET /v3/connectors/{connectorName}/connect
     - Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func connectConnectorWithRequestBuilder(connectorName connectorName: ConnectorName_connectConnector, userId: Double? = nil) -> RequestBuilder<Void> {
        var path = "/v3/connectors/{connectorName}/connect"
        path = path.stringByReplacingOccurrencesOfString("{connectorName}", withString: "\(connectorName.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userId": userId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter connectorName
     */
    public enum ConnectorName_disconnectConnector: String { 
        case Facebook = "facebook"
        case Fitbit = "fitbit"
        case Github = "github"
        case Googlecalendar = "googlecalendar"
        case Googlefit = "googlefit"
        case Medhelper = "medhelper"
        case Mint = "mint"
        case Moodpanda = "moodpanda"
        case Moodscope = "moodscope"
        case Myfitnesspal = "myfitnesspal"
        case Mynetdiary = "mynetdiary"
        case Netatmo = "netatmo"
        case Rescuetime = "rescuetime"
        case Runkeeper = "runkeeper"
        case Slack = "slack"
        case Sleepcloud = "sleepcloud"
        case Slice = "slice"
        case Up = "up"
        case Whatpulse = "whatpulse"
        case Withings = "withings"
        case Worldweatheronline = "worldweatheronline"
        case Foursquare = "foursquare"
        case Strava = "strava"
        case Gmail = "gmail"
    }

    /**
     Delete stored connection info
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func disconnectConnector(connectorName connectorName: ConnectorName_disconnectConnector, completion: ((error: ErrorType?) -> Void)) {
        disconnectConnectorWithRequestBuilder(connectorName: connectorName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete stored connection info
     - GET /v3/connectors/{connectorName}/disconnect
     - The disconnect method deletes any stored tokens or connection information from the connectors database.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 

     - returns: RequestBuilder<Void> 
     */
    public class func disconnectConnectorWithRequestBuilder(connectorName connectorName: ConnectorName_disconnectConnector) -> RequestBuilder<Void> {
        var path = "/v3/connectors/{connectorName}/disconnect"
        path = path.stringByReplacingOccurrencesOfString("{connectorName}", withString: "\(connectorName.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter platform
     */
    public enum Platform_getConnectors: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     List of Connectors
     
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getConnectors(clientId clientId: String? = nil, platform: Platform_getConnectors? = nil, completion: ((data: GetConnectorsResponse?, error: ErrorType?) -> Void)) {
        getConnectorsWithRequestBuilder(clientId: clientId, platform: platform).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List of Connectors
     - GET /v3/connectors/list
     - A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     - examples: [{contentType=application/json, example={
  "summary" : "summary",
  "connectors" : [ {
    "longDescription" : "longDescription",
    "linkedDisplayNameHtml" : "linkedDisplayNameHtml",
    "imageHtml" : "imageHtml",
    "connectorId" : 0,
    "displayName" : "displayName",
    "mobileConnectMethod" : "mobileConnectMethod",
    "enabled" : 6,
    "defaultVariableCategoryName" : "defaultVariableCategoryName",
    "platforms" : [ "platforms", "platforms" ],
    "createdAt" : "createdAt",
    "premium" : true,
    "getItUrl" : "getItUrl",
    "connectError" : "connectError",
    "totalMeasurementsInLastUpdate" : 5,
    "connectInstructions" : {
      "parameters" : [ "{}", "{}" ],
      "url" : "url",
      "usePopup" : true
    },
    "id" : 1,
    "lastSuccessfulUpdatedAt" : "lastSuccessfulUpdatedAt",
    "updateRequestedAt" : "updateRequestedAt",
    "updatedAt" : "updatedAt",
    "image" : "image",
    "backgroundColor" : "backgroundColor",
    "buttons" : [ {
      "additionalInformation" : "additionalInformation",
      "color" : "color",
      "link" : "link",
      "ionIcon" : "ionIcon",
      "text" : "text"
    }, {
      "additionalInformation" : "additionalInformation",
      "color" : "color",
      "link" : "link",
      "ionIcon" : "ionIcon",
      "text" : "text"
    } ],
    "clientId" : "clientId",
    "connectStatus" : "connectStatus",
    "connectorClientId" : "connectorClientId",
    "spreadsheetUpload" : true,
    "shortDescription" : "shortDescription",
    "message" : "message",
    "userId" : 2,
    "connected" : true,
    "updateStatus" : "updateStatus",
    "lastUpdate" : 5,
    "name" : "name",
    "scopes" : [ "scopes", "scopes" ],
    "affiliate" : true
  }, {
    "longDescription" : "longDescription",
    "linkedDisplayNameHtml" : "linkedDisplayNameHtml",
    "imageHtml" : "imageHtml",
    "connectorId" : 0,
    "displayName" : "displayName",
    "mobileConnectMethod" : "mobileConnectMethod",
    "enabled" : 6,
    "defaultVariableCategoryName" : "defaultVariableCategoryName",
    "platforms" : [ "platforms", "platforms" ],
    "createdAt" : "createdAt",
    "premium" : true,
    "getItUrl" : "getItUrl",
    "connectError" : "connectError",
    "totalMeasurementsInLastUpdate" : 5,
    "connectInstructions" : {
      "parameters" : [ "{}", "{}" ],
      "url" : "url",
      "usePopup" : true
    },
    "id" : 1,
    "lastSuccessfulUpdatedAt" : "lastSuccessfulUpdatedAt",
    "updateRequestedAt" : "updateRequestedAt",
    "updatedAt" : "updatedAt",
    "image" : "image",
    "backgroundColor" : "backgroundColor",
    "buttons" : [ {
      "additionalInformation" : "additionalInformation",
      "color" : "color",
      "link" : "link",
      "ionIcon" : "ionIcon",
      "text" : "text"
    }, {
      "additionalInformation" : "additionalInformation",
      "color" : "color",
      "link" : "link",
      "ionIcon" : "ionIcon",
      "text" : "text"
    } ],
    "clientId" : "clientId",
    "connectStatus" : "connectStatus",
    "connectorClientId" : "connectorClientId",
    "spreadsheetUpload" : true,
    "shortDescription" : "shortDescription",
    "message" : "message",
    "userId" : 2,
    "connected" : true,
    "updateStatus" : "updateStatus",
    "lastUpdate" : 5,
    "name" : "name",
    "scopes" : [ "scopes", "scopes" ],
    "affiliate" : true
  } ],
  "description" : "description"
}}]
     
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)

     - returns: RequestBuilder<GetConnectorsResponse> 
     */
    public class func getConnectorsWithRequestBuilder(clientId clientId: String? = nil, platform: Platform_getConnectors? = nil) -> RequestBuilder<GetConnectorsResponse> {
        let path = "/v3/connectors/list"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientId": clientId,
            "platform": platform?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetConnectorsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter platform
     */
    public enum Platform_getIntegrationJs: String { 
        case Chrome = "chrome"
        case Android = "android"
        case Ios = "ios"
        case Web = "web"
    }

    /**
     Get embeddable connect javascript
     
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getIntegrationJs(clientId clientId: String? = nil, platform: Platform_getIntegrationJs? = nil, completion: ((error: ErrorType?) -> Void)) {
        getIntegrationJsWithRequestBuilder(clientId: clientId, platform: platform).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get embeddable connect javascript
     - GET /v3/integration.js
     - Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
     
     - parameter clientId: (query) Your QuantiModo client id can be obtained by creating an app at https://builder.quantimo.do (optional)
     - parameter platform: (query) Ex: chrome, android, ios, web (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getIntegrationJsWithRequestBuilder(clientId clientId: String? = nil, platform: Platform_getIntegrationJs? = nil) -> RequestBuilder<Void> {
        let path = "/v3/integration.js"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientId": clientId,
            "platform": platform?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Mobile connect page
     
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMobileConnectPage(userId userId: Double? = nil, completion: ((error: ErrorType?) -> Void)) {
        getMobileConnectPageWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Mobile connect page
     - GET /v3/connect/mobile
     - This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user's access_token as a URL parameter like https://app.quantimo.do/api/v3/connect/mobile?access_token=123
     
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getMobileConnectPageWithRequestBuilder(userId userId: Double? = nil) -> RequestBuilder<Void> {
        let path = "/v3/connect/mobile"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userId": userId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter connectorName
     */
    public enum ConnectorName_updateConnector: String { 
        case Facebook = "facebook"
        case Fitbit = "fitbit"
        case Github = "github"
        case Googlecalendar = "googlecalendar"
        case Googlefit = "googlefit"
        case Medhelper = "medhelper"
        case Mint = "mint"
        case Moodpanda = "moodpanda"
        case Moodscope = "moodscope"
        case Myfitnesspal = "myfitnesspal"
        case Mynetdiary = "mynetdiary"
        case Netatmo = "netatmo"
        case Rescuetime = "rescuetime"
        case Runkeeper = "runkeeper"
        case Slack = "slack"
        case Sleepcloud = "sleepcloud"
        case Slice = "slice"
        case Up = "up"
        case Whatpulse = "whatpulse"
        case Withings = "withings"
        case Worldweatheronline = "worldweatheronline"
        case Foursquare = "foursquare"
        case Strava = "strava"
        case Gmail = "gmail"
    }

    /**
     Sync with data source
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 
     - parameter userId: (query) User&#39;s id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateConnector(connectorName connectorName: ConnectorName_updateConnector, userId: Double? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateConnectorWithRequestBuilder(connectorName: connectorName, userId: userId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Sync with data source
     - GET /v3/connectors/{connectorName}/update
     - The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - OAuth:
       - type: oauth2
       - name: quantimodo_oauth2
     
     - parameter connectorName: (path) Lowercase system name of the source application or device. Get a list of available connectors from the /v3/connectors/list endpoint. 
     - parameter userId: (query) User&#39;s id (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateConnectorWithRequestBuilder(connectorName connectorName: ConnectorName_updateConnector, userId: Double? = nil) -> RequestBuilder<Void> {
        var path = "/v3/connectors/{connectorName}/update"
        path = path.stringByReplacingOccurrencesOfString("{connectorName}", withString: "\(connectorName.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userId": userId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
