// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AppSettings]
            Decoders.addDecoder(clazz: [AppSettings].self) { (source: AnyObject) -> [AppSettings] in
                return Decoders.decode(clazz: [AppSettings].self, source: source)
            }
            // Decoder for AppSettings
            Decoders.addDecoder(clazz: AppSettings.self) { (source: AnyObject) -> AppSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AppSettings()
                instance.additionalSettings = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["additionalSettings"])
                instance.appDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appDescription"])
                instance.appDesign = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["appDesign"])
                instance.appDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appDisplayName"])
                instance.appStatus = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["appStatus"])
                instance.appType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appType"])
                instance.buildEnabled = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buildEnabled"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.clientSecret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientSecret"])
                instance.collaborators = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collaborators"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                instance.redirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["redirectUri"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"])
                instance.homepageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["homepageUrl"])
                instance.iconUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longDescription"])
                instance.splashScreen = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["splashScreen"])
                instance.textLogo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["textLogo"])
                return instance
            }


            // Decoder for [AppSettingsResponse]
            Decoders.addDecoder(clazz: [AppSettingsResponse].self) { (source: AnyObject) -> [AppSettingsResponse] in
                return Decoders.decode(clazz: [AppSettingsResponse].self, source: source)
            }
            // Decoder for AppSettingsResponse
            Decoders.addDecoder(clazz: AppSettingsResponse.self) { (source: AnyObject) -> AppSettingsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AppSettingsResponse()
                instance.appSettings = Decoders.decodeOptional(clazz: AppSettings.self, source: sourceDictionary["appSettings"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [AuthorizedClients]
            Decoders.addDecoder(clazz: [AuthorizedClients].self) { (source: AnyObject) -> [AuthorizedClients] in
                return Decoders.decode(clazz: [AuthorizedClients].self, source: source)
            }
            // Decoder for AuthorizedClients
            Decoders.addDecoder(clazz: AuthorizedClients.self) { (source: AnyObject) -> AuthorizedClients in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AuthorizedClients()
                instance.apps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["apps"])
                instance.individuals = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["individuals"])
                instance.studies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["studies"])
                return instance
            }


            // Decoder for [Button]
            Decoders.addDecoder(clazz: [Button].self) { (source: AnyObject) -> [Button] in
                return Decoders.decode(clazz: [Button].self, source: source)
            }
            // Decoder for Button
            Decoders.addDecoder(clazz: Button.self) { (source: AnyObject) -> Button in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Button()
                instance.link = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"])
                instance.additionalInformation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["additionalInformation"])
                return instance
            }


            // Decoder for [Chart]
            Decoders.addDecoder(clazz: [Chart].self) { (source: AnyObject) -> [Chart] in
                return Decoders.decode(clazz: [Chart].self, source: source)
            }
            // Decoder for Chart
            Decoders.addDecoder(clazz: Chart.self) { (source: AnyObject) -> Chart in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Chart()
                instance.highchartConfig = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["highchartConfig"])
                instance.chartId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartId"])
                instance.chartTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartTitle"])
                instance.explanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["explanation"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.svg = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svg"])
                return instance
            }


            // Decoder for [CommonResponse]
            Decoders.addDecoder(clazz: [CommonResponse].self) { (source: AnyObject) -> [CommonResponse] in
                return Decoders.decode(clazz: [CommonResponse].self, source: source)
            }
            // Decoder for CommonResponse
            Decoders.addDecoder(clazz: CommonResponse.self) { (source: AnyObject) -> CommonResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CommonResponse()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [ConnectInstructions]
            Decoders.addDecoder(clazz: [ConnectInstructions].self) { (source: AnyObject) -> [ConnectInstructions] in
                return Decoders.decode(clazz: [ConnectInstructions].self, source: source)
            }
            // Decoder for ConnectInstructions
            Decoders.addDecoder(clazz: ConnectInstructions.self) { (source: AnyObject) -> ConnectInstructions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConnectInstructions()
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.usePopup = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["usePopup"])
                return instance
            }


            // Decoder for [Connector]
            Decoders.addDecoder(clazz: [Connector].self) { (source: AnyObject) -> [Connector] in
                return Decoders.decode(clazz: [Connector].self, source: source)
            }
            // Decoder for Connector
            Decoders.addDecoder(clazz: Connector.self) { (source: AnyObject) -> Connector in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Connector()
                instance.affiliate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["affiliate"])
                instance.backgroundColor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backgroundColor"])
                instance.buttons = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["buttons"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.connected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["connected"])
                instance.connectError = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectError"])
                instance.connectInstructions = Decoders.decodeOptional(clazz: ConnectInstructions.self, source: sourceDictionary["connectInstructions"])
                instance.connectorClientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectorClientId"])
                instance.connectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["connectorId"])
                instance.connectStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectStatus"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.defaultVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultVariableCategoryName"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.enabled = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["enabled"])
                instance.getItUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["getItUrl"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.imageHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageHtml"])
                instance.lastSuccessfulUpdatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastSuccessfulUpdatedAt"])
                instance.lastUpdate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastUpdate"])
                instance.linkedDisplayNameHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linkedDisplayNameHtml"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longDescription"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.mobileConnectMethod = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mobileConnectMethod"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.platforms = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["platforms"])
                instance.premium = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["premium"])
                instance.scopes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["scopes"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"])
                instance.spreadsheetUpload = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["spreadsheetUpload"])
                instance.totalMeasurementsInLastUpdate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalMeasurementsInLastUpdate"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.updateRequestedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateRequestedAt"])
                instance.updateStatus = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateStatus"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                return instance
            }


            // Decoder for [ConversionStep]
            Decoders.addDecoder(clazz: [ConversionStep].self) { (source: AnyObject) -> [ConversionStep] in
                return Decoders.decode(clazz: [ConversionStep].self, source: source)
            }
            // Decoder for ConversionStep
            Decoders.addDecoder(clazz: ConversionStep.self) { (source: AnyObject) -> ConversionStep in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConversionStep()
                instance.operation = ConversionStep.Operation(rawValue: (sourceDictionary["operation"] as? String) ?? "") 
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [Correlation]
            Decoders.addDecoder(clazz: [Correlation].self) { (source: AnyObject) -> [Correlation] in
                return Decoders.decode(clazz: [Correlation].self, source: source)
            }
            // Decoder for Correlation
            Decoders.addDecoder(clazz: Correlation.self) { (source: AnyObject) -> Correlation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Correlation()
                instance.averageDailyHighCause = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageDailyHighCause"])
                instance.averageDailyLowCause = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageDailyLowCause"])
                instance.averageEffect = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageEffect"])
                instance.averageEffectFollowingHighCause = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageEffectFollowingHighCause"])
                instance.averageEffectFollowingLowCause = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageEffectFollowingLowCause"])
                instance.averageForwardPearsonCorrelationOverOnsetDelays = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageForwardPearsonCorrelationOverOnsetDelays"])
                instance.averageReversePearsonCorrelationOverOnsetDelays = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageReversePearsonCorrelationOverOnsetDelays"])
                instance.averageVote = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["averageVote"])
                instance.causeChanges = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeChanges"])
                instance.causeDataSource = Decoders.decodeOptional(clazz: DataSource.self, source: sourceDictionary["causeDataSource"])
                instance.causeUserVariableShareUserMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeUserVariableShareUserMeasurements"])
                instance.causeVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeVariableCategoryId"])
                instance.causeVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableCategoryName"])
                instance.causeVariableCombinationOperation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableCombinationOperation"])
                instance.causeVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableUnitAbbreviatedName"])
                instance.causeVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeVariableId"])
                instance.causeVariableMostCommonConnectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeVariableMostCommonConnectorId"])
                instance.causeVariableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableName"])
                instance.confidenceInterval = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["confidenceInterval"])
                instance.confidenceLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["confidenceLevel"])
                instance.correlationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["correlationCoefficient"])
                instance.correlationIsContradictoryToOptimalValues = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["correlationIsContradictoryToOptimalValues"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.criticalTValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["criticalTValue"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationOfAction"])
                instance.durationOfActionInHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationOfActionInHours"])
                instance.degreesOfFreedom = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["degreesOfFreedom"])
                instance.effectNumberOfProcessedDailyMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectNumberOfProcessedDailyMeasurements"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.effectChanges = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectChanges"])
                instance.effectDataSource = Decoders.decodeOptional(clazz: DataSource.self, source: sourceDictionary["effectDataSource"])
                instance.effectSize = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectSize"])
                instance.effectUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectUnit"])
                instance.effectUserVariableShareUserMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectUserVariableShareUserMeasurements"])
                instance.effectVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectVariableCategoryId"])
                instance.effectVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableCategoryName"])
                instance.effectVariableCombinationOperation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableCombinationOperation"])
                instance.effectVariableCommonAlias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableCommonAlias"])
                instance.effectVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableUnitAbbreviatedName"])
                instance.effectVariableUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectVariableUnitId"])
                instance.effectVariableUnitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableUnitName"])
                instance.effectVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectVariableId"])
                instance.effectVariableMostCommonConnectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectVariableMostCommonConnectorId"])
                instance.effectVariableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableName"])
                instance.experimentEndTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentEndTime"])
                instance.experimentStartTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentStartTime"])
                instance.forwardSpearmanCorrelationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["forwardSpearmanCorrelationCoefficient"])
                instance.numberOfPairs = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfPairs"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelay"])
                instance.onsetDelayInHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelayInHours"])
                instance.onsetDelayWithStrongestPearsonCorrelation = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelayWithStrongestPearsonCorrelation"])
                instance.onsetDelayWithStrongestPearsonCorrelationInHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelayWithStrongestPearsonCorrelationInHours"])
                instance.optimalPearsonProduct = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["optimalPearsonProduct"])
                instance.outcomeFillingValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outcomeFillingValue"])
                instance.outcomeMaximumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["outcomeMaximumAllowedValue"])
                instance.outcomeMinimumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["outcomeMinimumAllowedValue"])
                instance.pearsonCorrelationWithNoOnsetDelay = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["pearsonCorrelationWithNoOnsetDelay"])
                instance.predictivePearsonCorrelation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["predictivePearsonCorrelation"])
                instance.predictivePearsonCorrelationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["predictivePearsonCorrelationCoefficient"])
                instance.predictorDataSources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["predictorDataSources"])
                instance.predictorFillingValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["predictorFillingValue"])
                instance.predictorMaximumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["predictorMaximumAllowedValue"])
                instance.predictorMinimumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["predictorMinimumAllowedValue"])
                instance.predictsHighEffectChange = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["predictsHighEffectChange"])
                instance.predictsLowEffectChange = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["predictsLowEffectChange"])
                instance.pValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["pValue"])
                instance.qmScore = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qmScore"])
                instance.reversePearsonCorrelationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reversePearsonCorrelationCoefficient"])
                instance.shareUserMeasurements = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shareUserMeasurements"])
                instance.sharingDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sharingDescription"])
                instance.sharingTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sharingTitle"])
                instance.significantDifference = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["significantDifference"])
                instance.statisticalSignificance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["statisticalSignificance"])
                instance.strengthLevel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["strengthLevel"])
                instance.strongestPearsonCorrelationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["strongestPearsonCorrelationCoefficient"])
                instance.studyHtml = Decoders.decodeOptional(clazz: StudyHtml.self, source: sourceDictionary["studyHtml"])
                instance.studyImages = Decoders.decodeOptional(clazz: StudyImages.self, source: sourceDictionary["studyImages"])
                instance.studyLinks = Decoders.decodeOptional(clazz: StudyLinks.self, source: sourceDictionary["studyLinks"])
                instance.studyText = Decoders.decodeOptional(clazz: StudyText.self, source: sourceDictionary["studyText"])
                instance.tValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["tValue"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.userVote = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVote"])
                instance.valuePredictingHighOutcome = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valuePredictingHighOutcome"])
                instance.valuePredictingLowOutcome = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["valuePredictingLowOutcome"])
                instance.outcomeDataSources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outcomeDataSources"])
                instance.principalInvestigator = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["principalInvestigator"])
                instance.reverseCorrelation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reverseCorrelation"])
                instance.averagePearsonCorrelationCoefficientOverOnsetDelays = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["averagePearsonCorrelationCoefficientOverOnsetDelays"])
                instance.causeNumberOfRawMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeNumberOfRawMeasurements"])
                instance.correlationsOverDurationsOfAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationsOverDurationsOfAction"])
                instance.correlationsOverDurationsOfActionChartConfig = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationsOverDurationsOfActionChartConfig"])
                instance.correlationsOverOnsetDelaysChartConfig = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["correlationsOverOnsetDelaysChartConfig"])
                instance.numberOfUsers = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfUsers"])
                instance.rawCauseMeasurementSignificance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rawCauseMeasurementSignificance"])
                instance.rawEffectMeasurementSignificance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["rawEffectMeasurementSignificance"])
                instance.reversePairsCount = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reversePairsCount"])
                instance.voteStatisticalSignificance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voteStatisticalSignificance"])
                instance.aggregateQMScore = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["aggregateQMScore"])
                instance.forwardPearsonCorrelationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["forwardPearsonCorrelationCoefficient"])
                instance.numberOfCorrelations = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfCorrelations"])
                instance.vote = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vote"])
                return instance
            }


            // Decoder for [DataSource]
            Decoders.addDecoder(clazz: [DataSource].self) { (source: AnyObject) -> [DataSource] in
                return Decoders.decode(clazz: [DataSource].self, source: source)
            }
            // Decoder for DataSource
            Decoders.addDecoder(clazz: DataSource.self) { (source: AnyObject) -> DataSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DataSource()
                instance.affiliate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["affiliate"])
                instance.connectorClientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectorClientId"])
                instance.defaultVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultVariableCategoryName"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.enabled = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["enabled"])
                instance.getItUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["getItUrl"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.imageHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageHtml"])
                instance.linkedDisplayNameHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linkedDisplayNameHtml"])
                instance.longDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longDescription"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"])
                return instance
            }


            // Decoder for [DeviceToken]
            Decoders.addDecoder(clazz: [DeviceToken].self) { (source: AnyObject) -> [DeviceToken] in
                return Decoders.decode(clazz: [DeviceToken].self, source: source)
            }
            // Decoder for DeviceToken
            Decoders.addDecoder(clazz: DeviceToken.self) { (source: AnyObject) -> DeviceToken in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeviceToken()
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.platform = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["platform"])
                instance.deviceToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceToken"])
                return instance
            }


            // Decoder for [Explanation]
            Decoders.addDecoder(clazz: [Explanation].self) { (source: AnyObject) -> [Explanation] in
                return Decoders.decode(clazz: [Explanation].self, source: source)
            }
            // Decoder for Explanation
            Decoders.addDecoder(clazz: Explanation.self) { (source: AnyObject) -> Explanation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Explanation()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.image = Decoders.decodeOptional(clazz: Image.self, source: sourceDictionary["image"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.startTracking = Decoders.decodeOptional(clazz: ExplanationStartTracking.self, source: sourceDictionary["startTracking"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.html = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["html"])
                return instance
            }


            // Decoder for [ExplanationStartTracking]
            Decoders.addDecoder(clazz: [ExplanationStartTracking].self) { (source: AnyObject) -> [ExplanationStartTracking] in
                return Decoders.decode(clazz: [ExplanationStartTracking].self, source: source)
            }
            // Decoder for ExplanationStartTracking
            Decoders.addDecoder(clazz: ExplanationStartTracking.self) { (source: AnyObject) -> ExplanationStartTracking in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExplanationStartTracking()
                instance.button = Decoders.decodeOptional(clazz: Button.self, source: sourceDictionary["button"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }


            // Decoder for [GetConnectorsResponse]
            Decoders.addDecoder(clazz: [GetConnectorsResponse].self) { (source: AnyObject) -> [GetConnectorsResponse] in
                return Decoders.decode(clazz: [GetConnectorsResponse].self, source: source)
            }
            // Decoder for GetConnectorsResponse
            Decoders.addDecoder(clazz: GetConnectorsResponse.self) { (source: AnyObject) -> GetConnectorsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetConnectorsResponse()
                instance.connectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["connectors"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [GetCorrelationsDataResponse]
            Decoders.addDecoder(clazz: [GetCorrelationsDataResponse].self) { (source: AnyObject) -> [GetCorrelationsDataResponse] in
                return Decoders.decode(clazz: [GetCorrelationsDataResponse].self, source: source)
            }
            // Decoder for GetCorrelationsDataResponse
            Decoders.addDecoder(clazz: GetCorrelationsDataResponse.self) { (source: AnyObject) -> GetCorrelationsDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorrelationsDataResponse()
                instance.correlations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["correlations"])
                instance.explanation = Decoders.decodeOptional(clazz: Explanation.self, source: sourceDictionary["explanation"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [GetCorrelationsResponse]
            Decoders.addDecoder(clazz: [GetCorrelationsResponse].self) { (source: AnyObject) -> [GetCorrelationsResponse] in
                return Decoders.decode(clazz: [GetCorrelationsResponse].self, source: source)
            }
            // Decoder for GetCorrelationsResponse
            Decoders.addDecoder(clazz: GetCorrelationsResponse.self) { (source: AnyObject) -> GetCorrelationsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorrelationsResponse()
                instance.data = Decoders.decodeOptional(clazz: GetCorrelationsDataResponse.self, source: sourceDictionary["data"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [GetSharesResponse]
            Decoders.addDecoder(clazz: [GetSharesResponse].self) { (source: AnyObject) -> [GetSharesResponse] in
                return Decoders.decode(clazz: [GetSharesResponse].self, source: source)
            }
            // Decoder for GetSharesResponse
            Decoders.addDecoder(clazz: GetSharesResponse.self) { (source: AnyObject) -> GetSharesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSharesResponse()
                instance.authorizedClients = Decoders.decodeOptional(clazz: AuthorizedClients.self, source: sourceDictionary["authorizedClients"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [GetStudiesResponse]
            Decoders.addDecoder(clazz: [GetStudiesResponse].self) { (source: AnyObject) -> [GetStudiesResponse] in
                return Decoders.decode(clazz: [GetStudiesResponse].self, source: source)
            }
            // Decoder for GetStudiesResponse
            Decoders.addDecoder(clazz: GetStudiesResponse.self) { (source: AnyObject) -> GetStudiesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetStudiesResponse()
                instance.studies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["studies"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [GetTrackingReminderNotificationsResponse]
            Decoders.addDecoder(clazz: [GetTrackingReminderNotificationsResponse].self) { (source: AnyObject) -> [GetTrackingReminderNotificationsResponse] in
                return Decoders.decode(clazz: [GetTrackingReminderNotificationsResponse].self, source: source)
            }
            // Decoder for GetTrackingReminderNotificationsResponse
            Decoders.addDecoder(clazz: GetTrackingReminderNotificationsResponse.self) { (source: AnyObject) -> GetTrackingReminderNotificationsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetTrackingReminderNotificationsResponse()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [Image]
            Decoders.addDecoder(clazz: [Image].self) { (source: AnyObject) -> [Image] in
                return Decoders.decode(clazz: [Image].self, source: source)
            }
            // Decoder for Image
            Decoders.addDecoder(clazz: Image.self) { (source: AnyObject) -> Image in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Image()
                instance.height = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["height"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.width = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["width"])
                return instance
            }


            // Decoder for [JsonErrorResponse]
            Decoders.addDecoder(clazz: [JsonErrorResponse].self) { (source: AnyObject) -> [JsonErrorResponse] in
                return Decoders.decode(clazz: [JsonErrorResponse].self, source: source)
            }
            // Decoder for JsonErrorResponse
            Decoders.addDecoder(clazz: JsonErrorResponse.self) { (source: AnyObject) -> JsonErrorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JsonErrorResponse()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [Measurement]
            Decoders.addDecoder(clazz: [Measurement].self) { (source: AnyObject) -> [Measurement] in
                return Decoders.decode(clazz: [Measurement].self, source: source)
            }
            // Decoder for Measurement
            Decoders.addDecoder(clazz: Measurement.self) { (source: AnyObject) -> Measurement in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Measurement()
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.connectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["connectorId"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.displayValueAndUnitString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayValueAndUnitString"])
                instance.iconIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconIcon"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inputType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputType"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumAllowedValue"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumAllowedValue"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.noteObject = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["noteObject"])
                instance.noteHtml = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["noteHtml"])
                instance.originalUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["originalUnitId"])
                instance.originalValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["originalValue"])
                instance.pngPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngPath"])
                instance.pngUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngUrl"])
                instance.productUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productUrl"])
                instance.sourceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceName"])
                instance.startDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startDate"])
                instance.startTimeEpoch = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startTimeEpoch"])
                instance.startTimeString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTimeString"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.unitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitCategoryId"])
                instance.unitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCategoryName"])
                instance.unitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitId"])
                instance.unitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitName"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.userVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitAbbreviatedName"])
                instance.userVariableUnitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitCategoryId"])
                instance.userVariableUnitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitCategoryName"])
                instance.userVariableUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitId"])
                instance.userVariableUnitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitName"])
                instance.userVariableVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableVariableCategoryId"])
                instance.userVariableVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableVariableCategoryName"])
                instance.valence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valence"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.variableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableCategoryId"])
                instance.variableCategoryImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryImageUrl"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableDescription"])
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                return instance
            }


            // Decoder for [MeasurementDelete]
            Decoders.addDecoder(clazz: [MeasurementDelete].self) { (source: AnyObject) -> [MeasurementDelete] in
                return Decoders.decode(clazz: [MeasurementDelete].self, source: source)
            }
            // Decoder for MeasurementDelete
            Decoders.addDecoder(clazz: MeasurementDelete.self) { (source: AnyObject) -> MeasurementDelete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementDelete()
                instance.startTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startTime"])
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                instance.connectorName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectorName"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                return instance
            }


            // Decoder for [MeasurementItem]
            Decoders.addDecoder(clazz: [MeasurementItem].self) { (source: AnyObject) -> [MeasurementItem] in
                return Decoders.decode(clazz: [MeasurementItem].self, source: source)
            }
            // Decoder for MeasurementItem
            Decoders.addDecoder(clazz: MeasurementItem.self) { (source: AnyObject) -> MeasurementItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementItem()
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["timestamp"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [MeasurementSet]
            Decoders.addDecoder(clazz: [MeasurementSet].self) { (source: AnyObject) -> [MeasurementSet] in
                return Decoders.decode(clazz: [MeasurementSet].self, source: source)
            }
            // Decoder for MeasurementSet
            Decoders.addDecoder(clazz: MeasurementSet.self) { (source: AnyObject) -> MeasurementSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementSet()
                instance.combinationOperation = MeasurementSet.CombinationOperation(rawValue: (sourceDictionary["combinationOperation"] as? String) ?? "") 
                instance.measurementItems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["measurementItems"])
                instance.sourceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sourceName"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance.upc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upc"])
                return instance
            }


            // Decoder for [MeasurementUpdate]
            Decoders.addDecoder(clazz: [MeasurementUpdate].self) { (source: AnyObject) -> [MeasurementUpdate] in
                return Decoders.decode(clazz: [MeasurementUpdate].self, source: source)
            }
            // Decoder for MeasurementUpdate
            Decoders.addDecoder(clazz: MeasurementUpdate.self) { (source: AnyObject) -> MeasurementUpdate in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementUpdate()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.startTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["startTime"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [Pair]
            Decoders.addDecoder(clazz: [Pair].self) { (source: AnyObject) -> [Pair] in
                return Decoders.decode(clazz: [Pair].self, source: source)
            }
            // Decoder for Pair
            Decoders.addDecoder(clazz: Pair.self) { (source: AnyObject) -> Pair in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pair()
                instance.causeMeasurement = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["causeMeasurement"])
                instance.causeMeasurementValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["causeMeasurementValue"])
                instance.causeVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableUnitAbbreviatedName"])
                instance.effectMeasurement = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["effectMeasurement"])
                instance.effectMeasurementValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["effectMeasurementValue"])
                instance.effectVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableUnitAbbreviatedName"])
                instance.eventAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["eventAt"])
                instance.eventAtUnixTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["eventAtUnixTime"])
                instance.startTimeString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTimeString"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                return instance
            }


            // Decoder for [ParticipantInstruction]
            Decoders.addDecoder(clazz: [ParticipantInstruction].self) { (source: AnyObject) -> [ParticipantInstruction] in
                return Decoders.decode(clazz: [ParticipantInstruction].self, source: source)
            }
            // Decoder for ParticipantInstruction
            Decoders.addDecoder(clazz: ParticipantInstruction.self) { (source: AnyObject) -> ParticipantInstruction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ParticipantInstruction()
                instance.instructionsForCauseVariable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["instructionsForCauseVariable"])
                instance.instructionsForEffectVariable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["instructionsForEffectVariable"])
                return instance
            }


            // Decoder for [PostCorrelation]
            Decoders.addDecoder(clazz: [PostCorrelation].self) { (source: AnyObject) -> [PostCorrelation] in
                return Decoders.decode(clazz: [PostCorrelation].self, source: source)
            }
            // Decoder for PostCorrelation
            Decoders.addDecoder(clazz: PostCorrelation.self) { (source: AnyObject) -> PostCorrelation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCorrelation()
                instance.causeVariableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableName"])
                instance.correlation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["correlation"])
                instance.effectVariableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableName"])
                instance.vote = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["vote"])
                return instance
            }


            // Decoder for [PostMeasurementsDataResponse]
            Decoders.addDecoder(clazz: [PostMeasurementsDataResponse].self) { (source: AnyObject) -> [PostMeasurementsDataResponse] in
                return Decoders.decode(clazz: [PostMeasurementsDataResponse].self, source: source)
            }
            // Decoder for PostMeasurementsDataResponse
            Decoders.addDecoder(clazz: PostMeasurementsDataResponse.self) { (source: AnyObject) -> PostMeasurementsDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostMeasurementsDataResponse()
                instance.userVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userVariables"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostMeasurementsResponse]
            Decoders.addDecoder(clazz: [PostMeasurementsResponse].self) { (source: AnyObject) -> [PostMeasurementsResponse] in
                return Decoders.decode(clazz: [PostMeasurementsResponse].self, source: source)
            }
            // Decoder for PostMeasurementsResponse
            Decoders.addDecoder(clazz: PostMeasurementsResponse.self) { (source: AnyObject) -> PostMeasurementsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostMeasurementsResponse()
                instance.data = Decoders.decodeOptional(clazz: PostMeasurementsDataResponse.self, source: sourceDictionary["data"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostStudyCreateResponse]
            Decoders.addDecoder(clazz: [PostStudyCreateResponse].self) { (source: AnyObject) -> [PostStudyCreateResponse] in
                return Decoders.decode(clazz: [PostStudyCreateResponse].self, source: source)
            }
            // Decoder for PostStudyCreateResponse
            Decoders.addDecoder(clazz: PostStudyCreateResponse.self) { (source: AnyObject) -> PostStudyCreateResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostStudyCreateResponse()
                instance.study = Decoders.decodeOptional(clazz: Study.self, source: sourceDictionary["study"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostStudyPublishResponse]
            Decoders.addDecoder(clazz: [PostStudyPublishResponse].self) { (source: AnyObject) -> [PostStudyPublishResponse] in
                return Decoders.decode(clazz: [PostStudyPublishResponse].self, source: source)
            }
            // Decoder for PostStudyPublishResponse
            Decoders.addDecoder(clazz: PostStudyPublishResponse.self) { (source: AnyObject) -> PostStudyPublishResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostStudyPublishResponse()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostTrackingRemindersDataResponse]
            Decoders.addDecoder(clazz: [PostTrackingRemindersDataResponse].self) { (source: AnyObject) -> [PostTrackingRemindersDataResponse] in
                return Decoders.decode(clazz: [PostTrackingRemindersDataResponse].self, source: source)
            }
            // Decoder for PostTrackingRemindersDataResponse
            Decoders.addDecoder(clazz: PostTrackingRemindersDataResponse.self) { (source: AnyObject) -> PostTrackingRemindersDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostTrackingRemindersDataResponse()
                instance.trackingReminderNotifications = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trackingReminderNotifications"])
                instance.trackingReminders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trackingReminders"])
                instance.userVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userVariables"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostTrackingRemindersResponse]
            Decoders.addDecoder(clazz: [PostTrackingRemindersResponse].self) { (source: AnyObject) -> [PostTrackingRemindersResponse] in
                return Decoders.decode(clazz: [PostTrackingRemindersResponse].self, source: source)
            }
            // Decoder for PostTrackingRemindersResponse
            Decoders.addDecoder(clazz: PostTrackingRemindersResponse.self) { (source: AnyObject) -> PostTrackingRemindersResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostTrackingRemindersResponse()
                instance.data = Decoders.decodeOptional(clazz: PostTrackingRemindersDataResponse.self, source: sourceDictionary["data"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostUserSettingsDataResponse]
            Decoders.addDecoder(clazz: [PostUserSettingsDataResponse].self) { (source: AnyObject) -> [PostUserSettingsDataResponse] in
                return Decoders.decode(clazz: [PostUserSettingsDataResponse].self, source: source)
            }
            // Decoder for PostUserSettingsDataResponse
            Decoders.addDecoder(clazz: PostUserSettingsDataResponse.self) { (source: AnyObject) -> PostUserSettingsDataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUserSettingsDataResponse()
                instance.purchaseId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["purchaseId"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [PostUserSettingsResponse]
            Decoders.addDecoder(clazz: [PostUserSettingsResponse].self) { (source: AnyObject) -> [PostUserSettingsResponse] in
                return Decoders.decode(clazz: [PostUserSettingsResponse].self, source: source)
            }
            // Decoder for PostUserSettingsResponse
            Decoders.addDecoder(clazz: PostUserSettingsResponse.self) { (source: AnyObject) -> PostUserSettingsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUserSettingsResponse()
                instance.data = Decoders.decodeOptional(clazz: PostUserSettingsDataResponse.self, source: sourceDictionary["data"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.summary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["summary"])
                return instance
            }


            // Decoder for [Scope]
            Decoders.addDecoder(clazz: [Scope].self) { (source: AnyObject) -> [Scope] in
                return Decoders.decode(clazz: [Scope].self, source: source)
            }
            // Decoder for Scope
            Decoders.addDecoder(clazz: Scope.self) { (source: AnyObject) -> Scope in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Scope()
                instance.scalar = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scalar"])
                return instance
            }


            // Decoder for [ShareInvitationBody]
            Decoders.addDecoder(clazz: [ShareInvitationBody].self) { (source: AnyObject) -> [ShareInvitationBody] in
                return Decoders.decode(clazz: [ShareInvitationBody].self, source: source)
            }
            // Decoder for ShareInvitationBody
            Decoders.addDecoder(clazz: ShareInvitationBody.self) { (source: AnyObject) -> ShareInvitationBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ShareInvitationBody()
                instance.emailAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailAddress"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.emailSubject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailSubject"])
                instance.emailBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailBody"])
                instance.scopes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scopes"])
                return instance
            }


            // Decoder for [Study]
            Decoders.addDecoder(clazz: [Study].self) { (source: AnyObject) -> [Study] in
                return Decoders.decode(clazz: [Study].self, source: source)
            }
            // Decoder for Study
            Decoders.addDecoder(clazz: Study.self) { (source: AnyObject) -> Study in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Study()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.studyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyId"])
                instance.causeVariable = Decoders.decodeOptional(clazz: Variable.self, source: sourceDictionary["causeVariable"])
                instance.studyCharts = Decoders.decodeOptional(clazz: StudyCharts.self, source: sourceDictionary["studyCharts"])
                instance.effectVariable = Decoders.decodeOptional(clazz: Variable.self, source: sourceDictionary["effectVariable"])
                instance.participantInstructions = Decoders.decodeOptional(clazz: ParticipantInstruction.self, source: sourceDictionary["participantInstructions"])
                instance.statistics = Decoders.decodeOptional(clazz: Correlation.self, source: sourceDictionary["statistics"])
                instance.studyHtml = Decoders.decodeOptional(clazz: StudyHtml.self, source: sourceDictionary["studyHtml"])
                instance.studyImages = Decoders.decodeOptional(clazz: StudyImages.self, source: sourceDictionary["studyImages"])
                instance.studyLinks = Decoders.decodeOptional(clazz: StudyLinks.self, source: sourceDictionary["studyLinks"])
                instance.studyText = Decoders.decodeOptional(clazz: StudyText.self, source: sourceDictionary["studyText"])
                return instance
            }


            // Decoder for [StudyCharts]
            Decoders.addDecoder(clazz: [StudyCharts].self) { (source: AnyObject) -> [StudyCharts] in
                return Decoders.decode(clazz: [StudyCharts].self, source: source)
            }
            // Decoder for StudyCharts
            Decoders.addDecoder(clazz: StudyCharts.self) { (source: AnyObject) -> StudyCharts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StudyCharts()
                instance.populationTraitScatterPlot = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["populationTraitScatterPlot"])
                instance.outcomeDistributionColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["outcomeDistributionColumnChart"])
                instance.predictorDistributionColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["predictorDistributionColumnChart"])
                instance.correlationScatterPlot = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["correlationScatterPlot"])
                instance.pairsOverTimeLineChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["pairsOverTimeLineChart"])
                return instance
            }


            // Decoder for [StudyHtml]
            Decoders.addDecoder(clazz: [StudyHtml].self) { (source: AnyObject) -> [StudyHtml] in
                return Decoders.decode(clazz: [StudyHtml].self, source: source)
            }
            // Decoder for StudyHtml
            Decoders.addDecoder(clazz: StudyHtml.self) { (source: AnyObject) -> StudyHtml in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StudyHtml()
                instance.chartHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartHtml"])
                instance.downloadButtonsHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["downloadButtonsHtml"])
                instance.fullPageWithHead = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullPageWithHead"])
                instance.fullStudyHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullStudyHtml"])
                instance.fullStudyHtmlWithCssStyles = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullStudyHtmlWithCssStyles"])
                instance.statisticsTableHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statisticsTableHtml"])
                instance.studyAbstractHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyAbstractHtml"])
                instance.studyHeaderHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyHeaderHtml"])
                instance.studyImageHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyImageHtml"])
                instance.studyMetaHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyMetaHtml"])
                instance.studyTextHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyTextHtml"])
                instance.socialSharingButtonHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["socialSharingButtonHtml"])
                instance.studySummaryBoxHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studySummaryBoxHtml"])
                return instance
            }


            // Decoder for [StudyImages]
            Decoders.addDecoder(clazz: [StudyImages].self) { (source: AnyObject) -> [StudyImages] in
                return Decoders.decode(clazz: [StudyImages].self, source: source)
            }
            // Decoder for StudyImages
            Decoders.addDecoder(clazz: StudyImages.self) { (source: AnyObject) -> StudyImages in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StudyImages()
                instance.causeVariableImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableImageUrl"])
                instance.causeVariableIonIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeVariableIonIcon"])
                instance.effectVariableImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableImageUrl"])
                instance.effectVariableIonIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectVariableIonIcon"])
                instance.gaugeImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gaugeImage"])
                instance.gaugeImageSquare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gaugeImageSquare"])
                instance.gaugeSharingImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gaugeSharingImageUrl"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.robotSharingImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["robotSharingImageUrl"])
                return instance
            }


            // Decoder for [StudyLinks]
            Decoders.addDecoder(clazz: [StudyLinks].self) { (source: AnyObject) -> [StudyLinks] in
                return Decoders.decode(clazz: [StudyLinks].self, source: source)
            }
            // Decoder for StudyLinks
            Decoders.addDecoder(clazz: StudyLinks.self) { (source: AnyObject) -> StudyLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StudyLinks()
                instance.studyLinkEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkEmail"])
                instance.studyLinkFacebook = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkFacebook"])
                instance.studyLinkGoogle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkGoogle"])
                instance.studyLinkStatic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkStatic"])
                instance.studyLinkDynamic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkDynamic"])
                instance.studyLinkTwitter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLinkTwitter"])
                return instance
            }


            // Decoder for [StudyText]
            Decoders.addDecoder(clazz: [StudyText].self) { (source: AnyObject) -> [StudyText] in
                return Decoders.decode(clazz: [StudyText].self, source: source)
            }
            // Decoder for StudyText
            Decoders.addDecoder(clazz: StudyText.self) { (source: AnyObject) -> StudyText in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StudyText()
                instance.averageEffectFollowingHighCauseExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["averageEffectFollowingHighCauseExplanation"])
                instance.averageEffectFollowingLowCauseExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["averageEffectFollowingLowCauseExplanation"])
                instance.valuePredictingHighOutcomeExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valuePredictingHighOutcomeExplanation"])
                instance.valuePredictingLowOutcomeExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valuePredictingLowOutcomeExplanation"])
                instance.dataAnalysis = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataAnalysis"])
                instance.dataSources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataSources"])
                instance.dataSourcesParagraphForCause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataSourcesParagraphForCause"])
                instance.dataSourcesParagraphForEffect = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataSourcesParagraphForEffect"])
                instance.lastCauseDailyValueSentenceExtended = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastCauseDailyValueSentenceExtended"])
                instance.lastCauseAndOptimalValueSentence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastCauseAndOptimalValueSentence"])
                instance.lastCauseDailyValueSentence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastCauseDailyValueSentence"])
                instance.optimalDailyValueSentence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["optimalDailyValueSentence"])
                instance.predictorExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["predictorExplanation"])
                instance.significanceExplanation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["significanceExplanation"])
                instance.studyAbstract = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyAbstract"])
                instance.studyDesign = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyDesign"])
                instance.studyLimitations = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyLimitations"])
                instance.studyObjective = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyObjective"])
                instance.studyResults = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyResults"])
                instance.studyTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyTitle"])
                instance.studyInvitation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyInvitation"])
                instance.studyQuestion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyQuestion"])
                instance.studyBackground = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["studyBackground"])
                return instance
            }


            // Decoder for [TrackingReminder]
            Decoders.addDecoder(clazz: [TrackingReminder].self) { (source: AnyObject) -> [TrackingReminder] in
                return Decoders.decode(clazz: [TrackingReminder].self, source: source)
            }
            // Decoder for TrackingReminder
            Decoders.addDecoder(clazz: TrackingReminder.self) { (source: AnyObject) -> TrackingReminder in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminder()
                instance.actionArray = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionArray"])
                instance.availableUnits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["availableUnits"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.combinationOperation = TrackingReminder.CombinationOperation(rawValue: (sourceDictionary["combinationOperation"] as? String) ?? "") 
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.unitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitCategoryId"])
                instance.unitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCategoryName"])
                instance.unitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitId"])
                instance.unitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitName"])
                instance.defaultValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["defaultValue"])
                instance.email = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["email"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.fillingValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fillingValue"])
                instance.firstDailyReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstDailyReminderTime"])
                instance.frequencyTextDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frequencyTextDescription"])
                instance.frequencyTextDescriptionWithTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frequencyTextDescriptionWithTime"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inputType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputType"])
                instance.instructions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["instructions"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.lastTracked = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastTracked"])
                instance.lastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lastValue"])
                instance.latestTrackingReminderNotificationReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestTrackingReminderNotificationReminderTime"])
                instance.localDailyReminderNotificationTimes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["localDailyReminderNotificationTimes"])
                instance.localDailyReminderNotificationTimesForAllReminders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["localDailyReminderNotificationTimesForAllReminders"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumAllowedValue"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumAllowedValue"])
                instance.nextReminderTimeEpochSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextReminderTimeEpochSeconds"])
                instance.notificationBar = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["notificationBar"])
                instance.numberOfRawMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfRawMeasurements"])
                instance.numberOfUniqueValues = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUniqueValues"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.pngPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngPath"])
                instance.pngUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngUrl"])
                instance.productUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productUrl"])
                instance.popUp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["popUp"])
                instance.question = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question"])
                instance.reminderEndTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderEndTime"])
                instance.reminderFrequency = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reminderFrequency"])
                instance.reminderSound = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderSound"])
                instance.reminderStartEpochSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reminderStartEpochSeconds"])
                instance.reminderStartTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderStartTime"])
                instance.reminderStartTimeLocal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderStartTimeLocal"])
                instance.reminderStartTimeLocalHumanFormatted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderStartTimeLocalHumanFormatted"])
                instance.repeating = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["repeating"])
                instance.secondDailyReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secondDailyReminderTime"])
                instance.secondToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["secondToLastValue"])
                instance.sms = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sms"])
                instance.startTrackingDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTrackingDate"])
                instance.stopTrackingDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stopTrackingDate"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.thirdDailyReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thirdDailyReminderTime"])
                instance.thirdToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["thirdToLastValue"])
                instance.trackingReminderId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trackingReminderId"])
                instance.trackingReminderImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingReminderImageUrl"])
                instance.upc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upc"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.userVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitAbbreviatedName"])
                instance.userVariableUnitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitCategoryId"])
                instance.userVariableUnitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitCategoryName"])
                instance.userVariableUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitId"])
                instance.userVariableUnitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitName"])
                instance.userVariableVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableVariableCategoryId"])
                instance.userVariableVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableVariableCategoryName"])
                instance.valence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valence"])
                instance.valueAndFrequencyTextDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueAndFrequencyTextDescription"])
                instance.valueAndFrequencyTextDescriptionWithTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valueAndFrequencyTextDescriptionWithTime"])
                instance.variableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableCategoryId"])
                instance.variableCategoryImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryImageUrl"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableDescription"])
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                return instance
            }


            // Decoder for [TrackingReminderDelete]
            Decoders.addDecoder(clazz: [TrackingReminderDelete].self) { (source: AnyObject) -> [TrackingReminderDelete] in
                return Decoders.decode(clazz: [TrackingReminderDelete].self, source: source)
            }
            // Decoder for TrackingReminderDelete
            Decoders.addDecoder(clazz: TrackingReminderDelete.self) { (source: AnyObject) -> TrackingReminderDelete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminderDelete()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [TrackingReminderNotification]
            Decoders.addDecoder(clazz: [TrackingReminderNotification].self) { (source: AnyObject) -> [TrackingReminderNotification] in
                return Decoders.decode(clazz: [TrackingReminderNotification].self, source: source)
            }
            // Decoder for TrackingReminderNotification
            Decoders.addDecoder(clazz: TrackingReminderNotification.self) { (source: AnyObject) -> TrackingReminderNotification in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminderNotification()
                instance.actionArray = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionArray"])
                instance.availableUnits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["availableUnits"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.combinationOperation = TrackingReminderNotification.CombinationOperation(rawValue: (sourceDictionary["combinationOperation"] as? String) ?? "") 
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.modifiedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["modifiedValue"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.unitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitCategoryId"])
                instance.unitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCategoryName"])
                instance.unitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitId"])
                instance.unitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitName"])
                instance.defaultValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["defaultValue"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.email = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["email"])
                instance.fillingValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fillingValue"])
                instance.iconIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconIcon"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.inputType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputType"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.lastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lastValue"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumAllowedValue"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumAllowedValue"])
                instance.mostCommonValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["mostCommonValue"])
                instance.notificationBar = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["notificationBar"])
                instance.notifiedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notifiedAt"])
                instance.numberOfUniqueValues = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUniqueValues"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.pngPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngPath"])
                instance.pngUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngUrl"])
                instance.popUp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["popUp"])
                instance.productUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productUrl"])
                instance.question = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["question"])
                instance.reminderEndTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderEndTime"])
                instance.reminderFrequency = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reminderFrequency"])
                instance.reminderSound = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderSound"])
                instance.reminderStartTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderStartTime"])
                instance.reminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reminderTime"])
                instance.secondMostCommonValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["secondMostCommonValue"])
                instance.secondToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["secondToLastValue"])
                instance.sms = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sms"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.thirdMostCommonValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["thirdMostCommonValue"])
                instance.thirdToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["thirdToLastValue"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.total = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["total"])
                instance.trackAllActions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["trackAllActions"])
                instance.trackingReminderId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trackingReminderId"])
                instance.trackingReminderImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingReminderImageUrl"])
                instance.trackingReminderNotificationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trackingReminderNotificationId"])
                instance.trackingReminderNotificationTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingReminderNotificationTime"])
                instance.trackingReminderNotificationTimeEpoch = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["trackingReminderNotificationTimeEpoch"])
                instance.trackingReminderNotificationTimeLocal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingReminderNotificationTimeLocal"])
                instance.trackingReminderNotificationTimeLocalHumanString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trackingReminderNotificationTimeLocalHumanString"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.userVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitAbbreviatedName"])
                instance.userVariableUnitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitCategoryId"])
                instance.userVariableUnitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitCategoryName"])
                instance.userVariableUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitId"])
                instance.userVariableUnitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitName"])
                instance.userVariableVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableVariableCategoryId"])
                instance.userVariableVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableVariableCategoryName"])
                instance.valence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valence"])
                instance.variableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableCategoryId"])
                instance.variableCategoryImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryImageUrl"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                instance.variableImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableImageUrl"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                return instance
            }


            // Decoder for [TrackingReminderNotificationAction]
            Decoders.addDecoder(clazz: [TrackingReminderNotificationAction].self) { (source: AnyObject) -> [TrackingReminderNotificationAction] in
                return Decoders.decode(clazz: [TrackingReminderNotificationAction].self, source: source)
            }
            // Decoder for TrackingReminderNotificationAction
            Decoders.addDecoder(clazz: TrackingReminderNotificationAction.self) { (source: AnyObject) -> TrackingReminderNotificationAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminderNotificationAction()
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.callback = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callback"])
                instance.modifiedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["modifiedValue"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.longTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["longTitle"])
                instance.shortTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortTitle"])
                return instance
            }


            // Decoder for [TrackingReminderNotificationPost]
            Decoders.addDecoder(clazz: [TrackingReminderNotificationPost].self) { (source: AnyObject) -> [TrackingReminderNotificationPost] in
                return Decoders.decode(clazz: [TrackingReminderNotificationPost].self, source: source)
            }
            // Decoder for TrackingReminderNotificationPost
            Decoders.addDecoder(clazz: TrackingReminderNotificationPost.self) { (source: AnyObject) -> TrackingReminderNotificationPost in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminderNotificationPost()
                instance.action = TrackingReminderNotificationPost.Action(rawValue: (sourceDictionary["action"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["id"])
                instance.modifiedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["modifiedValue"])
                return instance
            }


            // Decoder for [TrackingReminderNotificationTrackAllAction]
            Decoders.addDecoder(clazz: [TrackingReminderNotificationTrackAllAction].self) { (source: AnyObject) -> [TrackingReminderNotificationTrackAllAction] in
                return Decoders.decode(clazz: [TrackingReminderNotificationTrackAllAction].self, source: source)
            }
            // Decoder for TrackingReminderNotificationTrackAllAction
            Decoders.addDecoder(clazz: TrackingReminderNotificationTrackAllAction.self) { (source: AnyObject) -> TrackingReminderNotificationTrackAllAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TrackingReminderNotificationTrackAllAction()
                instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"])
                instance.callback = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callback"])
                instance.modifiedValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["modifiedValue"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }


            // Decoder for [Unit]
            Decoders.addDecoder(clazz: [Unit].self) { (source: AnyObject) -> [Unit] in
                return Decoders.decode(clazz: [Unit].self, source: source)
            }
            // Decoder for Unit
            Decoders.addDecoder(clazz: Unit.self) { (source: AnyObject) -> Unit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Unit()
                instance.abbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbreviatedName"])
                instance.advanced = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["advanced"])
                instance.category = Unit.Category(rawValue: (sourceDictionary["category"] as? String) ?? "") 
                instance.categoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["categoryId"])
                instance.categoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["categoryName"])
                instance.conversionSteps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversionSteps"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maximumAllowedValue"])
                instance.maximumValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["maximumValue"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["minimumAllowedValue"])
                instance.minimumValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["minimumValue"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.unitCategory = Decoders.decodeOptional(clazz: UnitCategory.self, source: sourceDictionary["unitCategory"])
                return instance
            }


            // Decoder for [UnitCategory]
            Decoders.addDecoder(clazz: [UnitCategory].self) { (source: AnyObject) -> [UnitCategory] in
                return Decoders.decode(clazz: [UnitCategory].self, source: source)
            }
            // Decoder for UnitCategory
            Decoders.addDecoder(clazz: UnitCategory.self) { (source: AnyObject) -> UnitCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UnitCategory()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.standardUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["standardUnitAbbreviatedName"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.accessToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessToken"])
                instance.accessTokenExpires = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessTokenExpires"])
                instance.accessTokenExpiresAtMilliseconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["accessTokenExpiresAtMilliseconds"])
                instance.administrator = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["administrator"])
                instance.authorizedClients = Decoders.decodeOptional(clazz: AuthorizedClients.self, source: sourceDictionary["authorizedClients"])
                instance.avatar = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatar"])
                instance.avatarImage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["avatarImage"])
                instance.capabilities = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["capabilities"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.clientUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientUserId"])
                instance.combineNotifications = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["combineNotifications"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.earliestReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["earliestReminderTime"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["firstName"])
                instance.getPreviewBuilds = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["getPreviewBuilds"])
                instance.hasAndroidApp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasAndroidApp"])
                instance.hasChromeExtension = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasChromeExtension"])
                instance.hasIosApp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasIosApp"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.lastFour = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastFour"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastName"])
                instance.lastSmsTrackingReminderNotificationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastSmsTrackingReminderNotificationId"])
                instance.latestReminderTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestReminderTime"])
                instance.loginName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loginName"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.phoneVerificationCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneVerificationCode"])
                instance.pushNotificationsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pushNotificationsEnabled"])
                instance.refreshToken = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["refreshToken"])
                instance.roles = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roles"])
                instance.sendPredictorEmails = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sendPredictorEmails"])
                instance.sendReminderNotificationEmails = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sendReminderNotificationEmails"])
                instance.shareAllData = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shareAllData"])
                instance.smsNotificationsEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["smsNotificationsEnabled"])
                instance.stripeActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stripeActive"])
                instance.stripeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stripeId"])
                instance.stripePlan = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stripePlan"])
                instance.stripeSubscription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["stripeSubscription"])
                instance.subscriptionEndsAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionEndsAt"])
                instance.subscriptionProvider = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subscriptionProvider"])
                instance.timeZoneOffset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeZoneOffset"])
                instance.trackLocation = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["trackLocation"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.userRegistered = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userRegistered"])
                instance.userUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userUrl"])
                return instance
            }


            // Decoder for [UserTag]
            Decoders.addDecoder(clazz: [UserTag].self) { (source: AnyObject) -> [UserTag] in
                return Decoders.decode(clazz: [UserTag].self, source: source)
            }
            // Decoder for UserTag
            Decoders.addDecoder(clazz: UserTag.self) { (source: AnyObject) -> UserTag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserTag()
                instance.conversionFactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["conversionFactor"])
                instance.taggedVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["taggedVariableId"])
                instance.tagVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tagVariableId"])
                return instance
            }


            // Decoder for [UserVariableDelete]
            Decoders.addDecoder(clazz: [UserVariableDelete].self) { (source: AnyObject) -> [UserVariableDelete] in
                return Decoders.decode(clazz: [UserVariableDelete].self, source: source)
            }
            // Decoder for UserVariableDelete
            Decoders.addDecoder(clazz: UserVariableDelete.self) { (source: AnyObject) -> UserVariableDelete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserVariableDelete()
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                return instance
            }


            // Decoder for [Variable]
            Decoders.addDecoder(clazz: [Variable].self) { (source: AnyObject) -> [Variable] in
                return Decoders.decode(clazz: [Variable].self, source: source)
            }
            // Decoder for Variable
            Decoders.addDecoder(clazz: Variable.self) { (source: AnyObject) -> Variable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Variable()
                instance.actionArray = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionArray"])
                instance.alias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alias"])
                instance.availableUnits = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["availableUnits"])
                instance.causeOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["causeOnly"])
                instance.charts = Decoders.decodeOptional(clazz: VariableCharts.self, source: sourceDictionary["charts"])
                instance.chartsLinkDynamic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkDynamic"])
                instance.chartsLinkEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkEmail"])
                instance.chartsLinkFacebook = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkFacebook"])
                instance.chartsLinkGoogle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkGoogle"])
                instance.chartsLinkStatic = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkStatic"])
                instance.chartsLinkTwitter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["chartsLinkTwitter"])
                instance.childCommonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["childCommonTagVariables"])
                instance.childUserTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["childUserTagVariables"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.combinationOperation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["combinationOperation"])
                instance.commonAlias = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commonAlias"])
                instance.commonTaggedVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commonTaggedVariables"])
                instance.commonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["commonTagVariables"])
                instance.commonVariableMostCommonConnectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["commonVariableMostCommonConnectorId"])
                instance.commonVariableUpdatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commonVariableUpdatedAt"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.unitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitCategoryId"])
                instance.unitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitCategoryName"])
                instance.unitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitId"])
                instance.unitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitName"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationOfAction"])
                instance.durationOfActionInHours = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationOfActionInHours"])
                instance.earliestFillingTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["earliestFillingTime"])
                instance.earliestMeasurementTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["earliestMeasurementTime"])
                instance.earliestSourceTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["earliestSourceTime"])
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.experimentEndTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentEndTime"])
                instance.experimentEndTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["experimentEndTimeSeconds"])
                instance.experimentEndTimeString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentEndTimeString"])
                instance.experimentStartTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentStartTime"])
                instance.experimentStartTimeSeconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["experimentStartTimeSeconds"])
                instance.experimentStartTimeString = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["experimentStartTimeString"])
                instance.fillingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fillingType"])
                instance.fillingValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["fillingValue"])
                instance.iconIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconIcon"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.informationalUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["informationalUrl"])
                instance.ingredientOfCommonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ingredientOfCommonTagVariables"])
                instance.ingredientCommonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ingredientCommonTagVariables"])
                instance.ingredientOfUserTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ingredientOfUserTagVariables"])
                instance.ingredientUserTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ingredientUserTagVariables"])
                instance.inputType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inputType"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.joinedCommonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["joinedCommonTagVariables"])
                instance.joinedUserTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["joinedUserTagVariables"])
                instance.joinWith = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["joinWith"])
                instance.kurtosis = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["kurtosis"])
                instance.lastOriginalUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastOriginalUnitId"])
                instance.lastOriginalValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastOriginalValue"])
                instance.lastProcessedDailyValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lastProcessedDailyValue"])
                instance.lastSuccessfulUpdateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastSuccessfulUpdateTime"])
                instance.lastUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastUnitId"])
                instance.lastValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["lastValue"])
                instance.latestFillingTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["latestFillingTime"])
                instance.latestMeasurementTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["latestMeasurementTime"])
                instance.latestSourceTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["latestSourceTime"])
                instance.latestUserMeasurementTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["latestUserMeasurementTime"])
                instance.latitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["latitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.longitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["longitude"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximumAllowedValue"])
                instance.maximumRecordedDailyValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximumRecordedDailyValue"])
                instance.maximumRecordedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maximumRecordedValue"])
                instance.mean = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mean"])
                instance.measurementsAtLastAnalysis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["measurementsAtLastAnalysis"])
                instance.median = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["median"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimumAllowedValue"])
                instance.minimumRecordedValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimumRecordedValue"])
                instance.mostCommonConnectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mostCommonConnectorId"])
                instance.mostCommonOriginalUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mostCommonOriginalUnitId"])
                instance.mostCommonUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mostCommonUnitId"])
                instance.mostCommonValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mostCommonValue"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.numberOfAggregateCorrelationsAsCause = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfAggregateCorrelationsAsCause"])
                instance.numberOfAggregateCorrelationsAsEffect = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfAggregateCorrelationsAsEffect"])
                instance.numberOfChanges = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfChanges"])
                instance.numberOfCorrelations = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfCorrelations"])
                instance.numberOfProcessedDailyMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfProcessedDailyMeasurements"])
                instance.numberOfRawMeasurements = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfRawMeasurements"])
                instance.numberOfTrackingReminders = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfTrackingReminders"])
                instance.numberOfUniqueDailyValues = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["numberOfUniqueDailyValues"])
                instance.numberOfUniqueValues = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUniqueValues"])
                instance.numberOfUserCorrelationsAsCause = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUserCorrelationsAsCause"])
                instance.numberOfUserCorrelationsAsEffect = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUserCorrelationsAsEffect"])
                instance.numberOfUserVariables = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfUserVariables"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelay"])
                instance.onsetDelayInHours = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["onsetDelayInHours"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.outcomeOfInterest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["outcomeOfInterest"])
                instance.parentCommonTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parentCommonTagVariables"])
                instance.parentUserTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parentUserTagVariables"])
                instance.pngPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngPath"])
                instance.pngUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngUrl"])
                instance.predictorOfInterest = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["predictorOfInterest"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.productUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productUrl"])
                instance._public = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["public"])
                instance.rawMeasurementsAtLastAnalysis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["rawMeasurementsAtLastAnalysis"])
                instance.secondMostCommonValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["secondMostCommonValue"])
                instance.secondToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["secondToLastValue"])
                instance.shareUserMeasurements = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["shareUserMeasurements"])
                instance.skewness = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["skewness"])
                instance.sources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sources"])
                instance.standardDeviation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["standardDeviation"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.subtitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subtitle"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.thirdMostCommonValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["thirdMostCommonValue"])
                instance.thirdToLastValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["thirdToLastValue"])
                instance.unit = Decoders.decodeOptional(clazz: Unit.self, source: sourceDictionary["unit"])
                instance.upc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["upc"])
                instance.updated = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["updated"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.updatedTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedTime"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.userTaggedVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userTaggedVariables"])
                instance.userTagVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["userTagVariables"])
                instance.userVariableUnitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitAbbreviatedName"])
                instance.userVariableUnitCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitCategoryId"])
                instance.userVariableUnitCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitCategoryName"])
                instance.userVariableUnitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableUnitId"])
                instance.userVariableUnitName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUnitName"])
                instance.userVariableFillingValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["userVariableFillingValue"])
                instance.userVariableMostCommonConnectorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableMostCommonConnectorId"])
                instance.userVariableUpdatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableUpdatedAt"])
                instance.userVariableValence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableValence"])
                instance.userVariableVariableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userVariableVariableCategoryId"])
                instance.userVariableVariableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableVariableCategoryName"])
                instance.userVariableWikipediaTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userVariableWikipediaTitle"])
                instance.variableCategory = Decoders.decodeOptional(clazz: VariableCategory.self, source: sourceDictionary["variableCategory"])
                instance.dataSource = Decoders.decodeOptional(clazz: DataSource.self, source: sourceDictionary["dataSource"])
                instance.joinedVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["joinedVariables"])
                instance.lastSource = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastSource"])
                instance.lastUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnit"])
                instance.mostCommonUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mostCommonUnit"])
                instance.valence = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valence"])
                instance.variableCategoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableCategoryId"])
                instance.variableCategoryImageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryImageUrl"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableFillingValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["variableFillingValue"])
                instance.variableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["variableId"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance.variance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["variance"])
                instance.wikipediaTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipediaTitle"])
                return instance
            }


            // Decoder for [VariableCategory]
            Decoders.addDecoder(clazz: [VariableCategory].self) { (source: AnyObject) -> [VariableCategory] in
                return Decoders.decode(clazz: [VariableCategory].self, source: source)
            }
            // Decoder for VariableCategory
            Decoders.addDecoder(clazz: VariableCategory.self) { (source: AnyObject) -> VariableCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableCategory()
                instance.appType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["appType"])
                instance.causeOnly = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["causeOnly"])
                instance.combinationOperation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["combinationOperation"])
                instance.createdTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdTime"])
                instance.unitAbbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitAbbreviatedName"])
                instance.unitId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unitId"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationOfAction"])
                instance.fillingValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fillingValue"])
                instance.helpText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["helpText"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                instance.ionIcon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ionIcon"])
                instance.manualTracking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualTracking"])
                instance.maximumAllowedValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["maximumAllowedValue"])
                instance.measurementSynonymSingularLowercase = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["measurementSynonymSingularLowercase"])
                instance.minimumAllowedValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["minimumAllowedValue"])
                instance.moreInfo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["moreInfo"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["onsetDelay"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.pngPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngPath"])
                instance.pngUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pngUrl"])
                instance._public = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["public"])
                instance.svgPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgPath"])
                instance.svgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["svgUrl"])
                instance.updated = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["updated"])
                instance.updatedTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedTime"])
                instance.variableCategoryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryName"])
                instance.variableCategoryNameSingular = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableCategoryNameSingular"])
                return instance
            }


            // Decoder for [VariableCharts]
            Decoders.addDecoder(clazz: [VariableCharts].self) { (source: AnyObject) -> [VariableCharts] in
                return Decoders.decode(clazz: [VariableCharts].self, source: source)
            }
            // Decoder for VariableCharts
            Decoders.addDecoder(clazz: VariableCharts.self) { (source: AnyObject) -> VariableCharts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableCharts()
                instance.hourlyColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["hourlyColumnChart"])
                instance.monthlyColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["monthlyColumnChart"])
                instance.distributionColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["distributionColumnChart"])
                instance.weekdayColumnChart = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["weekdayColumnChart"])
                instance.lineChartWithoutSmoothing = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["lineChartWithoutSmoothing"])
                instance.lineChartWithSmoothing = Decoders.decodeOptional(clazz: Chart.self, source: sourceDictionary["lineChartWithSmoothing"])
                return instance
            }


            // Decoder for [Vote]
            Decoders.addDecoder(clazz: [Vote].self) { (source: AnyObject) -> [Vote] in
                return Decoders.decode(clazz: [Vote].self, source: source)
            }
            // Decoder for Vote
            Decoders.addDecoder(clazz: Vote.self) { (source: AnyObject) -> Vote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vote()
                instance.causeVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["causeVariableId"])
                instance.clientId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientId"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.effectVariableId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["effectVariableId"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.value = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [VoteDelete]
            Decoders.addDecoder(clazz: [VoteDelete].self) { (source: AnyObject) -> [VoteDelete] in
                return Decoders.decode(clazz: [VoteDelete].self, source: source)
            }
            // Decoder for VoteDelete
            Decoders.addDecoder(clazz: VoteDelete.self) { (source: AnyObject) -> VoteDelete in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VoteDelete()
                instance.cause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause"])
                instance.effect = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effect"])
                return instance
            }
        }
    }
}
