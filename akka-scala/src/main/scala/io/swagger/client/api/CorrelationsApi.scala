/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.CommonResponse
import io.swagger.client.model.Correlation
import io.swagger.client.model.JsonErrorResponse
import io.swagger.client.model.PostCorrelation
import io.swagger.client.model.PostVote
import io.swagger.client.model.VoteDelete
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object CorrelationsApi {

  /**
   * Get correlations based on the anonymized aggregate data from all QuantiModo users.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param effect Variable name of the effect variable for which the user desires correlations
   * @param cause Variable name of the cause variable for which the user desires correlations
   * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
   * @param onsetDelay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
   * @param durationOfAction The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
   * @param updatedAt The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
   */
  def v1AggregatedCorrelationsGet(accessToken: Option[String] = None, userId: Option[Int] = None, effect: Option[String] = None, cause: Option[String] = None, correlationCoefficient: Option[String] = None, onsetDelay: Option[String] = None, durationOfAction: Option[String] = None, updatedAt: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None, outcomesOfInterest: Option[Boolean] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/aggregatedCorrelations", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("effect", effect)
      .withQueryParam("cause", cause)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withQueryParam("onsetDelay", onsetDelay)
      .withQueryParam("durationOfAction", durationOfAction)
      .withQueryParam("updatedAt", updatedAt)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withQueryParam("outcomesOfInterest", outcomesOfInterest)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Add correlation
   * 
   * Expected answers:
   *   code 200 :  (Successful Operation)
   *   code 400 : JsonErrorResponse (Bad request)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body Provides correlation data
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1AggregatedCorrelationsPost(body: PostCorrelation, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/aggregatedCorrelations", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[JsonErrorResponse](400)
      .withErrorResponse[Unit](401)
        /**
   * Get correlations based on data from a single user.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param effect Variable name of the effect variable for which the user desires correlations
   * @param cause Variable name of the cause variable for which the user desires correlations
   * @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
   * @param onsetDelay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
   * @param durationOfAction The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
   * @param updatedAt The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;.  Generally, you&#39;ll be retrieving new or updated user data. To avoid unnecessary API calls, you&#39;ll want to store your last refresh time locally. Then whenever you make a request to get new data, you should limit the returned results to those updated since your last refresh by appending append &#x60;?updatedAt&#x3D;(ge)2013-01-D01T01:01:01 to your request.
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
   */
  def v1CorrelationsGet(accessToken: Option[String] = None, userId: Option[Int] = None, effect: Option[String] = None, cause: Option[String] = None, correlationCoefficient: Option[String] = None, onsetDelay: Option[String] = None, durationOfAction: Option[String] = None, updatedAt: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None, outcomesOfInterest: Option[Boolean] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/correlations", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("effect", effect)
      .withQueryParam("cause", cause)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withQueryParam("onsetDelay", onsetDelay)
      .withQueryParam("durationOfAction", durationOfAction)
      .withQueryParam("updatedAt", updatedAt)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withQueryParam("outcomesOfInterest", outcomesOfInterest)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param organizationId Organization ID
   * @param userId2 User id
   * @param variableName Effect variable name
   * @param organizationToken Organization access token
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
   */
  def v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet(organizationId: Int, userId2: Int, variableName: String, organizationToken: String, accessToken: Option[String] = None, userId: Option[Int] = None, includePublic: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("organization_token", organizationToken)
      .withQueryParam("includePublic", includePublic)
      .withPathParam("organizationId", organizationId)
      .withPathParam("userId", userId2)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \&quot;include_public\&quot; is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
   * 
   * Expected answers:
   *   code 200 : Seq[CommonResponse] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param organizationId Organization ID
   * @param userId2 User id
   * @param variableName Cause variable name
   * @param organizationToken Organization access token
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param includePublic Include public correlations, Can be \&quot;1\&quot; or empty.
   */
  def v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet(organizationId: Int, userId2: Int, variableName: String, organizationToken: String, accessToken: Option[String] = None, userId: Option[Int] = None, includePublic: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[CommonResponse]] =
    ApiRequest[Seq[CommonResponse]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("organization_token", organizationToken)
      .withQueryParam("include_public", includePublic)
      .withPathParam("organizationId", organizationId)
      .withPathParam("userId", userId2)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[CommonResponse]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param search Name of the variable that you want to know the causes or effects of.
   * @param effectOrCause Setting this to effect indicates that the searched variable is the effect and that the causes of this variable should be returned. cause indicates that the searched variable is the cause and the effects should be returned.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param outcomesOfInterest Only include correlations for which the effect is an outcome of interest for the user
   */
  def v1PublicCorrelationsSearchSearchGet(search: String, effectOrCause: String, accessToken: Option[String] = None, userId: Option[Int] = None, outcomesOfInterest: Option[Boolean] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/public/correlations/search/{search}", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("effectOrCause", effectOrCause)
      .withQueryParam("outcomesOfInterest", outcomesOfInterest)
      .withPathParam("search", search)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user cause variables for a given effect
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param variableName Effect variable name
   */
  def v1VariablesVariableNameCausesGet(variableName: String)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/causes", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all user effect variables for a given cause
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param variableName Cause variable name
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param correlationCoefficient You can use this to get effects with correlations greater than or less than 0
   */
  def v1VariablesVariableNameEffectsGet(variableName: String, accessToken: Option[String] = None, userId: Option[Int] = None, correlationCoefficient: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/effects", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all public cause variables for a given effect
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param variableName Effect variable name
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param correlationCoefficient You can use this to get causes with correlations greater than or less than 0
   */
  def v1VariablesVariableNamePublicCausesGet(variableName: String, accessToken: Option[String] = None, userId: Option[Int] = None, correlationCoefficient: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/public/causes", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("correlationCoefficient", correlationCoefficient)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Returns average of all correlations and votes for all public cause variables for a given cause
   * 
   * Expected answers:
   *   code 200 : Seq[Correlation] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param variableName Cause variable name
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1VariablesVariableNamePublicEffectsGet(variableName: String, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Correlation]] =
    ApiRequest[Seq[Correlation]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/variables/{variableName}/public/effects", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withPathParam("variableName", variableName)
      .withSuccessResponse[Seq[Correlation]](200)
      .withErrorResponse[Unit](401)
        /**
   * Delete previously posted vote
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body The cause and effect variable names for the predictor vote to be deleted.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1VotesDeletePost(body: VoteDelete, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/votes/delete", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body Contains the cause variable, effect variable, and vote value.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1VotesPost(body: PostVote, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/votes", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
      

}

