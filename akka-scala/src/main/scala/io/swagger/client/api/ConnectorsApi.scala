/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Connector
import io.swagger.client.model.ConnectorInfo
import io.swagger.client.model.ConnectorInstruction
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ConnectorsApi {

  /**
   * This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user&#39;s access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token&#x3D;123
   * 
   * Expected answers:
   *   code 200 :  (Mobile connect page was returned)
   *   code 401 :  (User token is missing)
   *   code 403 :  (User token is incorrect)
   * 
   * @param accessToken User OAuth access token
   * @param userId User&#39;s id
   */
  def v1ConnectMobileGet(accessToken: String, userId: Option[Int] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connect/mobile", "application/json")
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
        /**
   * Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Unsupported response from update().)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1ConnectorsConnectorNameConnectGet(connectorName: String, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/connect", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Unsupported response from update().)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
   * @param parameters JSON Array of Parameters for the request to enable connector.
   * @param url URL which should be used to enable the connector.
   * @param usePopup Should use popup when enabling connector
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1ConnectorsConnectorNameConnectInstructionsGet(connectorName: String, parameters: String, url: String, usePopup: Boolean, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/connectInstructions", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("parameters", parameters)
      .withQueryParam("url", url)
      .withQueryParam("usePopup", usePopup)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
   * 
   * Expected answers:
   *   code 200 : ConnectorInstruction (Successful operation)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Unsupported response from update().)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
   * @param displayName Name of the parameter that is user visible in the form
   * @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
   * @param placeholder Placeholder hint value for the parameter input tag.
   * @param &#x60;type&#x60; Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
   * @param usePopup Should use popup when enabling connector
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param defaultValue Default parameter value
   */
  def v1ConnectorsConnectorNameConnectParameterGet(connectorName: String, displayName: String, key: String, placeholder: String, &#x60;type&#x60;: String, usePopup: Boolean, accessToken: Option[String] = None, userId: Option[Int] = None, defaultValue: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[ConnectorInstruction] =
    ApiRequest[ConnectorInstruction](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/connectParameter", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("defaultValue", defaultValue)
      .withQueryParam("displayName", displayName)
      .withQueryParam("key", key)
      .withQueryParam("placeholder", placeholder)
      .withQueryParam("type", &#x60;type&#x60;)
      .withQueryParam("usePopup", usePopup)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[ConnectorInstruction](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * The disconnect method deletes any stored tokens or connection information from the connectors database.
   * 
   * Expected answers:
   *   code 200 :  (Successful operation)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Unsupported response from update().)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
   */
  def v1ConnectorsConnectorNameDisconnectGet(connectorName: String)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/disconnect", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
   * 
   * Expected answers:
   *   code 200 : ConnectorInfo (Successful operation)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Please contact info@quantimo.do.)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1ConnectorsConnectorNameInfoGet(connectorName: String, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[ConnectorInfo] =
    ApiRequest[ConnectorInfo](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/info", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[ConnectorInfo](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
   * 
   * Expected answers:
   *   code 200 :  (Connection Successful)
   *   code 401 :  (Not Authenticated)
   *   code 404 :  (Method not found. Could not execute the requested method.)
   *   code 500 :  (Error during update. Unsupported response from update().)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param connectorName Lowercase system name of the source application or device
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1ConnectorsConnectorNameUpdateGet(connectorName: String, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/{connectorName}/update", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withPathParam("connectorName", connectorName)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](500)
        /**
   * A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
   * 
   * Expected answers:
   *   code 200 : Seq[Connector] (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   */
  def v1ConnectorsListGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Connector]] =
    ApiRequest[Seq[Connector]](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/connectors/list", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withSuccessResponse[Seq[Connector]](200)
      .withErrorResponse[Unit](401)
        /**
   * Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use &#x60;qmSetupInPopup&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use &#x60;qmSetupOnPage&#x60; function after connecting &#x60;connect.js&#x60;.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use &#x60;qmSetupOnMobile&#x60; function after connecting &#x60;connect.js&#x60;.     If using in a Cordova application call  &#x60;qmSetupOnIonic&#x60; function after connecting &#x60;connect.js&#x60;.
   * 
   * Expected answers:
   *   code 200 :  (Embeddable connect javascript was returned)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   */
  def v1IntegrationJsGet(accessToken: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/integration.js", "application/json")
      .withQueryParam("access_token", accessToken)
      .withSuccessResponse[Unit](200)
      

}

