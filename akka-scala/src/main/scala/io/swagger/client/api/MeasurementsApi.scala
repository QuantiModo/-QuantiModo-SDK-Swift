/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.CommonResponse
import java.io.File
import io.swagger.client.model.Measurement
import io.swagger.client.model.MeasurementDelete
import io.swagger.client.model.MeasurementRange
import io.swagger.client.model.MeasurementSet
import io.swagger.client.model.MeasurementSource
import io.swagger.client.model.MeasurementUpdate
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object MeasurementsApi {

  /**
   * Returns a list of all the apps from which measurement data is obtained.
   * 
   * Expected answers:
   *   code 200 : MeasurementSource (Successful operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   */
  def v1MeasurementSourcesGet()(implicit apiKey: ApiKeyValue): ApiRequest[MeasurementSource] =
    ApiRequest[MeasurementSource](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurementSources", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withSuccessResponse[MeasurementSource](200)
      .withErrorResponse[Unit](401)
        /**
   * Add a life-tracking app or device to the QuantiModo list of data sources.
   * 
   * Expected answers:
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body An array of names of data sources you want to add.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1MeasurementSourcesPost(body: MeasurementSource, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurementSources", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withErrorResponse[Unit](401)
        /**
   * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
   * 
   * Expected answers:
   *   code 200 : Measurement (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param variableName Name of the variable you want measurements for
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param unitAbbreviatedName The unit your want the measurements in
   * @param startTime The lower limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
   * @param endTime The upper limit of measurements returned (UTC Iso8601 \&quot;YYYY-MM-DDThh:mm:ss\&quot; format)
   * @param groupingWidth The time (in seconds) over which measurements are grouped together
   * @param groupingTimezone The time (in seconds) over which measurements are grouped together
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1MeasurementsDailyGet(variableName: String, accessToken: Option[String] = None, userId: Option[Int] = None, unitAbbreviatedName: Option[String] = None, startTime: Option[String] = None, endTime: Option[String] = None, groupingWidth: Option[Int] = None, groupingTimezone: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Measurement] =
    ApiRequest[Measurement](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurements/daily", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("variableName", variableName)
      .withQueryParam("unitAbbreviatedName", unitAbbreviatedName)
      .withQueryParam("startTime", startTime)
      .withQueryParam("endTime", endTime)
      .withQueryParam("groupingWidth", groupingWidth)
      .withQueryParam("groupingTimezone", groupingTimezone)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Measurement](200)
      .withErrorResponse[Unit](401)
        /**
   * Delete a previously submitted measurement
   * 
   * Expected answers:
   *   code 200 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body The startTime and variableId of the measurement to be deleted.
   */
  def v1MeasurementsDeletePost(body: MeasurementDelete)(implicit apiKey: ApiKeyValue): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurements/delete", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withSuccessResponse[CommonResponse](200)
      .withErrorResponse[Unit](401)
        /**
   * Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. Supported filter parameters:&lt;ul&gt;&lt;li&gt;&lt;b&gt;value&lt;/b&gt; - Value of measurement&lt;/li&gt;&lt;li&gt;&lt;b&gt;updatedAt&lt;/b&gt; - The time that this measurement was created or last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;&lt;/li&gt;&lt;/ul&gt;
   * 
   * Expected answers:
   *   code 200 : Measurement (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   * @param id Measurement id
   * @param variableName Name of the variable you want measurements for
   * @param variableCategoryName Name of the variable category you want measurements for
   * @param sourceName ID of the source you want measurements for (supports exact name match only)
   * @param value Value of measurement
   * @param unitAbbreviatedName The unit you want the measurements returned in
   * @param earliestMeasurementTime The lower limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
   * @param latestMeasurementTime The upper limit of measurements returned in ISO 8601 format or epoch seconds (unixtime)
   * @param createdAt The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
   * @param updatedAt The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
   * @param groupingWidth The time (in seconds) over which measurements are grouped together
   * @param groupingTimezone The time (in seconds) over which measurements are grouped together
   * @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
   * @param offset Since the maximum limit is 200 records, to get more than that you&#39;ll have to make multiple API calls and page through the results. To retrieve all the data, you can iterate through data by using the &#x60;limit&#x60; and &#x60;offset&#x60; query parameters.  For example, if you want to retrieve data from 61-80 then you can use a query with the following parameters, &#x60;imit&#x3D;20&amp;offset&#x3D;60&#x60;.
   * @param sort Sort by given field. If the field is prefixed with &#x60;-, it will sort in descending order.
   */
  def v1MeasurementsGet(accessToken: Option[String] = None, userId: Option[Int] = None, id: Option[Int] = None, variableName: Option[String] = None, variableCategoryName: Option[String] = None, sourceName: Option[String] = None, value: Option[String] = None, unitAbbreviatedName: Option[String] = None, earliestMeasurementTime: Option[String] = None, latestMeasurementTime: Option[String] = None, createdAt: Option[String] = None, updatedAt: Option[String] = None, groupingWidth: Option[Int] = None, groupingTimezone: Option[String] = None, limit: Option[Int] = None, offset: Option[Int] = None, sort: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Measurement] =
    ApiRequest[Measurement](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurements", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withQueryParam("id", id)
      .withQueryParam("variableName", variableName)
      .withQueryParam("variableCategoryName", variableCategoryName)
      .withQueryParam("sourceName", sourceName)
      .withQueryParam("value", value)
      .withQueryParam("unitAbbreviatedName", unitAbbreviatedName)
      .withQueryParam("earliestMeasurementTime", earliestMeasurementTime)
      .withQueryParam("latestMeasurementTime", latestMeasurementTime)
      .withQueryParam("createdAt", createdAt)
      .withQueryParam("updatedAt", updatedAt)
      .withQueryParam("groupingWidth", groupingWidth)
      .withQueryParam("groupingTimezone", groupingTimezone)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Measurement](200)
      .withErrorResponse[Unit](401)
        /**
   * You can submit or update multiple measurements in a \&quot;measurements\&quot; sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\&quot;measurements\&quot;:[{\&quot;startTime\&quot;:1439389320,\&quot;value\&quot;:\&quot;3\&quot;}, {\&quot;startTime\&quot;:1439389319,\&quot;value\&quot;:\&quot;2\&quot;}],\&quot;name\&quot;:\&quot;Acne (out of 5)\&quot;,\&quot;source\&quot;:\&quot;QuantiModo\&quot;,\&quot;category\&quot;:\&quot;Symptoms\&quot;,\&quot;combinationOperation\&quot;:\&quot;MEAN\&quot;,\&quot;unit\&quot;:\&quot;/5\&quot;}]
   * 
   * Expected answers:
   *   code 200 :  (Measurements successfully stored)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body An array of measurements you want to insert.
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v1MeasurementsPost(body: MeasurementSet, accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurements", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
        /**
   * Get Unix time-stamp (epoch time) of the user&#39;s first and last measurements taken.
   * 
   * Expected answers:
   *   code 200 : MeasurementRange (Successful operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param sources Enter source name to limit to specific source (varchar)
   * @param user If not specified, uses currently logged in user (bigint)
   */
  def v1MeasurementsRangeGet(sources: Option[String] = None, user: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[MeasurementRange] =
    ApiRequest[MeasurementRange](ApiMethods.GET, "https://app.quantimo.do/api", "/v1/measurementsRange", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("sources", sources)
      .withQueryParam("user", user)
      .withSuccessResponse[MeasurementRange](200)
      .withErrorResponse[Unit](401)
        /**
   * Delete a previously submitted measurement
   * 
   * Expected answers:
   *   code 201 : CommonResponse (Successful Operation)
   *   code 401 :  (Not Authenticated)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param body The id as well as the new startTime, note, and/or value of the measurement to be updated
   */
  def v1MeasurementsUpdatePost(body: MeasurementUpdate)(implicit apiKey: ApiKeyValue): ApiRequest[CommonResponse] =
    ApiRequest[CommonResponse](ApiMethods.POST, "https://app.quantimo.do/api", "/v1/measurements/update", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withBody(body)
      .withSuccessResponse[CommonResponse](201)
      .withErrorResponse[Unit](401)
        /**
   * Download a CSV containing all user measurements
   * 
   * Expected answers:
   *   code 200 : File (successful operation)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v2MeasurementsCsvGet(accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[File] =
    ApiRequest[File](ApiMethods.GET, "https://app.quantimo.do/api", "/v2/measurements/csv", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[File](200)
        /**
   * Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v2MeasurementsRequestCsvPost(accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_csv", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Int](200)
        /**
   * Use this endpoint to schedule a PDF export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v2MeasurementsRequestPdfPost(accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_pdf", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Int](200)
        /**
   * Use this endpoint to schedule a XLS export containing all user measurements to be emailed to the user within 24 hours.
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   * 
   * Available security schemes:
   *   access_token (apiKey)
   * 
   * @param accessToken User&#39;s OAuth2 access token
   * @param userId User&#39;s id
   */
  def v2MeasurementsRequestXlsPost(accessToken: Option[String] = None, userId: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.POST, "https://app.quantimo.do/api", "/v2/measurements/request_xls", "application/json")
      .withApiKey(apiKey, "access_token", QUERY)
      .withQueryParam("access_token", accessToken)
      .withQueryParam("userId", userId)
      .withSuccessResponse[Int](200)
      

}

