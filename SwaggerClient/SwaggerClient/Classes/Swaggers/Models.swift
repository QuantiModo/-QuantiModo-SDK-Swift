// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(#clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(#clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(#clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(#clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(#clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(#clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(#clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for CommonResponse
            Decoders.addDecoder(clazz: CommonResponse.self) { (source: AnyObject) -> CommonResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = CommonResponse()
                instance.status = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["status"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Connector
            Decoders.addDecoder(clazz: Connector.self) { (source: AnyObject) -> Connector in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Connector()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.getItUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["getItUrl"])
                instance.connected = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connected"])
                instance.connectInstructions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connectInstructions"])
                instance.lastUpdate = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastUpdate"])
                instance.latestData = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latestData"])
                instance.noDataYet = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["noDataYet"])
                return instance
            }
			

			// Decoder for ConversionStep
            Decoders.addDecoder(clazz: ConversionStep.self) { (source: AnyObject) -> ConversionStep in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = ConversionStep()
                instance.operation = (sourceDictionary["operation"] as? String).map { ConversionStep.Operation(rawValue: $0)! } 
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for Correlation
            Decoders.addDecoder(clazz: Correlation.self) { (source: AnyObject) -> Correlation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Correlation()
                instance.correlationCoefficient = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["correlationCoefficient"])
                instance.cause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause"])
                instance.effect = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effect"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["onsetDelay"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["durationOfAction"])
                instance.numberOfPairs = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["numberOfPairs"])
                instance.effectSize = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectSize"])
                instance.statisticalSignificance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["statisticalSignificance"])
                instance.timestamp = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["timestamp"])
                instance.reverseCorrelation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reverseCorrelation"])
                instance.causalityFactor = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["causalityFactor"])
                instance.causeCategory = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["causeCategory"])
                instance.effectCategory = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effectCategory"])
                return instance
            }
			

			// Decoder for JsonErrorResponse
            Decoders.addDecoder(clazz: JsonErrorResponse.self) { (source: AnyObject) -> JsonErrorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = JsonErrorResponse()
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                return instance
            }
			

			// Decoder for MeasurementSet
            Decoders.addDecoder(clazz: MeasurementSet.self) { (source: AnyObject) -> MeasurementSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = MeasurementSet()
                instance.measurements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["measurements"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.combinationOperation = (sourceDictionary["combinationOperation"] as? String).map { MeasurementSet.CombinationOperation(rawValue: $0)! } 
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                return instance
            }
			

			// Decoder for Measurement
            Decoders.addDecoder(clazz: Measurement.self) { (source: AnyObject) -> Measurement in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Measurement()
                instance.variable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variable"])
                instance.source = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timestamp"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                instance.storedValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["storedValue"])
                instance.storedUnit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["storedUnit"])
                return instance
            }
			

			// Decoder for MeasurementRange
            Decoders.addDecoder(clazz: MeasurementRange.self) { (source: AnyObject) -> MeasurementRange in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = MeasurementRange()
                instance.lowerLimit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lowerLimit"])
                instance.upperLimit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["upperLimit"])
                return instance
            }
			

			// Decoder for MeasurementSource
            Decoders.addDecoder(clazz: MeasurementSource.self) { (source: AnyObject) -> MeasurementSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = MeasurementSource()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for Pairs
            Decoders.addDecoder(clazz: Pairs.self) { (source: AnyObject) -> Pairs in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Pairs()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for Permission
            Decoders.addDecoder(clazz: Permission.self) { (source: AnyObject) -> Permission in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Permission()
                instance.target = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["target"])
                instance.variableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variableName"])
                instance.min_timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["min_timestamp"])
                instance.max_timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["max_timestamp"])
                instance.min_time_of_day = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["min_time_of_day"])
                instance.max_time_of_day = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["max_time_of_day"])
                instance.week = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["week"])
                return instance
            }
			

			// Decoder for PostCorrelation
            Decoders.addDecoder(clazz: PostCorrelation.self) { (source: AnyObject) -> PostCorrelation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = PostCorrelation()
                instance.cause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause"])
                instance.effect = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effect"])
                instance.correlation = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["correlation"])
                instance.vote = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["vote"])
                return instance
            }
			

			// Decoder for Unit
            Decoders.addDecoder(clazz: Unit.self) { (source: AnyObject) -> Unit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Unit()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.abbreviatedName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbreviatedName"])
                instance.category = (sourceDictionary["category"] as? String).map { Unit.Category(rawValue: $0)! } 
                instance.minimum = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["minimum"])
                instance.maximum = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maximum"])
                instance.conversionSteps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["conversionSteps"])
                return instance
            }
			

			// Decoder for UnitCategory
            Decoders.addDecoder(clazz: UnitCategory.self) { (source: AnyObject) -> UnitCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UnitCategory()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = User()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.wpId = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["wpId"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.loginName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["loginName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.administrator = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["administrator"])
                return instance
            }
			

			// Decoder for UserTokenRequest
            Decoders.addDecoder(clazz: UserTokenRequest.self) { (source: AnyObject) -> UserTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UserTokenRequest()
                instance.user = Decoders.decodeOptional(clazz: UserTokenRequestInnerUserField.self, source: sourceDictionary["user"])
                instance.organization_access_token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization_access_token"])
                return instance
            }
			

			// Decoder for UserTokenSuccessfulResponse
            Decoders.addDecoder(clazz: UserTokenSuccessfulResponse.self) { (source: AnyObject) -> UserTokenSuccessfulResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UserTokenSuccessfulResponse()
                instance.code = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.user = Decoders.decodeOptional(clazz: UserTokenSuccessfulResponseInnerUserField.self, source: sourceDictionary["user"])
                return instance
            }
			

			// Decoder for UserTokenFailedResponse
            Decoders.addDecoder(clazz: UserTokenFailedResponse.self) { (source: AnyObject) -> UserTokenFailedResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UserTokenFailedResponse()
                instance.code = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for UserTokenRequestInnerUserField
            Decoders.addDecoder(clazz: UserTokenRequestInnerUserField.self) { (source: AnyObject) -> UserTokenRequestInnerUserField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UserTokenRequestInnerUserField()
                instance._id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["_id"])
                return instance
            }
			

			// Decoder for UserTokenSuccessfulResponseInnerUserField
            Decoders.addDecoder(clazz: UserTokenSuccessfulResponseInnerUserField.self) { (source: AnyObject) -> UserTokenSuccessfulResponseInnerUserField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = UserTokenSuccessfulResponseInnerUserField()
                instance._id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["_id"])
                instance.access_token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["access_token"])
                return instance
            }
			

			// Decoder for ValueObject
            Decoders.addDecoder(clazz: ValueObject.self) { (source: AnyObject) -> ValueObject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = ValueObject()
                instance.timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timestamp"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                return instance
            }
			

			// Decoder for Variable
            Decoders.addDecoder(clazz: Variable.self) { (source: AnyObject) -> Variable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = Variable()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.originalName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["originalName"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                instance.sources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sources"])
                instance.minimumValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["minimumValue"])
                instance.maximumValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["maximumValue"])
                instance.combinationOperation = (sourceDictionary["combinationOperation"] as? String).map { Variable.CombinationOperation(rawValue: $0)! } 
                instance.fillingValue = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["fillingValue"])
                instance.joinWith = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["joinWith"])
                instance.joinedVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["joinedVariables"])
                instance.parent = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parent"])
                instance.subVariables = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["subVariables"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onsetDelay"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["durationOfAction"])
                instance.earliestMeasurementTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["earliestMeasurementTime"])
                instance.latestMeasurementTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latestMeasurementTime"])
                instance.updated = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updated"])
                instance.causeOnly = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["causeOnly"])
                instance.numberOfCorrelations = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfCorrelations"])
                instance.outcome = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["outcome"])
                instance.measurementsAtLastAnalysis = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["measurementsAtLastAnalysis"])
                instance.numberOfMeasurements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["numberOfMeasurements"])
                instance.lastUnit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastUnit"])
                instance.lastValue = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastValue"])
                instance.mostCommonValue = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["mostCommonValue"])
                instance.mostCommonUnit = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["mostCommonUnit"])
                instance.lastSource = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastSource"])
                return instance
            }
			

			// Decoder for VariableCategory
            Decoders.addDecoder(clazz: VariableCategory.self) { (source: AnyObject) -> VariableCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = VariableCategory()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
			

			// Decoder for VariableUserSettings
            Decoders.addDecoder(clazz: VariableUserSettings.self) { (source: AnyObject) -> VariableUserSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = VariableUserSettings()
                instance.user = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user"])
                instance.variable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["variable"])
                instance.durationOfAction = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["durationOfAction"])
                instance.fillingValue = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["fillingValue"])
                instance.joinWith = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["joinWith"])
                instance.maximumValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximumValue"])
                instance.minimumValue = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimumValue"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.onsetDelay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onsetDelay"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                return instance
            }
			

			// Decoder for VariableNew
            Decoders.addDecoder(clazz: VariableNew.self) { (source: AnyObject) -> VariableNew in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = VariableNew()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unit"])
                instance.combinationOperation = (sourceDictionary["combinationOperation"] as? String).map { VariableNew.CombinationOperation(rawValue: $0)! } 
                instance.parent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parent"])
                return instance
            }
			

			// Decoder for VariablesNew
            Decoders.addDecoder(clazz: VariablesNew.self) { (source: AnyObject) -> VariablesNew in
                let sourceDictionary = source as! [NSObject:AnyObject]
                var instance = VariablesNew()
                return instance
            }
			
        }
    }
}
