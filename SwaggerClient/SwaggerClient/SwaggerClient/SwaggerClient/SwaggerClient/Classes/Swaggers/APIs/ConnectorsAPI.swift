//
// ConnectorsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit

extension SwaggerClientAPI {
    
    public class ConnectorsAPI: APIBase {
    
        /**
         
         List of Connectors
         
         - GET /connectors/list
         - Returns a list of all available connectors. A connector pulls data from other data providers using their API or a screenscraper.
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{contentType=application/json, example=[ {
  "connected" : "aeiou",
  "image" : "aeiou",
  "getItUrl" : "aeiou",
  "noDataYet" : true,
  "displayName" : "aeiou",
  "latestData" : 123,
  "lastUpdate" : 123,
  "name" : "aeiou",
  "id" : 123,
  "connectInstructions" : "aeiou"
} ]}]

         :returns: Promise<Response<[Connector]>> 
         */
        public class func connectorsListGet() -> RequestBuilder<[Connector]> {
            let path = "/connectors/list"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[Connector]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Obtain a token from 3rd party data source
         
         - GET /connectors/{connector}/connect
         - Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint.

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorConnectGet(#connector: String) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/connect"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get connection parameters
         
         - GET /connectors/{connector}/connectInstructions
         - Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint.
         :param: url (query) URL which should be used to enable the connector
         :param: parameters (query) Array of Parameters for the request to enable connector
         :param: usePopup (query) Should use popup when enabling connector

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorConnectInstructionsGet(#connector: String, url: String, parameters: [String], usePopup: Bool) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/connectInstructions"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "url": url,
                "parameters": parameters,
                "usePopup": usePopup
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get connection parameters
         
         - GET /connectors/{connector}/connectParameter
         - Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint.
         :param: displayName (query) Name of the parameter that is user visible in the form
         :param: key (query) Name of the property that the user has to enter such as username or password Connector (used in HTTP request) TODO What&#39;s a connector key?
         :param: usePopup (query) Should use popup when enabling connector
         :param: type (query) Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
         :param: placeholder (query) Placeholder hint value for the parameter input tag
         :param: defaultValue (query) Default parameter value

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorConnectParameterGet(#connector: String, displayName: String, key: String, usePopup: Bool, type: String, placeholder: String, defaultValue: String) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/connectParameter"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "displayName": displayName,
                "key": key,
                "usePopup": usePopup,
                "type": type,
                "placeholder": placeholder,
                "defaultValue": defaultValue
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete stored connection info
         
         - GET /connectors/{connector}/disconnect
         - The disconnect method deletes any stored tokens or connection information from the connectors database.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint.

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorDisconnectGet(#connector: String) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/disconnect"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get connector info for user
         
         - GET /connectors/{connector}/info
         - Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint.

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorInfoGet(#connector: String) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/info"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Sync with data source
         
         - GET /connectors/{connector}/update
         - The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         :param: connector (path) Lowercase system name of the source application or device

         :returns: Promise<Response<Void>> 
         */
        public class func connectorsConnectorUpdateGet(#connector: String) -> RequestBuilder<Void> {
            var path = "/connectors/{connector}/update"
            path = path.stringByReplacingOccurrencesOfString("{connector}", withString: "\(connector)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
    }
}
