// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for MeasurementValue
            Decoders.addDecoder(clazz: MeasurementValue.self) { (source: AnyObject) -> MeasurementValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementValue()
                instance.start_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["start_time"])
                instance.value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value"])
                return instance
            }
			

			// Decoder for MeasurementPost
            Decoders.addDecoder(clazz: MeasurementPost.self) { (source: AnyObject) -> MeasurementPost in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementPost()
                instance.variable_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_id"])
                instance.source_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["source_id"])
                instance.unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unit_id"])
                instance.measurements = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["measurements"])
                return instance
            }
			

			// Decoder for AggregatedCorrelation
            Decoders.addDecoder(clazz: AggregatedCorrelation.self) { (source: AnyObject) -> AggregatedCorrelation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AggregatedCorrelation()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.correlation = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["correlation"])
                instance.cause_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_id"])
                instance.effect_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["effect_id"])
                instance.onset_delay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onset_delay"])
                instance.duration_of_action = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration_of_action"])
                instance.number_of_pairs = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_pairs"])
                instance.value_predicting_high_outcome = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value_predicting_high_outcome"])
                instance.value_predicting_low_outcome = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value_predicting_low_outcome"])
                instance.optimal_pearson_product = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["optimal_pearson_product"])
                instance.vote = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["vote"])
                instance.number_of_users = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_users"])
                instance.number_of_correlations = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_correlations"])
                instance.statistical_significance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["statistical_significance"])
                instance.cause_unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause_unit"])
                instance.cause_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_unit_id"])
                instance.cause_changes = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_changes"])
                instance.effect_changes = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["effect_changes"])
                instance.aggregate_qm_score = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["aggregate_qm_score"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.error_message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"])
                instance.last_successful_update_time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_successful_update_time"])
                instance.reverse_pearson_correlation_coefficient = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["reverse_pearson_correlation_coefficient"])
                instance.predictive_pearson_correlation_coefficient = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["predictive_pearson_correlation_coefficient"])
                return instance
            }
			

			// Decoder for Connection
            Decoders.addDecoder(clazz: Connection.self) { (source: AnyObject) -> Connection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Connection()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.connector_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["connector_id"])
                instance.connect_status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connect_status"])
                instance.connect_error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["connect_error"])
                instance.update_requested_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["update_requested_at"])
                instance.update_status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["update_status"])
                instance.update_error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["update_error"])
                instance.last_successful_updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_successful_updated_at"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Connector
            Decoders.addDecoder(clazz: Connector.self) { (source: AnyObject) -> Connector in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Connector()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.display_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["display_name"])
                instance.image = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"])
                instance.get_it_url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["get_it_url"])
                instance.short_description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["short_description"])
                instance.long_description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["long_description"])
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.oauth = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["oauth"])
                return instance
            }
			

			// Decoder for Correlation
            Decoders.addDecoder(clazz: Correlation.self) { (source: AnyObject) -> Correlation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Correlation()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timestamp"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.correlation = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["correlation"])
                instance.cause_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_id"])
                instance.effect_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["effect_id"])
                instance.onset_delay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onset_delay"])
                instance.duration_of_action = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration_of_action"])
                instance.number_of_pairs = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_pairs"])
                instance.value_predicting_high_outcome = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value_predicting_high_outcome"])
                instance.value_predicting_low_outcome = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value_predicting_low_outcome"])
                instance.optimal_pearson_product = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["optimal_pearson_product"])
                instance.vote = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["vote"])
                instance.statistical_significance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["statistical_significance"])
                instance.cause_unit = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cause_unit"])
                instance.cause_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_unit_id"])
                instance.cause_changes = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_changes"])
                instance.effect_changes = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["effect_changes"])
                instance.qm_score = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["qm_score"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.reverse_pearson_correlation_coefficient = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["reverse_pearson_correlation_coefficient"])
                instance.predictive_pearson_correlation_coefficient = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["predictive_pearson_correlation_coefficient"])
                return instance
            }
			

			// Decoder for Credential
            Decoders.addDecoder(clazz: Credential.self) { (source: AnyObject) -> Credential in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Credential()
                instance.connector_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["connector_id"])
                instance.attr_key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attr_key"])
                instance.attr_value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attr_value"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Measurement
            Decoders.addDecoder(clazz: Measurement.self) { (source: AnyObject) -> Measurement in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Measurement()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.connector_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["connector_id"])
                instance.variable_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_id"])
                instance.source_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["source_id"])
                instance.start_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["start_time"])
                instance.value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value"])
                instance.unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unit_id"])
                instance.original_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["original_value"])
                instance.original_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["original_unit_id"])
                instance.duration = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.latitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["longitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }
			

			// Decoder for MeasurementExport
            Decoders.addDecoder(clazz: MeasurementExport.self) { (source: AnyObject) -> MeasurementExport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MeasurementExport()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.error_message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Source
            Decoders.addDecoder(clazz: Source.self) { (source: AnyObject) -> Source in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Source()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Unit
            Decoders.addDecoder(clazz: Unit.self) { (source: AnyObject) -> Unit in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Unit()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.abbreviated_name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["abbreviated_name"])
                instance.category_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["category_id"])
                instance.minimum_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_value"])
                instance.maximum_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_value"])
                instance.updated = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updated"])
                instance.default_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["default_unit_id"])
                instance.multiply = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["multiply"])
                instance.add = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["add"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for UnitCategory
            Decoders.addDecoder(clazz: UnitCategory.self) { (source: AnyObject) -> UnitCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UnitCategory()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for UnitConversion
            Decoders.addDecoder(clazz: UnitConversion.self) { (source: AnyObject) -> UnitConversion in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UnitConversion()
                instance.unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unit_id"])
                instance.step_number = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["step_number"])
                instance.operation = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["operation"])
                instance.value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["value"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Update
            Decoders.addDecoder(clazz: Update.self) { (source: AnyObject) -> Update in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Update()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.connector_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["connector_id"])
                instance.number_of_measurements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_measurements"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for UserVariable
            Decoders.addDecoder(clazz: UserVariable.self) { (source: AnyObject) -> UserVariable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserVariable()
                instance.parent_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parent_id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.variable_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_id"])
                instance.default_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["default_unit_id"])
                instance.minimum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_allowed_value"])
                instance.maximum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_allowed_value"])
                instance.filling_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["filling_value"])
                instance.join_with = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["join_with"])
                instance.onset_delay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onset_delay"])
                instance.duration_of_action = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration_of_action"])
                instance.variable_category_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_category_id"])
                instance.updated = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updated"])
                instance.Swaggerpublic = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["Swaggerpublic"])
                instance.cause_only = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cause_only"])
                instance.filling_type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filling_type"])
                instance.number_of_measurements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_measurements"])
                instance.number_of_processed_measurements = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_processed_measurements"])
                instance.measurements_at_last_analysis = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["measurements_at_last_analysis"])
                instance.last_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_unit_id"])
                instance.last_original_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_original_unit_id"])
                instance.last_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["last_value"])
                instance.last_original_value = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_original_value"])
                instance.last_source_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["last_source_id"])
                instance.number_of_correlations = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_correlations"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.error_message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"])
                instance.last_successful_update_time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_successful_update_time"])
                instance.standard_deviation = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["standard_deviation"])
                instance.variance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["variance"])
                instance.minimum_recorded_daily_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_recorded_daily_value"])
                instance.maximum_recorded_daily_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_recorded_daily_value"])
                instance.mean = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mean"])
                instance.median = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["median"])
                instance.most_common_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["most_common_unit_id"])
                instance.most_common_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["most_common_value"])
                instance.number_of_unique_daily_values = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["number_of_unique_daily_values"])
                instance.number_of_changes = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_changes"])
                instance.skewness = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["skewness"])
                instance.kurtosis = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["kurtosis"])
                instance.latitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["longitude"])
                instance.location = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.sources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sources"])
                instance.earliest_source_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["earliest_source_time"])
                instance.latest_source_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latest_source_time"])
                instance.earliest_measurement_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["earliest_measurement_time"])
                instance.latest_measurement_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latest_measurement_time"])
                instance.earliest_filling_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["earliest_filling_time"])
                instance.latest_filling_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latest_filling_time"])
                return instance
            }
			

			// Decoder for Variable
            Decoders.addDecoder(clazz: Variable.self) { (source: AnyObject) -> Variable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Variable()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.parent_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["parent_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.variable_category_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_category_id"])
                instance.default_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["default_unit_id"])
                instance.combination_operation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["combination_operation"])
                instance.filling_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["filling_value"])
                instance.maximum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_allowed_value"])
                instance.minimum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_allowed_value"])
                instance.onset_delay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onset_delay"])
                instance.duration_of_action = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration_of_action"])
                instance.Swaggerpublic = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["Swaggerpublic"])
                instance.cause_only = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cause_only"])
                instance.most_common_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["most_common_value"])
                instance.most_common_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["most_common_unit_id"])
                instance.standard_deviation = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["standard_deviation"])
                instance.variance = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["variance"])
                instance.mean = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["mean"])
                instance.median = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["median"])
                instance.number_of_measurements = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["number_of_measurements"])
                instance.number_of_unique_values = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["number_of_unique_values"])
                instance.skewness = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["skewness"])
                instance.kurtosis = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["kurtosis"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.error_message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error_message"])
                instance.last_successful_update_time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_successful_update_time"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.product_url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product_url"])
                instance.image_url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"])
                instance.price = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["price"])
                instance.number_of_user_variables = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["number_of_user_variables"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.minimum_recorded_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_recorded_value"])
                instance.maximum_recorded_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_recorded_value"])
                return instance
            }
			

			// Decoder for VariableCategory
            Decoders.addDecoder(clazz: VariableCategory.self) { (source: AnyObject) -> VariableCategory in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableCategory()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.filling_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["filling_value"])
                instance.maximum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["maximum_allowed_value"])
                instance.minimum_allowed_value = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["minimum_allowed_value"])
                instance.duration_of_action = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["duration_of_action"])
                instance.onset_delay = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["onset_delay"])
                instance.combination_operation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["combination_operation"])
                instance.updated = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updated"])
                instance.cause_only = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cause_only"])
                instance.Swaggerpublic = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["Swaggerpublic"])
                instance.outcome = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["outcome"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                instance.image_url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image_url"])
                instance.default_unit_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["default_unit_id"])
                return instance
            }
			

			// Decoder for VariableUserSource
            Decoders.addDecoder(clazz: VariableUserSource.self) { (source: AnyObject) -> VariableUserSource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VariableUserSource()
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.variable_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["variable_id"])
                instance.source_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["source_id"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["timestamp"])
                instance.earliest_measurement_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["earliest_measurement_time"])
                instance.latest_measurement_time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["latest_measurement_time"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Vote
            Decoders.addDecoder(clazz: Vote.self) { (source: AnyObject) -> Vote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Vote()
                instance.id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["id"])
                instance.client_id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["client_id"])
                instance.user_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["user_id"])
                instance.cause_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["cause_id"])
                instance.effect_id = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["effect_id"])
                instance.value = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["value"])
                instance.created_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["created_at"])
                instance.updated_at = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["updated_at"])
                return instance
            }
			

			// Decoder for Inline_response_200
            Decoders.addDecoder(clazz: Inline_response_200.self) { (source: AnyObject) -> Inline_response_200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_1
            Decoders.addDecoder(clazz: Inline_response_200_1.self) { (source: AnyObject) -> Inline_response_200_1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_1()
                instance.data = Decoders.decodeOptional(clazz: AggregatedCorrelation.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_2
            Decoders.addDecoder(clazz: Inline_response_200_2.self) { (source: AnyObject) -> Inline_response_200_2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_2()
                instance.data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_3
            Decoders.addDecoder(clazz: Inline_response_200_3.self) { (source: AnyObject) -> Inline_response_200_3 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_3()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_4
            Decoders.addDecoder(clazz: Inline_response_200_4.self) { (source: AnyObject) -> Inline_response_200_4 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_4()
                instance.data = Decoders.decodeOptional(clazz: Connection.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_5
            Decoders.addDecoder(clazz: Inline_response_200_5.self) { (source: AnyObject) -> Inline_response_200_5 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_5()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_6
            Decoders.addDecoder(clazz: Inline_response_200_6.self) { (source: AnyObject) -> Inline_response_200_6 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_6()
                instance.data = Decoders.decodeOptional(clazz: Connector.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_7
            Decoders.addDecoder(clazz: Inline_response_200_7.self) { (source: AnyObject) -> Inline_response_200_7 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_7()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_8
            Decoders.addDecoder(clazz: Inline_response_200_8.self) { (source: AnyObject) -> Inline_response_200_8 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_8()
                instance.data = Decoders.decodeOptional(clazz: Correlation.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_9
            Decoders.addDecoder(clazz: Inline_response_200_9.self) { (source: AnyObject) -> Inline_response_200_9 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_9()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_10
            Decoders.addDecoder(clazz: Inline_response_200_10.self) { (source: AnyObject) -> Inline_response_200_10 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_10()
                instance.data = Decoders.decodeOptional(clazz: Credential.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_11
            Decoders.addDecoder(clazz: Inline_response_200_11.self) { (source: AnyObject) -> Inline_response_200_11 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_11()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_12
            Decoders.addDecoder(clazz: Inline_response_200_12.self) { (source: AnyObject) -> Inline_response_200_12 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_12()
                instance.data = Decoders.decodeOptional(clazz: Measurement.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_13
            Decoders.addDecoder(clazz: Inline_response_200_13.self) { (source: AnyObject) -> Inline_response_200_13 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_13()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_14
            Decoders.addDecoder(clazz: Inline_response_200_14.self) { (source: AnyObject) -> Inline_response_200_14 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_14()
                instance.data = Decoders.decodeOptional(clazz: Source.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_15
            Decoders.addDecoder(clazz: Inline_response_200_15.self) { (source: AnyObject) -> Inline_response_200_15 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_15()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_16
            Decoders.addDecoder(clazz: Inline_response_200_16.self) { (source: AnyObject) -> Inline_response_200_16 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_16()
                instance.data = Decoders.decodeOptional(clazz: UnitCategory.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_17
            Decoders.addDecoder(clazz: Inline_response_200_17.self) { (source: AnyObject) -> Inline_response_200_17 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_17()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_18
            Decoders.addDecoder(clazz: Inline_response_200_18.self) { (source: AnyObject) -> Inline_response_200_18 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_18()
                instance.data = Decoders.decodeOptional(clazz: Unit.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_19
            Decoders.addDecoder(clazz: Inline_response_200_19.self) { (source: AnyObject) -> Inline_response_200_19 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_19()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_20
            Decoders.addDecoder(clazz: Inline_response_200_20.self) { (source: AnyObject) -> Inline_response_200_20 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_20()
                instance.data = Decoders.decodeOptional(clazz: Update.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_21
            Decoders.addDecoder(clazz: Inline_response_200_21.self) { (source: AnyObject) -> Inline_response_200_21 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_21()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_22
            Decoders.addDecoder(clazz: Inline_response_200_22.self) { (source: AnyObject) -> Inline_response_200_22 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_22()
                instance.data = Decoders.decodeOptional(clazz: UserVariable.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_23
            Decoders.addDecoder(clazz: Inline_response_200_23.self) { (source: AnyObject) -> Inline_response_200_23 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_23()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_24
            Decoders.addDecoder(clazz: Inline_response_200_24.self) { (source: AnyObject) -> Inline_response_200_24 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_24()
                instance.data = Decoders.decodeOptional(clazz: VariableCategory.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_25
            Decoders.addDecoder(clazz: Inline_response_200_25.self) { (source: AnyObject) -> Inline_response_200_25 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_25()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_26
            Decoders.addDecoder(clazz: Inline_response_200_26.self) { (source: AnyObject) -> Inline_response_200_26 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_26()
                instance.data = Decoders.decodeOptional(clazz: VariableUserSource.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_27
            Decoders.addDecoder(clazz: Inline_response_200_27.self) { (source: AnyObject) -> Inline_response_200_27 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_27()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_28
            Decoders.addDecoder(clazz: Inline_response_200_28.self) { (source: AnyObject) -> Inline_response_200_28 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_28()
                instance.data = Decoders.decodeOptional(clazz: Variable.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_29
            Decoders.addDecoder(clazz: Inline_response_200_29.self) { (source: AnyObject) -> Inline_response_200_29 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_29()
                instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			

			// Decoder for Inline_response_200_30
            Decoders.addDecoder(clazz: Inline_response_200_30.self) { (source: AnyObject) -> Inline_response_200_30 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Inline_response_200_30()
                instance.data = Decoders.decodeOptional(clazz: Vote.self, source: sourceDictionary["data"])
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }
			
        }
    }
}
