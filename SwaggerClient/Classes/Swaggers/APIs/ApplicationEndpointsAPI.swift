//
// ApplicationEndpointsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ApplicationEndpointsAPI: APIBase {
    /**
     Get all Connections
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) The id for the connector data source for which the connection is connected (optional)
     - parameter connectStatus: (query) Indicates whether a connector is currently connected to a service for a user. (optional)
     - parameter connectError: (query) Error message if there is a problem with authorizing this connection. (optional)
     - parameter updateRequestedAt: (query) Time at which an update was requested by a user. (optional)
     - parameter updateStatus: (query) Indicates whether a connector is currently updated. (optional)
     - parameter updateError: (query) Indicates if there was an error during the update. (optional)
     - parameter lastSuccessfulUpdatedAt: (query) The time at which the connector was last successfully updated. (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationConnectionsGet(accessToken accessToken: String? = nil, connectorId: Int32? = nil, connectStatus: String? = nil, connectError: String? = nil, updateRequestedAt: String? = nil, updateStatus: String? = nil, updateError: String? = nil, lastSuccessfulUpdatedAt: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2003?, error: ErrorType?) -> Void)) {
        v2ApplicationConnectionsGetWithRequestBuilder(accessToken: accessToken, connectorId: connectorId, connectStatus: connectStatus, connectError: connectError, updateRequestedAt: updateRequestedAt, updateStatus: updateStatus, updateError: updateError, lastSuccessfulUpdatedAt: lastSuccessfulUpdatedAt, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all Connections
     - GET /v2/application/connections
     - Get all Connections
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "id" : 123,
    "update_status" : "aeiou",
    "connector_id" : 123,
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "connect_status" : "aeiou",
    "update_requested_at" : "2000-01-23T04:56:07.000+0000",
    "last_successful_updated_at" : "2000-01-23T04:56:07.000+0000",
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "user_id" : 123,
    "update_error" : "aeiou",
    "connect_error" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) The id for the connector data source for which the connection is connected (optional)
     - parameter connectStatus: (query) Indicates whether a connector is currently connected to a service for a user. (optional)
     - parameter connectError: (query) Error message if there is a problem with authorizing this connection. (optional)
     - parameter updateRequestedAt: (query) Time at which an update was requested by a user. (optional)
     - parameter updateStatus: (query) Indicates whether a connector is currently updated. (optional)
     - parameter updateError: (query) Indicates if there was an error during the update. (optional)
     - parameter lastSuccessfulUpdatedAt: (query) The time at which the connector was last successfully updated. (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2003> 
     */
    public class func v2ApplicationConnectionsGetWithRequestBuilder(accessToken accessToken: String? = nil, connectorId: Int32? = nil, connectStatus: String? = nil, connectError: String? = nil, updateRequestedAt: String? = nil, updateStatus: String? = nil, updateError: String? = nil, lastSuccessfulUpdatedAt: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2003> {
        let path = "/v2/application/connections"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "connector_id": connectorId?.encodeToJSON(),
            "connect_status": connectStatus,
            "connect_error": connectError,
            "update_requested_at": updateRequestedAt,
            "update_status": updateStatus,
            "update_error": updateError,
            "last_successful_updated_at": lastSuccessfulUpdatedAt,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all Credentials
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) The id for the connector data source from which the credential was obtained (optional)
     - parameter attrKey: (query) Attribute name such as token, userid, username, or password (optional)
     - parameter attrValue: (query) Encrypted value for the attribute specified (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationCredentialsGet(accessToken accessToken: String? = nil, connectorId: Int32? = nil, attrKey: String? = nil, attrValue: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2004?, error: ErrorType?) -> Void)) {
        v2ApplicationCredentialsGetWithRequestBuilder(accessToken: accessToken, connectorId: connectorId, attrKey: attrKey, attrValue: attrValue, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all Credentials
     - GET /v2/application/credentials
     - Get all Credentials
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "connector_id" : "",
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "attr_key" : "aeiou",
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "user_id" : "",
    "attr_value" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) The id for the connector data source from which the credential was obtained (optional)
     - parameter attrKey: (query) Attribute name such as token, userid, username, or password (optional)
     - parameter attrValue: (query) Encrypted value for the attribute specified (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2004> 
     */
    public class func v2ApplicationCredentialsGetWithRequestBuilder(accessToken accessToken: String? = nil, connectorId: Int32? = nil, attrKey: String? = nil, attrValue: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/v2/application/credentials"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "connector_id": connectorId?.encodeToJSON(),
            "attr_key": attrKey,
            "attr_value": attrValue,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get measurements for all users using your application
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which originally stored the measurement (optional)
     - parameter connectorId: (query) The id for the connector data source from which the measurement was obtained (optional)
     - parameter variableId: (query) ID of the variable for which we are creating the measurement records (optional)
     - parameter sourceId: (query) Application or device used to record the measurement values (optional)
     - parameter startTime: (query) start time for the measurement event. Use ISO 8601 datetime format  (optional)
     - parameter value: (query) The value of the measurement after conversion to the default unit for that variable (optional)
     - parameter unitId: (query) The default unit id for the variable (optional)
     - parameter originalValue: (query) Unconverted value of measurement as originally posted (before conversion to default unit) (optional)
     - parameter originalUnitId: (query) Unit id of the measurement as originally submitted (optional)
     - parameter duration: (query) Duration of the event being measurement in seconds (optional)
     - parameter note: (query) An optional note the user may include with their measurement (optional)
     - parameter latitude: (query) Latitude at which the measurement was taken (optional)
     - parameter longitude: (query) Longitude at which the measurement was taken (optional)
     - parameter location: (query) Optional human readable name for the location where the measurement was recorded (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter error: (query) An error message if there is a problem with the measurement (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationMeasurementsGet(accessToken accessToken: String? = nil, clientId: String? = nil, connectorId: Int32? = nil, variableId: Int32? = nil, sourceId: Int32? = nil, startTime: String? = nil, value: Double? = nil, unitId: Int32? = nil, originalValue: Double? = nil, originalUnitId: Int32? = nil, duration: Int32? = nil, note: String? = nil, latitude: Double? = nil, longitude: Double? = nil, location: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, error: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2005?, error: ErrorType?) -> Void)) {
        v2ApplicationMeasurementsGetWithRequestBuilder(accessToken: accessToken, clientId: clientId, connectorId: connectorId, variableId: variableId, sourceId: sourceId, startTime: startTime, value: value, unitId: unitId, originalValue: originalValue, originalUnitId: originalUnitId, duration: duration, note: note, latitude: latitude, longitude: longitude, location: location, createdAt: createdAt, updatedAt: updatedAt, error: error, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get measurements for all users using your application
     - GET /v2/application/measurements
     - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "startTime" : "aeiou",
    "unit" : "aeiou",
    "source" : "aeiou",
    "humanTime" : {
      "timezone" : "aeiou",
      "timezone_type" : "",
      "date" : "aeiou"
    },
    "storedAbbreviatedUnitName" : "aeiou",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "storedValue" : 1.3579000000000001069366817318950779736042022705078125,
    "abbreviatedUnitName" : "aeiou",
    "originalValue" : "",
    "originalAbbreviatedUnitName" : "aeiou",
    "variable" : "aeiou",
    "note" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which originally stored the measurement (optional)
     - parameter connectorId: (query) The id for the connector data source from which the measurement was obtained (optional)
     - parameter variableId: (query) ID of the variable for which we are creating the measurement records (optional)
     - parameter sourceId: (query) Application or device used to record the measurement values (optional)
     - parameter startTime: (query) start time for the measurement event. Use ISO 8601 datetime format  (optional)
     - parameter value: (query) The value of the measurement after conversion to the default unit for that variable (optional)
     - parameter unitId: (query) The default unit id for the variable (optional)
     - parameter originalValue: (query) Unconverted value of measurement as originally posted (before conversion to default unit) (optional)
     - parameter originalUnitId: (query) Unit id of the measurement as originally submitted (optional)
     - parameter duration: (query) Duration of the event being measurement in seconds (optional)
     - parameter note: (query) An optional note the user may include with their measurement (optional)
     - parameter latitude: (query) Latitude at which the measurement was taken (optional)
     - parameter longitude: (query) Longitude at which the measurement was taken (optional)
     - parameter location: (query) Optional human readable name for the location where the measurement was recorded (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter error: (query) An error message if there is a problem with the measurement (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2005> 
     */
    public class func v2ApplicationMeasurementsGetWithRequestBuilder(accessToken accessToken: String? = nil, clientId: String? = nil, connectorId: Int32? = nil, variableId: Int32? = nil, sourceId: Int32? = nil, startTime: String? = nil, value: Double? = nil, unitId: Int32? = nil, originalValue: Double? = nil, originalUnitId: Int32? = nil, duration: Int32? = nil, note: String? = nil, latitude: Double? = nil, longitude: Double? = nil, location: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, error: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2005> {
        let path = "/v2/application/measurements"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "client_id": clientId,
            "connector_id": connectorId?.encodeToJSON(),
            "variable_id": variableId?.encodeToJSON(),
            "source_id": sourceId?.encodeToJSON(),
            "start_time": startTime,
            "value": value,
            "unit_id": unitId?.encodeToJSON(),
            "original_value": originalValue,
            "original_unit_id": originalUnitId?.encodeToJSON(),
            "duration": duration?.encodeToJSON(),
            "note": note,
            "latitude": latitude,
            "longitude": longitude,
            "location": location,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "error": error,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get tracking reminders
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this trackingReminder (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationTrackingRemindersGet(accessToken accessToken: String? = nil, clientId: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2001?, error: ErrorType?) -> Void)) {
        v2ApplicationTrackingRemindersGetWithRequestBuilder(accessToken: accessToken, clientId: clientId, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get tracking reminders
     - GET /v2/application/trackingReminders
     - Get the variable id, frequency, and default value for the user tracking reminders 
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "reminderStartTime" : "aeiou",
    "thirdDailyReminderTime" : "aeiou",
    "firstDailyReminderTime" : "aeiou",
    "reminderEndTime" : "aeiou",
    "lastReminded" : "2000-01-23T04:56:07.000+0000",
    "variableName" : "aeiou",
    "secondDailyReminderTime" : "aeiou",
    "lastTracked" : "2000-01-23T04:56:07.000+0000",
    "popUp" : true,
    "sms" : true,
    "clientId" : "aeiou",
    "updatedAt" : "2000-01-23T04:56:07.000+0000",
    "startTrackingDate" : "aeiou",
    "id" : 123,
    "combinationOperation" : "aeiou",
    "stopTrackingDate" : "aeiou",
    "email" : true,
    "reminderFrequency" : 123,
    "userId" : 123,
    "notificationBar" : true,
    "reminderSound" : "aeiou",
    "abbreviatedUnitName" : "aeiou",
    "variableId" : 123,
    "defaultValue" : 1.3579000000000001069366817318950779736042022705078125,
    "variableCategoryName" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this trackingReminder (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    public class func v2ApplicationTrackingRemindersGetWithRequestBuilder(accessToken accessToken: String? = nil, clientId: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/v2/application/trackingReminders"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "client_id": clientId,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all Updates
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) connector_id (optional)
     - parameter numberOfMeasurements: (query) number_of_measurements (optional)
     - parameter success: (query) success (optional)
     - parameter message: (query) message (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationUpdatesGet(accessToken accessToken: String? = nil, connectorId: Int32? = nil, numberOfMeasurements: Int32? = nil, success: Bool? = nil, message: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2006?, error: ErrorType?) -> Void)) {
        v2ApplicationUpdatesGetWithRequestBuilder(accessToken: accessToken, connectorId: connectorId, numberOfMeasurements: numberOfMeasurements, success: success, message: message, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all Updates
     - GET /v2/application/updates
     - Get all Updates
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "message" : "aeiou",
    "id" : 123,
    "number_of_measurements" : 123,
    "connector_id" : 123,
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "user_id" : 123,
    "success" : true
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) Application&#39;s OAuth2 access token (optional)
     - parameter connectorId: (query) connector_id (optional)
     - parameter numberOfMeasurements: (query) number_of_measurements (optional)
     - parameter success: (query) success (optional)
     - parameter message: (query) message (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2006> 
     */
    public class func v2ApplicationUpdatesGetWithRequestBuilder(accessToken accessToken: String? = nil, connectorId: Int32? = nil, numberOfMeasurements: Int32? = nil, success: Bool? = nil, message: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2006> {
        let path = "/v2/application/updates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "connector_id": connectorId?.encodeToJSON(),
            "number_of_measurements": numberOfMeasurements?.encodeToJSON(),
            "success": success,
            "message": message,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all UserVariableRelationships
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter id: (query) id (optional)
     - parameter confidenceLevel: (query) Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     - parameter confidenceScore: (query) A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     - parameter direction: (query) Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. (optional)
     - parameter durationOfAction: (query) Estimated number of seconds following the onset delay in which a stimulus produces a perceivable effect (optional)
     - parameter errorMessage: (query) error_message (optional)
     - parameter onsetDelay: (query) Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     - parameter outcomeVariableId: (query) Variable ID for the outcome variable (optional)
     - parameter predictorVariableId: (query) Variable ID for the predictor variable (optional)
     - parameter predictorUnitId: (query) ID for default unit of the predictor variable (optional)
     - parameter sinnRank: (query) A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. (optional)
     - parameter strengthLevel: (query) Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. (optional)
     - parameter strengthScore: (query) A value represented to the size of the effect which the predictor appears to have on the outcome. (optional)
     - parameter vote: (query) vote (optional)
     - parameter valuePredictingHighOutcome: (query) Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value (optional)
     - parameter valuePredictingLowOutcome: (query) Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationUserVariableRelationshipsGet(accessToken accessToken: String? = nil, id: Int32? = nil, confidenceLevel: String? = nil, confidenceScore: Double? = nil, direction: String? = nil, durationOfAction: Int32? = nil, errorMessage: String? = nil, onsetDelay: Int32? = nil, outcomeVariableId: Int32? = nil, predictorVariableId: Int32? = nil, predictorUnitId: Int32? = nil, sinnRank: Double? = nil, strengthLevel: String? = nil, strengthScore: Double? = nil, vote: String? = nil, valuePredictingHighOutcome: Double? = nil, valuePredictingLowOutcome: Double? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2007?, error: ErrorType?) -> Void)) {
        v2ApplicationUserVariableRelationshipsGetWithRequestBuilder(accessToken: accessToken, id: id, confidenceLevel: confidenceLevel, confidenceScore: confidenceScore, direction: direction, durationOfAction: durationOfAction, errorMessage: errorMessage, onsetDelay: onsetDelay, outcomeVariableId: outcomeVariableId, predictorVariableId: predictorVariableId, predictorUnitId: predictorUnitId, sinnRank: sinnRank, strengthLevel: strengthLevel, strengthScore: strengthScore, vote: vote, valuePredictingHighOutcome: valuePredictingHighOutcome, valuePredictingLowOutcome: valuePredictingLowOutcome, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all UserVariableRelationships
     - GET /v2/application/userVariableRelationships
     - Get all UserVariableRelationships
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "confidence_level" : "aeiou",
    "vote" : "aeiou",
    "direction" : "aeiou",
    "sinn_rank" : 1.3579000000000001069366817318950779736042022705078125,
    "predictor_variable_id" : 123,
    "id" : 123,
    "value_predicting_high_outcome" : 1.3579000000000001069366817318950779736042022705078125,
    "confidence_score" : 1.3579000000000001069366817318950779736042022705078125,
    "strength_level" : "aeiou",
    "outcome_variable_id" : 123,
    "value_predicting_low_outcome" : 1.3579000000000001069366817318950779736042022705078125,
    "error_message" : "aeiou",
    "user_id" : 123,
    "strength_score" : 1.3579000000000001069366817318950779736042022705078125,
    "predictor_unit_id" : 123,
    "duration_of_action" : 123,
    "onset_delay" : 123
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter id: (query) id (optional)
     - parameter confidenceLevel: (query) Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     - parameter confidenceScore: (query) A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     - parameter direction: (query) Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. (optional)
     - parameter durationOfAction: (query) Estimated number of seconds following the onset delay in which a stimulus produces a perceivable effect (optional)
     - parameter errorMessage: (query) error_message (optional)
     - parameter onsetDelay: (query) Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     - parameter outcomeVariableId: (query) Variable ID for the outcome variable (optional)
     - parameter predictorVariableId: (query) Variable ID for the predictor variable (optional)
     - parameter predictorUnitId: (query) ID for default unit of the predictor variable (optional)
     - parameter sinnRank: (query) A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. (optional)
     - parameter strengthLevel: (query) Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. (optional)
     - parameter strengthScore: (query) A value represented to the size of the effect which the predictor appears to have on the outcome. (optional)
     - parameter vote: (query) vote (optional)
     - parameter valuePredictingHighOutcome: (query) Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value (optional)
     - parameter valuePredictingLowOutcome: (query) Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2007> 
     */
    public class func v2ApplicationUserVariableRelationshipsGetWithRequestBuilder(accessToken accessToken: String? = nil, id: Int32? = nil, confidenceLevel: String? = nil, confidenceScore: Double? = nil, direction: String? = nil, durationOfAction: Int32? = nil, errorMessage: String? = nil, onsetDelay: Int32? = nil, outcomeVariableId: Int32? = nil, predictorVariableId: Int32? = nil, predictorUnitId: Int32? = nil, sinnRank: Double? = nil, strengthLevel: String? = nil, strengthScore: Double? = nil, vote: String? = nil, valuePredictingHighOutcome: Double? = nil, valuePredictingLowOutcome: Double? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2007> {
        let path = "/v2/application/userVariableRelationships"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "id": id?.encodeToJSON(),
            "confidence_level": confidenceLevel,
            "confidence_score": confidenceScore,
            "direction": direction,
            "duration_of_action": durationOfAction?.encodeToJSON(),
            "error_message": errorMessage,
            "onset_delay": onsetDelay?.encodeToJSON(),
            "outcome_variable_id": outcomeVariableId?.encodeToJSON(),
            "predictor_variable_id": predictorVariableId?.encodeToJSON(),
            "predictor_unit_id": predictorUnitId?.encodeToJSON(),
            "sinn_rank": sinnRank,
            "strength_level": strengthLevel,
            "strength_score": strengthScore,
            "vote": vote,
            "value_predicting_high_outcome": valuePredictingHighOutcome,
            "value_predicting_low_outcome": valuePredictingLowOutcome,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all UserVariables
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this user variable (optional)
     - parameter parentId: (query) ID of the parent variable if this variable has any parent (optional)
     - parameter variableId: (query) ID of variable (optional)
     - parameter defaultUnitId: (query) D of unit to use for this variable (optional)
     - parameter minimumAllowedValue: (query) Minimum reasonable value for this variable (uses default unit) (optional)
     - parameter maximumAllowedValue: (query) Maximum reasonable value for this variable (uses default unit) (optional)
     - parameter fillingValue: (query) Value for replacing null measurements (optional)
     - parameter joinWith: (query) The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     - parameter onsetDelay: (query) Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     - parameter durationOfAction: (query) Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     - parameter variableCategoryId: (query) ID of variable category (optional)
     - parameter updated: (query) updated (optional)
     - parameter _public: (query) Is variable public (optional)
     - parameter causeOnly: (query) A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     - parameter fillingType: (query) 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     - parameter numberOfMeasurements: (query) Number of measurements (optional)
     - parameter numberOfProcessedMeasurements: (query) Number of processed measurements (optional)
     - parameter measurementsAtLastAnalysis: (query) Number of measurements at last analysis (optional)
     - parameter lastUnitId: (query) ID of last Unit (optional)
     - parameter lastOriginalUnitId: (query) ID of last original Unit (optional)
     - parameter lastOriginalValue: (query) Last original value which is stored (optional)
     - parameter lastValue: (query) Last Value (optional)
     - parameter lastSourceId: (query) ID of last source (optional)
     - parameter numberOfCorrelations: (query) Number of correlations for this variable (optional)
     - parameter status: (query) status (optional)
     - parameter errorMessage: (query) error_message (optional)
     - parameter lastSuccessfulUpdateTime: (query) When this variable or its settings were last updated (optional)
     - parameter standardDeviation: (query) Standard deviation (optional)
     - parameter variance: (query) Variance (optional)
     - parameter minimumRecordedValue: (query) Minimum recorded value of this variable (optional)
     - parameter maximumRecordedValue: (query) Maximum recorded value of this variable (optional)
     - parameter mean: (query) Mean (optional)
     - parameter median: (query) Median (optional)
     - parameter mostCommonUnitId: (query) Most common Unit ID (optional)
     - parameter mostCommonValue: (query) Most common value (optional)
     - parameter numberOfUniqueDailyValues: (query) Number of unique daily values (optional)
     - parameter numberOfChanges: (query) Number of changes (optional)
     - parameter skewness: (query) Skewness (optional)
     - parameter kurtosis: (query) Kurtosis (optional)
     - parameter latitude: (query) Latitude (optional)
     - parameter longitude: (query) Longitude (optional)
     - parameter location: (query) Location (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter outcome: (query) Outcome variables (those with &#x60;outcome&#x60; &#x3D;&#x3D; 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     - parameter sources: (query) Comma-separated list of source names to limit variables to those sources (optional)
     - parameter earliestSourceTime: (query) Earliest source time (optional)
     - parameter latestSourceTime: (query) Latest source time (optional)
     - parameter earliestMeasurementTime: (query) Earliest measurement time (optional)
     - parameter latestMeasurementTime: (query) Latest measurement time (optional)
     - parameter earliestFillingTime: (query) Earliest filling time (optional)
     - parameter latestFillingTime: (query) Latest filling time (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationUserVariablesGet(accessToken accessToken: String? = nil, clientId: String? = nil, parentId: Int32? = nil, variableId: Int32? = nil, defaultUnitId: Int32? = nil, minimumAllowedValue: Double? = nil, maximumAllowedValue: Double? = nil, fillingValue: Double? = nil, joinWith: Int32? = nil, onsetDelay: Int32? = nil, durationOfAction: Int32? = nil, variableCategoryId: Int32? = nil, updated: Int32? = nil, _public: Int32? = nil, causeOnly: Bool? = nil, fillingType: String? = nil, numberOfMeasurements: Int32? = nil, numberOfProcessedMeasurements: Int32? = nil, measurementsAtLastAnalysis: Int32? = nil, lastUnitId: Int32? = nil, lastOriginalUnitId: Int32? = nil, lastOriginalValue: Int32? = nil, lastValue: Double? = nil, lastSourceId: Int32? = nil, numberOfCorrelations: Int32? = nil, status: String? = nil, errorMessage: String? = nil, lastSuccessfulUpdateTime: String? = nil, standardDeviation: Double? = nil, variance: Double? = nil, minimumRecordedValue: Double? = nil, maximumRecordedValue: Double? = nil, mean: Double? = nil, median: Double? = nil, mostCommonUnitId: Int32? = nil, mostCommonValue: Double? = nil, numberOfUniqueDailyValues: Double? = nil, numberOfChanges: Int32? = nil, skewness: Double? = nil, kurtosis: Double? = nil, latitude: Double? = nil, longitude: Double? = nil, location: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, outcome: Bool? = nil, sources: String? = nil, earliestSourceTime: Int32? = nil, latestSourceTime: Int32? = nil, earliestMeasurementTime: Int32? = nil, latestMeasurementTime: Int32? = nil, earliestFillingTime: Int32? = nil, latestFillingTime: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2008?, error: ErrorType?) -> Void)) {
        v2ApplicationUserVariablesGetWithRequestBuilder(accessToken: accessToken, clientId: clientId, parentId: parentId, variableId: variableId, defaultUnitId: defaultUnitId, minimumAllowedValue: minimumAllowedValue, maximumAllowedValue: maximumAllowedValue, fillingValue: fillingValue, joinWith: joinWith, onsetDelay: onsetDelay, durationOfAction: durationOfAction, variableCategoryId: variableCategoryId, updated: updated, _public: _public, causeOnly: causeOnly, fillingType: fillingType, numberOfMeasurements: numberOfMeasurements, numberOfProcessedMeasurements: numberOfProcessedMeasurements, measurementsAtLastAnalysis: measurementsAtLastAnalysis, lastUnitId: lastUnitId, lastOriginalUnitId: lastOriginalUnitId, lastOriginalValue: lastOriginalValue, lastValue: lastValue, lastSourceId: lastSourceId, numberOfCorrelations: numberOfCorrelations, status: status, errorMessage: errorMessage, lastSuccessfulUpdateTime: lastSuccessfulUpdateTime, standardDeviation: standardDeviation, variance: variance, minimumRecordedValue: minimumRecordedValue, maximumRecordedValue: maximumRecordedValue, mean: mean, median: median, mostCommonUnitId: mostCommonUnitId, mostCommonValue: mostCommonValue, numberOfUniqueDailyValues: numberOfUniqueDailyValues, numberOfChanges: numberOfChanges, skewness: skewness, kurtosis: kurtosis, latitude: latitude, longitude: longitude, location: location, createdAt: createdAt, updatedAt: updatedAt, outcome: outcome, sources: sources, earliestSourceTime: earliestSourceTime, latestSourceTime: latestSourceTime, earliestMeasurementTime: earliestMeasurementTime, latestMeasurementTime: latestMeasurementTime, earliestFillingTime: earliestFillingTime, latestFillingTime: latestFillingTime, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all UserVariables
     - GET /v2/application/userVariables
     - Get all UserVariables
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "earliest_source_time" : 123,
    "number_of_unique_daily_values" : 1.3579000000000001069366817318950779736042022705078125,
    "location" : "aeiou",
    "number_of_correlations" : 123,
    "minimum_allowed_value" : 1.3579000000000001069366817318950779736042022705078125,
    "sources" : "aeiou",
    "last_original_value" : 123,
    "updated" : 123,
    "maximum_allowed_value" : 1.3579000000000001069366817318950779736042022705078125,
    "error_message" : "aeiou",
    "earliest_measurement_time" : 123,
    "longitude" : 1.3579000000000001069366817318950779736042022705078125,
    "client_id" : "aeiou",
    "latest_measurement_time" : 123,
    "onset_delay" : 123,
    "parent_id" : 123,
    "number_of_measurements" : 123,
    "latest_source_time" : 123,
    "status" : "aeiou",
    "last_successful_update_time" : "2000-01-23T04:56:07.000+0000",
    "experiment_start_time" : "2000-01-23T04:56:07.000+0000",
    "median" : 1.3579000000000001069366817318950779736042022705078125,
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "last_source_id" : 123,
    "number_of_processed_measurements" : 123,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "last_unit_id" : 123,
    "default_unit_id" : 123,
    "standard_deviation" : 1.3579000000000001069366817318950779736042022705078125,
    "variable_category_id" : 123,
    "filling_type" : "aeiou",
    "most_common_value" : 1.3579000000000001069366817318950779736042022705078125,
    "join_with" : 123,
    "mean" : 1.3579000000000001069366817318950779736042022705078125,
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "user_id" : 123,
    "cause_only" : true,
    "variable_id" : 123,
    "earliest_filling_time" : 123,
    "number_of_changes" : 123,
    "most_common_unit_id" : 123,
    "kurtosis" : 1.3579000000000001069366817318950779736042022705078125,
    "last_value" : 1.3579000000000001069366817318950779736042022705078125,
    "latest_filling_time" : 123,
    "variance" : 1.3579000000000001069366817318950779736042022705078125,
    "experiment_end_time" : "2000-01-23T04:56:07.000+0000",
    "measurements_at_last_analysis" : 123,
    "outcome" : true,
    "last_original_unit_id" : 123,
    "filling_value" : 1.3579000000000001069366817318950779736042022705078125,
    "skewness" : 1.3579000000000001069366817318950779736042022705078125,
    "public" : 123,
    "duration_of_action" : 123,
    "minimum_recorded_value" : 1.3579000000000001069366817318950779736042022705078125,
    "maximum_recorded_daily_value" : 1.3579000000000001069366817318950779736042022705078125
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this user variable (optional)
     - parameter parentId: (query) ID of the parent variable if this variable has any parent (optional)
     - parameter variableId: (query) ID of variable (optional)
     - parameter defaultUnitId: (query) D of unit to use for this variable (optional)
     - parameter minimumAllowedValue: (query) Minimum reasonable value for this variable (uses default unit) (optional)
     - parameter maximumAllowedValue: (query) Maximum reasonable value for this variable (uses default unit) (optional)
     - parameter fillingValue: (query) Value for replacing null measurements (optional)
     - parameter joinWith: (query) The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     - parameter onsetDelay: (query) Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     - parameter durationOfAction: (query) Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     - parameter variableCategoryId: (query) ID of variable category (optional)
     - parameter updated: (query) updated (optional)
     - parameter _public: (query) Is variable public (optional)
     - parameter causeOnly: (query) A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     - parameter fillingType: (query) 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     - parameter numberOfMeasurements: (query) Number of measurements (optional)
     - parameter numberOfProcessedMeasurements: (query) Number of processed measurements (optional)
     - parameter measurementsAtLastAnalysis: (query) Number of measurements at last analysis (optional)
     - parameter lastUnitId: (query) ID of last Unit (optional)
     - parameter lastOriginalUnitId: (query) ID of last original Unit (optional)
     - parameter lastOriginalValue: (query) Last original value which is stored (optional)
     - parameter lastValue: (query) Last Value (optional)
     - parameter lastSourceId: (query) ID of last source (optional)
     - parameter numberOfCorrelations: (query) Number of correlations for this variable (optional)
     - parameter status: (query) status (optional)
     - parameter errorMessage: (query) error_message (optional)
     - parameter lastSuccessfulUpdateTime: (query) When this variable or its settings were last updated (optional)
     - parameter standardDeviation: (query) Standard deviation (optional)
     - parameter variance: (query) Variance (optional)
     - parameter minimumRecordedValue: (query) Minimum recorded value of this variable (optional)
     - parameter maximumRecordedValue: (query) Maximum recorded value of this variable (optional)
     - parameter mean: (query) Mean (optional)
     - parameter median: (query) Median (optional)
     - parameter mostCommonUnitId: (query) Most common Unit ID (optional)
     - parameter mostCommonValue: (query) Most common value (optional)
     - parameter numberOfUniqueDailyValues: (query) Number of unique daily values (optional)
     - parameter numberOfChanges: (query) Number of changes (optional)
     - parameter skewness: (query) Skewness (optional)
     - parameter kurtosis: (query) Kurtosis (optional)
     - parameter latitude: (query) Latitude (optional)
     - parameter longitude: (query) Longitude (optional)
     - parameter location: (query) Location (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter outcome: (query) Outcome variables (those with &#x60;outcome&#x60; &#x3D;&#x3D; 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     - parameter sources: (query) Comma-separated list of source names to limit variables to those sources (optional)
     - parameter earliestSourceTime: (query) Earliest source time (optional)
     - parameter latestSourceTime: (query) Latest source time (optional)
     - parameter earliestMeasurementTime: (query) Earliest measurement time (optional)
     - parameter latestMeasurementTime: (query) Latest measurement time (optional)
     - parameter earliestFillingTime: (query) Earliest filling time (optional)
     - parameter latestFillingTime: (query) Latest filling time (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2008> 
     */
    public class func v2ApplicationUserVariablesGetWithRequestBuilder(accessToken accessToken: String? = nil, clientId: String? = nil, parentId: Int32? = nil, variableId: Int32? = nil, defaultUnitId: Int32? = nil, minimumAllowedValue: Double? = nil, maximumAllowedValue: Double? = nil, fillingValue: Double? = nil, joinWith: Int32? = nil, onsetDelay: Int32? = nil, durationOfAction: Int32? = nil, variableCategoryId: Int32? = nil, updated: Int32? = nil, _public: Int32? = nil, causeOnly: Bool? = nil, fillingType: String? = nil, numberOfMeasurements: Int32? = nil, numberOfProcessedMeasurements: Int32? = nil, measurementsAtLastAnalysis: Int32? = nil, lastUnitId: Int32? = nil, lastOriginalUnitId: Int32? = nil, lastOriginalValue: Int32? = nil, lastValue: Double? = nil, lastSourceId: Int32? = nil, numberOfCorrelations: Int32? = nil, status: String? = nil, errorMessage: String? = nil, lastSuccessfulUpdateTime: String? = nil, standardDeviation: Double? = nil, variance: Double? = nil, minimumRecordedValue: Double? = nil, maximumRecordedValue: Double? = nil, mean: Double? = nil, median: Double? = nil, mostCommonUnitId: Int32? = nil, mostCommonValue: Double? = nil, numberOfUniqueDailyValues: Double? = nil, numberOfChanges: Int32? = nil, skewness: Double? = nil, kurtosis: Double? = nil, latitude: Double? = nil, longitude: Double? = nil, location: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, outcome: Bool? = nil, sources: String? = nil, earliestSourceTime: Int32? = nil, latestSourceTime: Int32? = nil, earliestMeasurementTime: Int32? = nil, latestMeasurementTime: Int32? = nil, earliestFillingTime: Int32? = nil, latestFillingTime: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2008> {
        let path = "/v2/application/userVariables"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "client_id": clientId,
            "parent_id": parentId?.encodeToJSON(),
            "variable_id": variableId?.encodeToJSON(),
            "default_unit_id": defaultUnitId?.encodeToJSON(),
            "minimum_allowed_value": minimumAllowedValue,
            "maximum_allowed_value": maximumAllowedValue,
            "filling_value": fillingValue,
            "join_with": joinWith?.encodeToJSON(),
            "onset_delay": onsetDelay?.encodeToJSON(),
            "duration_of_action": durationOfAction?.encodeToJSON(),
            "variable_category_id": variableCategoryId?.encodeToJSON(),
            "updated": updated?.encodeToJSON(),
            "public": _public?.encodeToJSON(),
            "cause_only": causeOnly,
            "filling_type": fillingType,
            "number_of_measurements": numberOfMeasurements?.encodeToJSON(),
            "number_of_processed_measurements": numberOfProcessedMeasurements?.encodeToJSON(),
            "measurements_at_last_analysis": measurementsAtLastAnalysis?.encodeToJSON(),
            "last_unit_id": lastUnitId?.encodeToJSON(),
            "last_original_unit_id": lastOriginalUnitId?.encodeToJSON(),
            "last_original_value": lastOriginalValue?.encodeToJSON(),
            "last_value": lastValue,
            "last_source_id": lastSourceId?.encodeToJSON(),
            "number_of_correlations": numberOfCorrelations?.encodeToJSON(),
            "status": status,
            "error_message": errorMessage,
            "last_successful_update_time": lastSuccessfulUpdateTime,
            "standard_deviation": standardDeviation,
            "variance": variance,
            "minimum_recorded_value": minimumRecordedValue,
            "maximum_recorded_value": maximumRecordedValue,
            "mean": mean,
            "median": median,
            "most_common_unit_id": mostCommonUnitId?.encodeToJSON(),
            "most_common_value": mostCommonValue,
            "number_of_unique_daily_values": numberOfUniqueDailyValues,
            "number_of_changes": numberOfChanges?.encodeToJSON(),
            "skewness": skewness,
            "kurtosis": kurtosis,
            "latitude": latitude,
            "longitude": longitude,
            "location": location,
            "created_at": createdAt,
            "updated_at": updatedAt,
            "outcome": outcome,
            "sources": sources,
            "earliest_source_time": earliestSourceTime?.encodeToJSON(),
            "latest_source_time": latestSourceTime?.encodeToJSON(),
            "earliest_measurement_time": earliestMeasurementTime?.encodeToJSON(),
            "latest_measurement_time": latestMeasurementTime?.encodeToJSON(),
            "earliest_filling_time": earliestFillingTime?.encodeToJSON(),
            "latest_filling_time": latestFillingTime?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all VariableUserSources
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter variableId: (query) ID of variable (optional)
     - parameter timestamp: (query) Time that this measurement occurred Uses epoch minute (epoch time divided by 60) (optional)
     - parameter earliestMeasurementTime: (query) Earliest measurement time (optional)
     - parameter latestMeasurementTime: (query) Latest measurement time (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationVariableUserSourcesGet(accessToken accessToken: String? = nil, variableId: Int32? = nil, timestamp: Int32? = nil, earliestMeasurementTime: Int32? = nil, latestMeasurementTime: Int32? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse2009?, error: ErrorType?) -> Void)) {
        v2ApplicationVariableUserSourcesGetWithRequestBuilder(accessToken: accessToken, variableId: variableId, timestamp: timestamp, earliestMeasurementTime: earliestMeasurementTime, latestMeasurementTime: latestMeasurementTime, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all VariableUserSources
     - GET /v2/application/variableUserSources
     - Get all VariableUserSources
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "timestamp" : 123,
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "source_id" : 123,
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "earliest_measurement_time" : 123,
    "user_id" : 123,
    "variable_id" : 123,
    "latest_measurement_time" : 123
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter variableId: (query) ID of variable (optional)
     - parameter timestamp: (query) Time that this measurement occurred Uses epoch minute (epoch time divided by 60) (optional)
     - parameter earliestMeasurementTime: (query) Earliest measurement time (optional)
     - parameter latestMeasurementTime: (query) Latest measurement time (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse2009> 
     */
    public class func v2ApplicationVariableUserSourcesGetWithRequestBuilder(accessToken accessToken: String? = nil, variableId: Int32? = nil, timestamp: Int32? = nil, earliestMeasurementTime: Int32? = nil, latestMeasurementTime: Int32? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse2009> {
        let path = "/v2/application/variableUserSources"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "variable_id": variableId?.encodeToJSON(),
            "timestamp": timestamp?.encodeToJSON(),
            "earliest_measurement_time": earliestMeasurementTime?.encodeToJSON(),
            "latest_measurement_time": latestMeasurementTime?.encodeToJSON(),
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2009>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get all Votes
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this vote (optional)
     - parameter causeId: (query) ID of predictor variable (optional)
     - parameter effectId: (query) ID of outcome variable (optional)
     - parameter value: (query) Value of Vote. 1 is for upvote. 0 is for downvote.  Otherwise, there is no vote. (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v2ApplicationVotesGet(accessToken accessToken: String? = nil, clientId: String? = nil, causeId: Int32? = nil, effectId: Int32? = nil, value: Int32? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil, completion: ((data: InlineResponse20010?, error: ErrorType?) -> Void)) {
        v2ApplicationVotesGetWithRequestBuilder(accessToken: accessToken, clientId: clientId, causeId: causeId, effectId: effectId, value: value, createdAt: createdAt, updatedAt: updatedAt, limit: limit, offset: offset, sort: sort).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get all Votes
     - GET /v2/application/votes
     - Get all Votes
     - OAuth:
       - type: oauth2
       - name: oauth2
     - API Key:
       - type: apiKey api_key 
       - name: internalApiKey
     - examples: [{example={
  "data" : [ {
    "id" : 123,
    "updated_at" : "2000-01-23T04:56:07.000+0000",
    "effect_id" : 123,
    "cause_id" : 123,
    "value" : 123,
    "created_at" : "2000-01-23T04:56:07.000+0000",
    "user_id" : 123,
    "client_id" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
     
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter clientId: (query) The ID of the client application which last created or updated this vote (optional)
     - parameter causeId: (query) ID of predictor variable (optional)
     - parameter effectId: (query) ID of outcome variable (optional)
     - parameter value: (query) Value of Vote. 1 is for upvote. 0 is for downvote.  Otherwise, there is no vote. (optional)
     - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format  (optional)
     - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format  (optional)
     - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)

     - returns: RequestBuilder<InlineResponse20010> 
     */
    public class func v2ApplicationVotesGetWithRequestBuilder(accessToken accessToken: String? = nil, clientId: String? = nil, causeId: Int32? = nil, effectId: Int32? = nil, value: Int32? = nil, createdAt: String? = nil, updatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, sort: String? = nil) -> RequestBuilder<InlineResponse20010> {
        let path = "/v2/application/votes"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "access_token": accessToken,
            "client_id": clientId,
            "cause_id": causeId?.encodeToJSON(),
            "effect_id": effectId?.encodeToJSON(),
            "value": value?.encodeToJSON(),
            "created_at": createdAt,
            "updated_at": updatedAt,
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "sort": sort
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse20010>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
