//
// TagsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TagsAPI: APIBase {
    /**
     Delete user tag or ingredient
     
     - parameter taggedVariableId: (query) This is the id of the variable being tagged with an ingredient or something. 
     - parameter tagVariableId: (query) This is the id of the ingredient variable whose value is determined based on the value of the tagged variable. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1UserTagsDeletePost(taggedVariableId taggedVariableId: Int32, tagVariableId: Int32, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1UserTagsDeletePostWithRequestBuilder(taggedVariableId: taggedVariableId, tagVariableId: tagVariableId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete user tag or ingredient
     - POST /v1/userTags/delete
     - Delete previously created user tags or ingredients.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{example={
  "message" : "aeiou",
  "status" : "",
  "success" : true
}, contentType=application/json}]
     
     - parameter taggedVariableId: (query) This is the id of the variable being tagged with an ingredient or something. 
     - parameter tagVariableId: (query) This is the id of the ingredient variable whose value is determined based on the value of the tagged variable. 

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1UserTagsDeletePostWithRequestBuilder(taggedVariableId taggedVariableId: Int32, tagVariableId: Int32) -> RequestBuilder<CommonResponse> {
        let path = "/v1/userTags/delete"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "taggedVariableId": taggedVariableId.encodeToJSON(),
            "tagVariableId": tagVariableId.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Post or update user tags or ingredients
     
     - parameter body: (body) Contains the new user tag data 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func v1UserTagsPost(body body: UserTag, accessToken: String? = nil, completion: ((data: CommonResponse?, error: ErrorType?) -> Void)) {
        v1UserTagsPostWithRequestBuilder(body: body, accessToken: accessToken).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Post or update user tags or ingredients
     - POST /v1/userTags
     - This endpoint allows users to tag foods with their ingredients.  This information will then be used to infer the user intake of the different ingredients by just entering the foods. The inferred intake levels will then be used to determine the effects of different nutrients on the user during analysis.
     - OAuth:
       - type: oauth2
       - name: oauth2
     - examples: [{example={
  "message" : "aeiou",
  "status" : "",
  "success" : true
}, contentType=application/json}]
     
     - parameter body: (body) Contains the new user tag data 
     - parameter accessToken: (query) User&#39;s OAuth2 access token (optional)

     - returns: RequestBuilder<CommonResponse> 
     */
    public class func v1UserTagsPostWithRequestBuilder(body body: UserTag, accessToken: String? = nil) -> RequestBuilder<CommonResponse> {
        let path = "/v1/userTags"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
