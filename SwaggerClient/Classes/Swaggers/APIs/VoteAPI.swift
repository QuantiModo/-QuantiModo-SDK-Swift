//
// VoteAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class VoteAPI: APIBase {
    
        /**
         
         Get all Votes
         
         - GET /votes
         - Get all Votes
         - examples: [{example={
  "data" : [ {
    "id" : 123,
    "updated_at" : "2015-11-03T22:25:27.494+0000",
    "effect_id" : 123,
    "cause_id" : 123,
    "value" : 123,
    "created_at" : "2015-11-03T22:25:27.494+0000",
    "user_id" : 123,
    "client_id" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
         
         - parameter clientId: (query) client_id
         - parameter userId: (query) user_id
         - parameter causeId: (query) cause_id
         - parameter effectId: (query) effect_id
         - parameter value: (query) value
         - parameter createdAt: (query) created_at
         - parameter updatedAt: (query) updated_at
         - parameter limit: (query) limit
         - parameter offset: (query) offset
         - parameter sort: (query) sort

         - returns: RequestBuilder<Inline_response_200_29> 
         */
        public class func votesGet(clientId clientId: String?, userId: Int?, causeId: Int?, effectId: Int?, value: Int?, createdAt: String?, updatedAt: String?, limit: Int?, offset: Int?, sort: String?) -> RequestBuilder<Inline_response_200_29> {
            let path = "/votes"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "clientId": clientId,
                "userId": userId,
                "causeId": causeId,
                "effectId": effectId,
                "value": value,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_29>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Store Vote
         
         - POST /votes
         - Store Vote
         - examples: [{example={
  "data" : {
    "id" : 123,
    "updated_at" : "2015-11-03T22:25:27.497+0000",
    "effect_id" : 123,
    "cause_id" : 123,
    "value" : 123,
    "created_at" : "2015-11-03T22:25:27.497+0000",
    "user_id" : 123,
    "client_id" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter body: (body) Vote that should be stored

         - returns: RequestBuilder<Inline_response_200_30> 
         */
        public class func votesPost(body body: Vote?) -> RequestBuilder<Inline_response_200_30> {
            let path = "/votes"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_30>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get Vote
         
         - GET /votes/{id}
         - Get Vote
         - examples: [{example={
  "data" : {
    "id" : 123,
    "updated_at" : "2015-11-03T22:25:27.498+0000",
    "effect_id" : 123,
    "cause_id" : 123,
    "value" : 123,
    "created_at" : "2015-11-03T22:25:27.498+0000",
    "user_id" : 123,
    "client_id" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Vote

         - returns: RequestBuilder<Inline_response_200_30> 
         */
        public class func votesIdGet(id id: Int) -> RequestBuilder<Inline_response_200_30> {
            var path = "/votes/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_30>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Update Vote
         
         - PUT /votes/{id}
         - Update Vote
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Vote
         - parameter body: (body) Vote that should be updated

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func votesIdPut(id id: Int, body: Vote?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/votes/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Delete Vote
         
         - DELETE /votes/{id}
         - Delete Vote
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Vote

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func votesIdDelete(id id: Int) -> RequestBuilder<Inline_response_200_2> {
            var path = "/votes/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: true)
        }
    
    }
}
