//
// ConnectionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class ConnectionAPI: APIBase {
    
        /**
         
         Get all Connections
         
         - GET /connections
         - Get all Connections
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : [ {
    "id" : 123,
    "update_status" : "aeiou",
    "connector_id" : 123,
    "updated_at" : "2016-02-09T02:17:55.367+0000",
    "connect_status" : "aeiou",
    "update_requested_at" : "2016-02-09T02:17:55.367+0000",
    "last_successful_updated_at" : "2016-02-09T02:17:55.367+0000",
    "created_at" : "2016-02-09T02:17:55.367+0000",
    "user_id" : 123,
    "update_error" : "aeiou",
    "connect_error" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter userId: (query) ID of user that owns this correlation
         - parameter connectorId: (query) The id for the connector data source for which the connection is connected
         - parameter connectStatus: (query) Indicates whether a connector is currently connected to a service for a user.
         - parameter connectError: (query) Error message if there is a problem with authorizing this connection.
         - parameter updateRequestedAt: (query) Time at which an update was requested by a user.
         - parameter updateStatus: (query) Indicates whether a connector is currently updated.
         - parameter updateError: (query) Indicates if there was an error during the update.
         - parameter lastSuccessfulUpdatedAt: (query) The time at which the connector was last successfully updated.
         - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format
         - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format
         - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
         - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
         - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.

         - returns: RequestBuilder<Inline_response_200_3> 
         */
        public class func connectionsGet(accessToken accessToken: String?, userId: Int?, connectorId: Int?, connectStatus: String?, connectError: String?, updateRequestedAt: String?, updateStatus: String?, updateError: String?, lastSuccessfulUpdatedAt: String?, createdAt: String?, updatedAt: String?, limit: Int?, offset: Int?, sort: String?) -> RequestBuilder<Inline_response_200_3> {
            let path = "/connections"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "userId": userId,
                "connectorId": connectorId,
                "connectStatus": connectStatus,
                "connectError": connectError,
                "updateRequestedAt": updateRequestedAt,
                "updateStatus": updateStatus,
                "updateError": updateError,
                "lastSuccessfulUpdatedAt": lastSuccessfulUpdatedAt,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_3>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Store Connection
         
         - POST /connections
         - Store Connection
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "id" : 123,
    "update_status" : "aeiou",
    "connector_id" : 123,
    "updated_at" : "2016-02-09T02:17:55.383+0000",
    "connect_status" : "aeiou",
    "update_requested_at" : "2016-02-09T02:17:55.383+0000",
    "last_successful_updated_at" : "2016-02-09T02:17:55.383+0000",
    "created_at" : "2016-02-09T02:17:55.383+0000",
    "user_id" : 123,
    "update_error" : "aeiou",
    "connect_error" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) Connection that should be stored

         - returns: RequestBuilder<Inline_response_200_14> 
         */
        public class func connectionsPost(accessToken accessToken: String?, body: Connection?) -> RequestBuilder<Inline_response_200_14> {
            let path = "/connections"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_14>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get Connection
         
         - GET /connections/{id}
         - Get Connection
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "id" : 123,
    "update_status" : "aeiou",
    "connector_id" : 123,
    "updated_at" : "2016-02-09T02:17:55.386+0000",
    "connect_status" : "aeiou",
    "update_requested_at" : "2016-02-09T02:17:55.386+0000",
    "last_successful_updated_at" : "2016-02-09T02:17:55.386+0000",
    "created_at" : "2016-02-09T02:17:55.386+0000",
    "user_id" : 123,
    "update_error" : "aeiou",
    "connect_error" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Connection
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_14> 
         */
        public class func connectionsIdGet(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_14> {
            var path = "/connections/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_14>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Update Connection
         
         - PUT /connections/{id}
         - Update Connection
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Connection
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) Connection that should be updated

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func connectionsIdPut(id id: Int, accessToken: String?, body: Connection?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/connections/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete Connection
         
         - DELETE /connections/{id}
         - Delete Connection
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Connection
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func connectionsIdDelete(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/connections/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
