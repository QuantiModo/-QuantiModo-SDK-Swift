//
// MeasurementsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class MeasurementsAPI: APIBase {
    
        /**
         
         Get measurement sources
         
         - GET /v1/measurementSources
         - Returns a list of all the apps from which measurement data is obtained.
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{example={
  "name" : "aeiou"
}, contentType=application/json}]

         - returns: RequestBuilder<MeasurementSource> 
         */
        public class func v1MeasurementSourcesGet() -> RequestBuilder<MeasurementSource> {
            let path = "/v1/measurementSources"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [:]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<MeasurementSource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Add a data source
         
         - POST /v1/measurementSources
         - Add a life-tracking app or device to the QuantiModo list of data sources.
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         - parameter body: (body) An array of names of data sources you want to add.
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Void> 
         */
        public class func v1MeasurementSourcesPost(body body: MeasurementSource, accessToken: String?) -> RequestBuilder<Void> {
            let path = "/v1/measurementSources"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get measurements for this user
         
         - GET /v1/measurements
         - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. <br>Supported filter parameters:<br><ul><li><b>value</b> - Value of measurement</li><li><b>lastUpdated</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{example={
  "startTime" : "aeiou",
  "unit" : "aeiou",
  "source" : "aeiou",
  "humanTime" : {
    "timezone" : "aeiou",
    "timezone_type" : "",
    "date" : "aeiou"
  },
  "storedAbbreviatedUnitName" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "storedValue" : 1.3579000000000001069366817318950779736042022705078125,
  "abbreviatedUnitName" : "aeiou",
  "originalValue" : "",
  "originalAbbreviatedUnitName" : "aeiou",
  "variable" : "aeiou",
  "note" : "aeiou"
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter variableName: (query) Name of the variable you want measurements for
         - parameter source: (query) Name of the source you want measurements for (supports exact name match only)
         - parameter value: (query) Value of measurement
         - parameter lastUpdated: (query) The time that this measurement was created or last updated in the format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
         - parameter unit: (query) The unit you want the measurements returned in
         - parameter startTime: (query) The lower limit of measurements returned (Epoch)
         - parameter createdAt: (query) The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
         - parameter updatedAt: (query) The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
         - parameter endTime: (query) The upper limit of measurements returned (Epoch)
         - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together
         - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together
         - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
         - parameter offset: (query) Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
         - parameter sort: (query) Sort by given field. If the field is prefixed with `-, it will sort in descending order.

         - returns: RequestBuilder<Measurement> 
         */
        public class func v1MeasurementsGet(accessToken accessToken: String?, variableName: String?, source: String?, value: String?, lastUpdated: String?, unit: String?, startTime: String?, createdAt: String?, updatedAt: String?, endTime: String?, groupingWidth: Int?, groupingTimezone: String?, limit: Int?, offset: Int?, sort: Int?) -> RequestBuilder<Measurement> {
            let path = "/v1/measurements"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "variableName": variableName,
                "source": source,
                "value": value,
                "lastUpdated": lastUpdated,
                "unit": unit,
                "startTime": startTime,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "endTime": endTime,
                "groupingWidth": groupingWidth,
                "groupingTimezone": groupingTimezone,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Measurement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Post a new set or update existing measurements to the database
         
         - POST /v1/measurements
         - You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\"measurements\":[{\"startTime\":1439389320,\"value\":\"3\"}, {\"startTime\":1439389319,\"value\":\"2\"}],\"name\":\"Acne (out of 5)\",\"source\":\"QuantiModo\",\"category\":\"Symptoms\",\"combinationOperation\":\"MEAN\",\"unit\":\"/5\"}]
         - OAuth:
           - type: oauth2
           - name: oauth2
         
         - parameter body: (body) An array of measurements you want to insert.
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Void> 
         */
        public class func v1MeasurementsPost(body body: MeasurementSet, accessToken: String?) -> RequestBuilder<Void> {
            let path = "/v1/measurements"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get daily measurements for this user
         
         - GET /v1/measurements/daily
         - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. <br>Supported filter parameters:<br><ul><li><b>value</b> - Value of measurement</li><li><b>lastUpdated</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{example={
  "startTime" : "aeiou",
  "unit" : "aeiou",
  "source" : "aeiou",
  "humanTime" : {
    "timezone" : "aeiou",
    "timezone_type" : "",
    "date" : "aeiou"
  },
  "storedAbbreviatedUnitName" : "aeiou",
  "value" : 1.3579000000000001069366817318950779736042022705078125,
  "storedValue" : 1.3579000000000001069366817318950779736042022705078125,
  "abbreviatedUnitName" : "aeiou",
  "originalValue" : "",
  "originalAbbreviatedUnitName" : "aeiou",
  "variable" : "aeiou",
  "note" : "aeiou"
}, contentType=application/json}]
         
         - parameter variableName: (query) Name of the variable you want measurements for
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter abbreviatedUnitName: (query) The unit your want the measurements in
         - parameter startTime: (query) The lower limit of measurements returned (Iso8601)
         - parameter endTime: (query) The upper limit of measurements returned (Iso8601)
         - parameter groupingWidth: (query) The time (in seconds) over which measurements are grouped together
         - parameter groupingTimezone: (query) The time (in seconds) over which measurements are grouped together
         - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
         - parameter offset: (query) Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
         - parameter sort: (query) Sort by given field. If the field is prefixed with `-, it will sort in descending order.

         - returns: RequestBuilder<Measurement> 
         */
        public class func v1MeasurementsDailyGet(variableName variableName: String, accessToken: String?, abbreviatedUnitName: String?, startTime: String?, endTime: String?, groupingWidth: Int?, groupingTimezone: String?, limit: Int?, offset: Int?, sort: Int?) -> RequestBuilder<Measurement> {
            let path = "/v1/measurements/daily"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "variableName": variableName,
                "abbreviatedUnitName": abbreviatedUnitName,
                "startTime": startTime,
                "endTime": endTime,
                "groupingWidth": groupingWidth,
                "groupingTimezone": groupingTimezone,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Measurement>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete a measurement
         
         - POST /v1/measurements/delete
         - Delete a previously submitted measurement
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{example={
  "message" : "aeiou",
  "status" : "",
  "success" : true
}, contentType=application/json}]
         
         - parameter body: (body) The startTime and variableId of the measurement to be deleted.

         - returns: RequestBuilder<CommonResponse> 
         */
        public class func v1MeasurementsDeletePost(body body: MeasurementDelete) -> RequestBuilder<CommonResponse> {
            let path = "/v1/measurements/delete"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<CommonResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: true)
        }
    
        /**
         
         Get measurements range for this user
         
         - GET /v1/measurementsRange
         - Get Unix time-stamp (epoch time) of the user's first and last measurements taken.
         - OAuth:
           - type: oauth2
           - name: oauth2
         - examples: [{example={
  "upperLimit" : "",
  "lowerLimit" : ""
}, contentType=application/json}]
         
         - parameter sources: (query) Enter source name to limit to specific source (varchar)
         - parameter user: (query) If not specified, uses currently logged in user (bigint)

         - returns: RequestBuilder<MeasurementRange> 
         */
        public class func v1MeasurementsRangeGet(sources sources: String?, user: Int?) -> RequestBuilder<MeasurementRange> {
            let path = "/v1/measurementsRange"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "sources": sources,
                "user": user
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<MeasurementRange>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get Measurement
         
         - GET /v2/measurements/{id}
         - Get Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "startTime" : "aeiou",
    "unit" : "aeiou",
    "source" : "aeiou",
    "humanTime" : {
      "timezone" : "aeiou",
      "timezone_type" : "",
      "date" : "aeiou"
    },
    "storedAbbreviatedUnitName" : "aeiou",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "storedValue" : 1.3579000000000001069366817318950779736042022705078125,
    "abbreviatedUnitName" : "aeiou",
    "originalValue" : "",
    "originalAbbreviatedUnitName" : "aeiou",
    "variable" : "aeiou",
    "note" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_3> 
         */
        public class func v2MeasurementsIdGet(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_3> {
            var path = "/v2/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_3>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Update Measurement
         
         - PUT /v2/measurements/{id}
         - Update Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) Measurement that should be updated

         - returns: RequestBuilder<Inline_response_200_4> 
         */
        public class func v2MeasurementsIdPut(id id: Int, accessToken: String?, body: Measurement?) -> RequestBuilder<Inline_response_200_4> {
            var path = "/v2/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_4>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete Measurement
         
         - DELETE /v2/measurements/{id}
         - Delete Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_4> 
         */
        public class func v2MeasurementsIdDelete(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_4> {
            var path = "/v2/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_4>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
