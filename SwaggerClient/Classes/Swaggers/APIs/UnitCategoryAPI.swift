//
// UnitCategoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class UnitCategoryAPI: APIBase {
    
        /**
         
         Get unit categories
         
         - GET /unitCategories
         - Get a list of the categories of measurement units such as 'Distance', 'Duration', 'Energy', 'Frequency', 'Miscellany', 'Pressure', 'Proportion', 'Rating', 'Temperature', 'Volume', and 'Weight'.
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : [ {
    "id" : "",
    "updated_at" : "2016-02-09T02:17:55.476+0000",
    "name" : "aeiou",
    "created_at" : "2016-02-09T02:17:55.476+0000"
  } ],
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter name: (query) Unit category name
         - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format
         - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format
         - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
         - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
         - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.

         - returns: RequestBuilder<Inline_response_200_24> 
         */
        public class func unitCategoriesGet(accessToken accessToken: String?, name: String?, createdAt: String?, updatedAt: String?, limit: Int?, offset: Int?, sort: String?) -> RequestBuilder<Inline_response_200_24> {
            let path = "/unitCategories"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "name": name,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_24>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Store UnitCategory
         
         - POST /unitCategories
         - Store UnitCategory
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "id" : "",
    "updated_at" : "2016-02-09T02:17:55.478+0000",
    "name" : "aeiou",
    "created_at" : "2016-02-09T02:17:55.478+0000"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) UnitCategory that should be stored

         - returns: RequestBuilder<Inline_response_200_25> 
         */
        public class func unitCategoriesPost(accessToken accessToken: String?, body: UnitCategory?) -> RequestBuilder<Inline_response_200_25> {
            let path = "/unitCategories"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_25>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get UnitCategory
         
         - GET /unitCategories/{id}
         - Get UnitCategory
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "id" : "",
    "updated_at" : "2016-02-09T02:17:55.479+0000",
    "name" : "aeiou",
    "created_at" : "2016-02-09T02:17:55.479+0000"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of UnitCategory
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_25> 
         */
        public class func unitCategoriesIdGet(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_25> {
            var path = "/unitCategories/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_25>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Update UnitCategory
         
         - PUT /unitCategories/{id}
         - Update UnitCategory
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of UnitCategory
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) UnitCategory that should be updated

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func unitCategoriesIdPut(id id: Int, accessToken: String?, body: UnitCategory?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/unitCategories/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete UnitCategory
         
         - DELETE /unitCategories/{id}
         - Delete UnitCategory
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of UnitCategory
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func unitCategoriesIdDelete(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/unitCategories/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
