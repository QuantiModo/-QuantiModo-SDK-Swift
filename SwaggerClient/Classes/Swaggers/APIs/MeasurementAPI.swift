//
// MeasurementAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class MeasurementAPI: APIBase {
    
        /**
         
         Get measurements for this user
         
         - GET /measurements
         - Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten.
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : [ {
    "error" : "aeiou",
    "location" : "aeiou",
    "source_id" : 123,
    "unit_id" : 123,
    "id" : "",
    "connector_id" : 123,
    "original_unit_id" : 123,
    "duration" : 123,
    "updated_at" : "2016-02-09T02:17:55.434+0000",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "created_at" : "2016-02-09T02:17:55.434+0000",
    "start_time" : "aeiou",
    "longitude" : 1.3579000000000001069366817318950779736042022705078125,
    "user_id" : 123,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "client_id" : "aeiou",
    "variable_id" : 123,
    "original_value" : 1.3579000000000001069366817318950779736042022705078125,
    "note" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter userId: (query) ID of user that owns this measurement
         - parameter clientId: (query) The ID of the client application which originally stored the measurement
         - parameter connectorId: (query) The id for the connector data source from which the measurement was obtained
         - parameter variableId: (query) ID of the variable for which we are creating the measurement records
         - parameter sourceId: (query) Application or device used to record the measurement values
         - parameter startTime: (query) start time for the measurement event. Use ISO 8601 datetime format
         - parameter value: (query) The value of the measurement after conversion to the default unit for that variable
         - parameter unitId: (query) The default unit id for the variable
         - parameter originalValue: (query) Unconverted value of measurement as originally posted (before conversion to default unit)
         - parameter originalUnitId: (query) Unit id of the measurement as originally submitted
         - parameter duration: (query) Duration of the event being measurement in seconds
         - parameter note: (query) An optional note the user may include with their measurement
         - parameter latitude: (query) Latitude at which the measurement was taken
         - parameter longitude: (query) Longitude at which the measurement was taken
         - parameter location: (query) Optional human readable name for the location where the measurement was recorded
         - parameter createdAt: (query) When the record was first created. Use ISO 8601 datetime format
         - parameter updatedAt: (query) When the record was last updated. Use ISO 8601 datetime format
         - parameter error: (query) An error message if there is a problem with the measurement
         - parameter limit: (query) The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
         - parameter offset: (query) OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
         - parameter sort: (query) Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order.

         - returns: RequestBuilder<Inline_response_200_5> 
         */
        public class func measurementsGet(accessToken accessToken: String?, userId: Int?, clientId: String?, connectorId: Int?, variableId: Int?, sourceId: Int?, startTime: String?, value: Double?, unitId: Int?, originalValue: Double?, originalUnitId: Int?, duration: Int?, note: String?, latitude: Double?, longitude: Double?, location: String?, createdAt: String?, updatedAt: String?, error: String?, limit: Int?, offset: Int?, sort: String?) -> RequestBuilder<Inline_response_200_5> {
            let path = "/measurements"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken,
                "userId": userId,
                "clientId": clientId,
                "connectorId": connectorId,
                "variableId": variableId,
                "sourceId": sourceId,
                "startTime": startTime,
                "value": value,
                "unitId": unitId,
                "originalValue": originalValue,
                "originalUnitId": originalUnitId,
                "duration": duration,
                "note": note,
                "latitude": latitude,
                "longitude": longitude,
                "location": location,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "error": error,
                "limit": limit,
                "offset": offset,
                "sort": sort
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_5>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Post a new set or update existing measurements to the database
         
         - POST /measurements
         - You can submit or update multiple measurements in a measurements sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : [ {
    "error" : "aeiou",
    "location" : "aeiou",
    "source_id" : 123,
    "unit_id" : 123,
    "id" : "",
    "connector_id" : 123,
    "original_unit_id" : 123,
    "duration" : 123,
    "updated_at" : "2016-02-09T02:17:55.443+0000",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "created_at" : "2016-02-09T02:17:55.443+0000",
    "start_time" : "aeiou",
    "longitude" : 1.3579000000000001069366817318950779736042022705078125,
    "user_id" : 123,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "client_id" : "aeiou",
    "variable_id" : 123,
    "original_value" : 1.3579000000000001069366817318950779736042022705078125,
    "note" : "aeiou"
  } ],
  "success" : true
}, contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) Measurement that should be stored

         - returns: RequestBuilder<Inline_response_200_5> 
         */
        public class func measurementsPost(accessToken accessToken: String?, body: MeasurementPost?) -> RequestBuilder<Inline_response_200_5> {
            let path = "/measurements"
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_5>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get Measurements CSV
         
         - GET /measurements/csv
         - Download a CSV containing all user measurements
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{output=none}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<NSURL> 
         */
        public class func measurementsCsvGet(accessToken accessToken: String?) -> RequestBuilder<NSURL> {
            let path = "/measurements/csv"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<NSURL>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Post Request for Measurements CSV
         
         - POST /measurements/request_csv
         - Use this endpoint to schedule a CSV export containing all user measurements to be emailed to the user within 24 hours.
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example="", contentType=application/json}]
         
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Int> 
         */
        public class func measurementsRequestCsvPost(accessToken accessToken: String?) -> RequestBuilder<Int> {
            let path = "/measurements/request_csv"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Get Measurement
         
         - GET /measurements/{id}
         - Get Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : {
    "error" : "aeiou",
    "location" : "aeiou",
    "source_id" : 123,
    "unit_id" : 123,
    "id" : "",
    "connector_id" : 123,
    "original_unit_id" : 123,
    "duration" : 123,
    "updated_at" : "2016-02-09T02:17:55.452+0000",
    "value" : 1.3579000000000001069366817318950779736042022705078125,
    "created_at" : "2016-02-09T02:17:55.452+0000",
    "start_time" : "aeiou",
    "longitude" : 1.3579000000000001069366817318950779736042022705078125,
    "user_id" : 123,
    "latitude" : 1.3579000000000001069366817318950779736042022705078125,
    "client_id" : "aeiou",
    "variable_id" : 123,
    "original_value" : 1.3579000000000001069366817318950779736042022705078125,
    "note" : "aeiou"
  },
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_20> 
         */
        public class func measurementsIdGet(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_20> {
            var path = "/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_20>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Update Measurement
         
         - PUT /measurements/{id}
         - Update Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token
         - parameter body: (body) Measurement that should be updated

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func measurementsIdPut(id id: Int, accessToken: String?, body: Measurement?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let parameters = body?.encodeToJSON() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         Delete Measurement
         
         - DELETE /measurements/{id}
         - Delete Measurement
         - OAuth:
           - type: oauth2
           - name: quantimodo_oauth2
         - examples: [{example={
  "data" : "aeiou",
  "success" : true
}, contentType=application/json}]
         
         - parameter id: (path) id of Measurement
         - parameter accessToken: (query) User&#39;s OAuth2 access token

         - returns: RequestBuilder<Inline_response_200_2> 
         */
        public class func measurementsIdDelete(id id: Int, accessToken: String?) -> RequestBuilder<Inline_response_200_2> {
            var path = "/measurements/{id}"
            path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "accessToken": accessToken
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<Inline_response_200_2>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
