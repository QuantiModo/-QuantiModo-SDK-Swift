//
// UserVariableRelationship.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class UserVariableRelationship: JSONEncodable {
    /** id */
    public var id: Int32?
    /** Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors */
    public var confidenceLevel: String?
    /** A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors */
    public var confidenceScore: Float?
    /** Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. */
    public var direction: String?
    /** Number of seconds over which the predictor variable event is expected to produce a perceivable effect following the onset delay */
    public var durationOfAction: Int32?
    /** error_message */
    public var errorMessage: String?
    /** User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed */
    public var onsetDelay: Int32?
    /** Variable ID for the outcome variable */
    public var outcomeVariableId: Int32?
    /** Variable ID for the predictor variable */
    public var predictorVariableId: Int32?
    /** ID for default unit of the predictor variable */
    public var predictorUnitId: Int32?
    /** A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. */
    public var sinnRank: Float?
    /** Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. */
    public var strengthLevel: String?
    /** A value represented to the size of the effect which the predictor appears to have on the outcome. */
    public var strengthScore: Float?
    /** user_id */
    public var userId: Int32?
    /** vote */
    public var vote: String?
    /** Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value */
    public var valuePredictingHighOutcome: Float?
    /** Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value */
    public var valuePredictingLowOutcome: Float?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id?.encodeToJSON()
        nillableDictionary["confidence_level"] = self.confidenceLevel
        nillableDictionary["confidence_score"] = self.confidenceScore
        nillableDictionary["direction"] = self.direction
        nillableDictionary["duration_of_action"] = self.durationOfAction?.encodeToJSON()
        nillableDictionary["error_message"] = self.errorMessage
        nillableDictionary["onset_delay"] = self.onsetDelay?.encodeToJSON()
        nillableDictionary["outcome_variable_id"] = self.outcomeVariableId?.encodeToJSON()
        nillableDictionary["predictor_variable_id"] = self.predictorVariableId?.encodeToJSON()
        nillableDictionary["predictor_unit_id"] = self.predictorUnitId?.encodeToJSON()
        nillableDictionary["sinn_rank"] = self.sinnRank
        nillableDictionary["strength_level"] = self.strengthLevel
        nillableDictionary["strength_score"] = self.strengthScore
        nillableDictionary["user_id"] = self.userId?.encodeToJSON()
        nillableDictionary["vote"] = self.vote
        nillableDictionary["value_predicting_high_outcome"] = self.valuePredictingHighOutcome
        nillableDictionary["value_predicting_low_outcome"] = self.valuePredictingLowOutcome
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
