//
// UserVariableRelationship.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class UserVariableRelationship: JSONEncodable {

    /** id */
    public var id: Int?
    /** Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors */
    public var confidence_level: String?
    /** A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors */
    public var confidence_score: Float?
    /** Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. */
    public var direction: String?
    /** Number of seconds over which the predictor variable event is expected to produce a perceivable effect following the onset delay */
    public var duration_of_action: Int?
    /** error_message */
    public var error_message: String?
    /** User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed */
    public var onset_delay: Int?
    /** Variable ID for the outcome variable */
    public var outcome_variable_id: Int?
    /** Variable ID for the predictor variable */
    public var predictor_variable_id: Int?
    /** ID for default unit of the predictor variable */
    public var predictor_unit_id: Int?
    /** A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. */
    public var sinn_rank: Float?
    /** Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. */
    public var strength_level: String?
    /** A value represented to the size of the effect which the predictor appears to have on the outcome. */
    public var strength_score: Float?
    /** user_id */
    public var user_id: Int?
    /** vote */
    public var vote: String?
    /** Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value */
    public var value_predicting_high_outcome: Float?
    /** Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value */
    public var value_predicting_low_outcome: Float?
    

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["confidence_level"] = self.confidence_level
        nillableDictionary["confidence_score"] = self.confidence_score
        nillableDictionary["direction"] = self.direction
        nillableDictionary["duration_of_action"] = self.duration_of_action
        nillableDictionary["error_message"] = self.error_message
        nillableDictionary["onset_delay"] = self.onset_delay
        nillableDictionary["outcome_variable_id"] = self.outcome_variable_id
        nillableDictionary["predictor_variable_id"] = self.predictor_variable_id
        nillableDictionary["predictor_unit_id"] = self.predictor_unit_id
        nillableDictionary["sinn_rank"] = self.sinn_rank
        nillableDictionary["strength_level"] = self.strength_level
        nillableDictionary["strength_score"] = self.strength_score
        nillableDictionary["user_id"] = self.user_id
        nillableDictionary["vote"] = self.vote
        nillableDictionary["value_predicting_high_outcome"] = self.value_predicting_high_outcome
        nillableDictionary["value_predicting_low_outcome"] = self.value_predicting_low_outcome
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
