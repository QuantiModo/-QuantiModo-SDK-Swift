//
// Variable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class Variable: JSONEncodable {

    /** id */
    public var id: Int?
    /** client_id */
    public var client_id: String?
    /** ID of the parent variable if this variable has any parent */
    public var parent_id: Int?
    /** User-defined variable display name */
    public var name: String?
    /** Variable category ID */
    public var variable_category_id: Int?
    /** ID of the default unit of measurement to use for this variable */
    public var default_unit_id: Int?
    /** How to combine values of this variable (for instance, to see a summary of the values over a month) SUM or MEAN */
    public var combination_operation: String?
    /** Value for replacing null measurements */
    public var filling_value: Float?
    /** Maximum reasonable value for this variable (uses default unit) */
    public var maximum_allowed_value: Float?
    /** Minimum reasonable value for this variable (uses default unit) */
    public var minimum_allowed_value: Float?
    /** How long it takes for a measurement in this variable to take effect */
    public var onset_delay: Int?
    /** How long the effect of a measurement in this variable lasts */
    public var duration_of_action: Int?
    /** Is variable public */
    public var Swaggerpublic: Int?
    /** A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user */
    public var cause_only: Bool?
    /** Most common value */
    public var most_common_value: Float?
    /** Most common Unit */
    public var most_common_unit_id: Int?
    /** Standard Deviation */
    public var standard_deviation: Float?
    /** Variance */
    public var variance: Float?
    /** Mean */
    public var mean: Float?
    /** Median */
    public var median: Float?
    /** Number of measurements */
    public var number_of_measurements: Float?
    /** Number of unique values */
    public var number_of_unique_values: Float?
    /** Skewness */
    public var skewness: Float?
    /** Kurtosis */
    public var kurtosis: Float?
    /** status */
    public var status: String?
    /** error_message */
    public var error_message: String?
    /** When this variable or its settings were last updated */
    public var last_successful_update_time: NSDate?
    /** When the record was first created. Use ISO 8601 datetime format */
    public var created_at: NSDate?
    /** When the record in the database was last updated. Use ISO 8601 datetime format */
    public var updated_at: NSDate?
    /** Product URL */
    public var product_url: String?
    /** Image URL */
    public var image_url: String?
    /** Price */
    public var price: Float?
    /** Number of variables */
    public var number_of_user_variables: Int?
    /** Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables. */
    public var outcome: Bool?
    /** Minimum recorded value of this variable */
    public var minimum_recorded_value: Float?
    /** Maximum recorded value of this variable */
    public var maximum_recorded_value: Float?
    

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["id"] = self.id
        nillableDictionary["client_id"] = self.client_id
        nillableDictionary["parent_id"] = self.parent_id
        nillableDictionary["name"] = self.name
        nillableDictionary["variable_category_id"] = self.variable_category_id
        nillableDictionary["default_unit_id"] = self.default_unit_id
        nillableDictionary["combination_operation"] = self.combination_operation
        nillableDictionary["filling_value"] = self.filling_value
        nillableDictionary["maximum_allowed_value"] = self.maximum_allowed_value
        nillableDictionary["minimum_allowed_value"] = self.minimum_allowed_value
        nillableDictionary["onset_delay"] = self.onset_delay
        nillableDictionary["duration_of_action"] = self.duration_of_action
        nillableDictionary["Swaggerpublic"] = self.Swaggerpublic
        nillableDictionary["cause_only"] = self.cause_only
        nillableDictionary["most_common_value"] = self.most_common_value
        nillableDictionary["most_common_unit_id"] = self.most_common_unit_id
        nillableDictionary["standard_deviation"] = self.standard_deviation
        nillableDictionary["variance"] = self.variance
        nillableDictionary["mean"] = self.mean
        nillableDictionary["median"] = self.median
        nillableDictionary["number_of_measurements"] = self.number_of_measurements
        nillableDictionary["number_of_unique_values"] = self.number_of_unique_values
        nillableDictionary["skewness"] = self.skewness
        nillableDictionary["kurtosis"] = self.kurtosis
        nillableDictionary["status"] = self.status
        nillableDictionary["error_message"] = self.error_message
        nillableDictionary["last_successful_update_time"] = self.last_successful_update_time?.encodeToJSON()
        nillableDictionary["created_at"] = self.created_at?.encodeToJSON()
        nillableDictionary["updated_at"] = self.updated_at?.encodeToJSON()
        nillableDictionary["product_url"] = self.product_url
        nillableDictionary["image_url"] = self.image_url
        nillableDictionary["price"] = self.price
        nillableDictionary["number_of_user_variables"] = self.number_of_user_variables
        nillableDictionary["outcome"] = self.outcome
        nillableDictionary["minimum_recorded_value"] = self.minimum_recorded_value
        nillableDictionary["maximum_recorded_value"] = self.maximum_recorded_value
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
