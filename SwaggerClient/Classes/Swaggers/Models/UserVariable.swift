//
// UserVariable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public class UserVariable: JSONEncodable {
    /** ID of the parent variable if this variable has any parent */
    public var parentId: Int32?
    /** User ID */
    public var userId: Int32?
    /** client_id */
    public var clientId: String?
    /** ID of variable */
    public var variableId: Int32?
    /** ID of unit to use for this variable */
    public var defaultUnitId: Int32?
    /** Minimum reasonable value for this variable (uses default unit) */
    public var minimumAllowedValue: Float?
    /** Maximum reasonable value for this variable (uses default unit) */
    public var maximumAllowedValue: Float?
    /** Value for replacing null measurements */
    public var fillingValue: Float?
    /** The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables */
    public var joinWith: Int32?
    /** How long it takes for a measurement in this variable to take effect */
    public var onsetDelay: Int32?
    /** Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect */
    public var durationOfAction: Int32?
    /** ID of variable category */
    public var variableCategoryId: Int32?
    /** updated */
    public var updated: Int32?
    /** Is variable public */
    public var _public: Int32?
    /** A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user */
    public var causeOnly: Bool?
    /** 0 -&gt; No filling, 1 -&gt; Use filling-value */
    public var fillingType: String?
    /** Number of measurements */
    public var numberOfMeasurements: Int32?
    /** Number of processed measurements */
    public var numberOfProcessedMeasurements: Int32?
    /** Number of measurements at last analysis */
    public var measurementsAtLastAnalysis: Int32?
    /** ID of last Unit */
    public var lastUnitId: Int32?
    /** ID of last original Unit */
    public var lastOriginalUnitId: Int32?
    /** Last Value */
    public var lastValue: Float?
    /** Last original value which is stored */
    public var lastOriginalValue: Int32?
    /** ID of last source */
    public var lastSourceId: Int32?
    /** Number of correlations for this variable */
    public var numberOfCorrelations: Int32?
    /** status */
    public var status: String?
    /** error_message */
    public var errorMessage: String?
    /** When this variable or its settings were last updated */
    public var lastSuccessfulUpdateTime: NSDate?
    /** Standard deviation */
    public var standardDeviation: Float?
    /** Variance */
    public var variance: Float?
    /** Minimum recorded value of this variable */
    public var minimumRecordedValue: Float?
    /** Maximum recorded daily value of this variable */
    public var maximumRecordedDailyValue: Float?
    /** Mean */
    public var mean: Float?
    /** Median */
    public var median: Float?
    /** Most common Unit ID */
    public var mostCommonUnitId: Int32?
    /** Most common value */
    public var mostCommonValue: Float?
    /** Number of unique daily values */
    public var numberOfUniqueDailyValues: Float?
    /** Number of changes */
    public var numberOfChanges: Int32?
    /** Skewness */
    public var skewness: Float?
    /** Kurtosis */
    public var kurtosis: Float?
    /** Latitude */
    public var latitude: Float?
    /** Longitude */
    public var longitude: Float?
    /** Location */
    public var location: String?
    /** Earliest measurement start_time to be used in analysis. Use ISO 8601 datetime format */
    public var experimentStartTime: NSDate?
    /** Latest measurement start_time to be used in analysis. Use ISO 8601 datetime format */
    public var experimentEndTime: NSDate?
    /** When the record was first created. Use ISO 8601 datetime format */
    public var createdAt: NSDate?
    /** When the record in the database was last updated. Use ISO 8601 datetime format */
    public var updatedAt: NSDate?
    /** Outcome variables (those with &#x60;outcome&#x60; &#x3D;&#x3D; 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables */
    public var outcome: Bool?
    /** Comma-separated list of source names to limit variables to those sources */
    public var sources: String?
    /** Earliest source time */
    public var earliestSourceTime: Int32?
    /** Latest source time */
    public var latestSourceTime: Int32?
    /** Earliest measurement time */
    public var earliestMeasurementTime: Int32?
    /** Latest measurement time */
    public var latestMeasurementTime: Int32?
    /** Earliest filling time */
    public var earliestFillingTime: Int32?
    /** Latest filling time */
    public var latestFillingTime: Int32?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["parent_id"] = self.parentId?.encodeToJSON()
        nillableDictionary["user_id"] = self.userId?.encodeToJSON()
        nillableDictionary["client_id"] = self.clientId
        nillableDictionary["variable_id"] = self.variableId?.encodeToJSON()
        nillableDictionary["default_unit_id"] = self.defaultUnitId?.encodeToJSON()
        nillableDictionary["minimum_allowed_value"] = self.minimumAllowedValue
        nillableDictionary["maximum_allowed_value"] = self.maximumAllowedValue
        nillableDictionary["filling_value"] = self.fillingValue
        nillableDictionary["join_with"] = self.joinWith?.encodeToJSON()
        nillableDictionary["onset_delay"] = self.onsetDelay?.encodeToJSON()
        nillableDictionary["duration_of_action"] = self.durationOfAction?.encodeToJSON()
        nillableDictionary["variable_category_id"] = self.variableCategoryId?.encodeToJSON()
        nillableDictionary["updated"] = self.updated?.encodeToJSON()
        nillableDictionary["public"] = self._public?.encodeToJSON()
        nillableDictionary["cause_only"] = self.causeOnly
        nillableDictionary["filling_type"] = self.fillingType
        nillableDictionary["number_of_measurements"] = self.numberOfMeasurements?.encodeToJSON()
        nillableDictionary["number_of_processed_measurements"] = self.numberOfProcessedMeasurements?.encodeToJSON()
        nillableDictionary["measurements_at_last_analysis"] = self.measurementsAtLastAnalysis?.encodeToJSON()
        nillableDictionary["last_unit_id"] = self.lastUnitId?.encodeToJSON()
        nillableDictionary["last_original_unit_id"] = self.lastOriginalUnitId?.encodeToJSON()
        nillableDictionary["last_value"] = self.lastValue
        nillableDictionary["last_original_value"] = self.lastOriginalValue?.encodeToJSON()
        nillableDictionary["last_source_id"] = self.lastSourceId?.encodeToJSON()
        nillableDictionary["number_of_correlations"] = self.numberOfCorrelations?.encodeToJSON()
        nillableDictionary["status"] = self.status
        nillableDictionary["error_message"] = self.errorMessage
        nillableDictionary["last_successful_update_time"] = self.lastSuccessfulUpdateTime?.encodeToJSON()
        nillableDictionary["standard_deviation"] = self.standardDeviation
        nillableDictionary["variance"] = self.variance
        nillableDictionary["minimum_recorded_value"] = self.minimumRecordedValue
        nillableDictionary["maximum_recorded_daily_value"] = self.maximumRecordedDailyValue
        nillableDictionary["mean"] = self.mean
        nillableDictionary["median"] = self.median
        nillableDictionary["most_common_unit_id"] = self.mostCommonUnitId?.encodeToJSON()
        nillableDictionary["most_common_value"] = self.mostCommonValue
        nillableDictionary["number_of_unique_daily_values"] = self.numberOfUniqueDailyValues
        nillableDictionary["number_of_changes"] = self.numberOfChanges?.encodeToJSON()
        nillableDictionary["skewness"] = self.skewness
        nillableDictionary["kurtosis"] = self.kurtosis
        nillableDictionary["latitude"] = self.latitude
        nillableDictionary["longitude"] = self.longitude
        nillableDictionary["location"] = self.location
        nillableDictionary["experiment_start_time"] = self.experimentStartTime?.encodeToJSON()
        nillableDictionary["experiment_end_time"] = self.experimentEndTime?.encodeToJSON()
        nillableDictionary["created_at"] = self.createdAt?.encodeToJSON()
        nillableDictionary["updated_at"] = self.updatedAt?.encodeToJSON()
        nillableDictionary["outcome"] = self.outcome
        nillableDictionary["sources"] = self.sources
        nillableDictionary["earliest_source_time"] = self.earliestSourceTime?.encodeToJSON()
        nillableDictionary["latest_source_time"] = self.latestSourceTime?.encodeToJSON()
        nillableDictionary["earliest_measurement_time"] = self.earliestMeasurementTime?.encodeToJSON()
        nillableDictionary["latest_measurement_time"] = self.latestMeasurementTime?.encodeToJSON()
        nillableDictionary["earliest_filling_time"] = self.earliestFillingTime?.encodeToJSON()
        nillableDictionary["latest_filling_time"] = self.latestFillingTime?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
